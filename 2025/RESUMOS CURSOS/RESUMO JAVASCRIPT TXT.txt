>>>>    <script>/*  CURSO JAVASCRIPT
     
    Javascript é case sensitive
    Javascript não precisa fechar com ;
    // comentário com 1 linha
    /* comentário com mais de 1 linha


    ///////////////////////////////////////

    CÓDIGO PARA APARECER UM POP-UP NA TELA 

    window.alert("Mensagem Pop-up")
    OU
    alert("Mensagem Pop-up")
    

    ///////////////////////////////////

    CÓDIGO PARA APARECER UM POP-UP NA TELA COM BOTÕES OK E CANCELAR

    window.confirm("Você está certo disso?")
    OU
    confirm("Você está certo disso?")
    

    //////////////////////////////////

    CÓDIGO PARA APARECER UM CAMPO DE INPUT

    window.prompt("Digite algo aqui")
    OU
    prompt("Digite algo aqui")

    O resultado é transformado em String.
    Se quiser transformar em número, é preciso usar Number()

    Exemplo:

    Number(prompt("Digite algo aqui"))

    Caso queira especificar o tipo de número, é preciso usar Number.parseInt() ou Number.parseFloat()

    Number.parseInt(VARIAVEL)
    ou
    parseInt(VARIAVEL)

    Number.parseFloat(VARIAVEL)
    ou
    parseFloat(VARIAVEL)
    

   //////////////////////////////////////////

    PARA ESCONDER O CONTEÚDO DE UMA TAG, CLASSE OU ID

    HTML:
    <div id="texto">
        Texto que será escondido
    </div>
    <button id="btn" onClick="hide()">ESCONDER</button>

    JAVASCRIPT:

    function hide(){
        document.getElementById("texto").style.visibility = "hidden"
        /* ou    document.querySelector("div#texto").style.visibility = "hidden"  */
    }


    Por padrão as tags vem com: 
    tag {
        visibility: visible;
    }
    

    ////////////////////////////////////////

    PARA MOSTRAR E ESCONDER O CONTEUDO DE UMA TAG, CLASSE OU ID

    HTML:
    <button id="btn">MOSTRAR</button>
    <p id="txt">TEXTO DE EXEMPLO</p>


    CSS:
    #txt {
        display: none;
    }


    JAVASCRIPT:

    const botao = document.getElementById("btn")
    const texto = document.getElementById("txt")

    botao.addEventListener("click" , () => {

        if (texto.style.display === "none") {
            texto.style.display = "flex"              /* ou display = "block" */
            botao.textContent = "ESCONDER"
        }
        else {
            texto.style.display = "none"
            botao.textContent = "MOSTRAR"
        }
    })

    OBS: Esta forma pode acabar causando uma mudança de lugar no botão caso o botão venha depois da tag que será escondida. 
    Para que isso não aconteça, é possível trocar o display pelo visibility.

    HTML:
    <p id="txt">TEXTO DE EXEMPLO</p>    
    <button id="btn">MOSTRAR</button>

    CSS:
    #txt {
        visibility: hidden;
    }

    JAVASCRIPT:
    const botao = document.getElementById("btn")
    const texto = document.getElementById("txt")

    botao.addEventListener("click" , () => {
        if (texto.style.visibility === "hidden") {
            texto.style.visibility = "visible"        
            botao.textContent = "ESCONDER"
        }
        else {
            texto.style.visibility = "hidden"
            botao.textContent = "MOSTRAR"
        }
    })

    Com isso o botão permanecerá no mesmo local e o texto desaparecerá mas manterá a area que ocupa em branco

    ////////////////////////////////////////////

    USANDO O TOGGLE PARA MOSTRAR OU ESCONDER UMA TAG, CLASS OU ID:

    HTML:
    <div id="texto">Texto que será escondido</div>
    <button id="btn" onClick="showhide()">MOSTRAR/ESCONDER</button> 


    CSS:
    .esconder {
        display: none;
    }

    JAVASCRIPT:
    function showhide(){
        document.getElementById("texto").classList.toggle("esconder")
    } 

    ou usando um eventListener:

    document.getElementById("btn").addEventListener("click" , () => {
        document.getElementById("texto").classList.toggle("esconder")
    })

    /////

    Para que os elementos permaneçam no mesmo lugar e não se movam, pode-se usar o visibility:

    HTML:
    <div id="texto">Texto que será escondido</div>
    <button id="btn"">MOSTRAR/ESCONDER</button> 


    CSS:
    .esconder {
        visibility: hidden;
    }

    JAVASCRIPT:
    document.getElementById("btn").addEventListener("click" , () => {
        document.getElementById("texto").classList.toggle("esconder")
    })



   /////////////////////////////////////////

    PARA TRANSFORMAR UMA IMAGEM EM CINZA (REMOVER AS CORES)

    HTML:
    <img src="NomeDaImagem.png" alt="" id="ID" />

    JAVASCRIPT:
    document.getElementById("ID").style.filter = "grayscale(100%)"
    ou
    document.querySelector("div#ID").style.filter = "grayscale(100%)"

    //////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=OJgu_KCCUSY&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=11
    ///////////////////////////////////////////////////////////////////////////////////////////

////        PARA IMPRIMIR ALGO NA TELA

    document.write("STRING")
    OU 
    document.write(NUMERO OU VARIAVEL)

    ///////

    Pode-se usar com `${VARIAVEL}` também:

    Exemplo:
    var x = "Exemplo"
    document.write(`Teste de ${x}`)

    ///////

    -Pode-se usar também:

    document.getElementById("ID").innerHTML = "Texto"         /* Preserva espaços, indentação, etc... do texto */ 
    ou
    document.getElementById("ID").innerText = "Texto"         /* Imprime apenas o texto */ 
    ou
    document.getElementById("ID").textContent = "Texto"      /* Preserva espaços, indentação, etc... do texto */ 

    OBS:BER MAIS O metodo innerHTML apresenta alguns problemas de segurança, portanto não é muito indicado.
    PARA SABER MAIS: https://www.youtube.com/embed/y17RuWkWdn8?autoplay=1

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA TRANSFORMAR UMA STRING OU FLOAT EM INT

    Number.parseInt(VARIAVEL)
    OU
    parseInt(VARIAVEL)

    Para deixar o Javascript decidir o tipo de número:
    Number(VARIAVEL)

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    

////        PARA TRANSFORMAR UMA STRING OU INT EM FLOAT

    Number.parseFloat(VARIAVEL)
    OU
    parseFloat(VARIAVEL)

    Para deixar o Javascript decidir o tipo de número:
    Number(VARIAVEL)
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA TRANSFORMAR UM NUMERO EM STRING

    String(VARIAVEL)
    OU
    VARIAVEL.toString()
    

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        CONCATENAÇÃO

    var x = "de"
    var y = "Exemplo" + x + "Concatenação"


    document.write(y)
    >>> Exemplo de Concatenação

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        TEMPLATE STRING (PLACEHOLDER)

    var x = "de"
    var y = `Exemplo ${x} Template String`

    document.write(y)
    >>> Exemplo de Template String

    ////

    Obs: O template string entende quebras de linhas, não sendo necessário adicionar o sinal de +:
    VIDEO: https://www.youtube.com/watch?v=R2PvSZU5xLY

    var texto = `Linha 1
     Linha 2
     Linha 3`

    document.write(texto)

    >>> Linha 1 Linha 2 Linha 3

    Caso queira colocar uma quebra de linha, é preciso adicionar \n no console.log:

    var texto = `Linha 1\nLinha 2\nLinha 3`

    console.log(texto)

    >>> Linha 1 
    >>> Linha 2 
    >>> Linha 3

    Caso esteja utilizando o HTML, é preciso usar o <br> para quebrar linhas:

    var texto = `Linha 1<br>Linha 2<br>Linha 3`

    document.write(texto)

    >>> Linha 1 
    >>> Linha 2 
    >>> Linha 3

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
   
////        CÓDIGO PARA SABER A QUANTIDADE DE ITENS COM LENGTH

    lista = [1, 3, 4, 6]

    var x = lista.length

    document.write(x)
    >>> 4
    
    //////////////

    -É possível incluir elementos em um array / vetor usando length:

    Array[Array.length] = "item";

    Exemplo:

    var lista = [1 , 2 , 3]

    lista[lista.length] = 4

    document.write(lista)
    >>> 1,2,3,4

    O método length inclui 1 item por vez no final de uma lista:

    //////////////

    -É possível remover elementos de um array / vetor usando length:

    Array.length = N

    N = número de elementos que deseja que a lista tenha.

    Os itens removidos são os do final do array / vetor.

    Exemplo:

    var primos = [2,3,5,7,11,13,17];

    primos.length = 4;

    document.write(primos);
    >>> 2,3,5,7

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA ACESSAR O ÚLTIMO ELEMENTO DE UM ARRAY / VETOR USANDO LENGTH
        (não tem no video)

    lista [lista.length-1]

    ////////

    Exemplo caso queira excluir o último item da lista:

    var lista = [2,4,6,8,10,12];
    delete lista[lista.length-1]
    document.write(lista)
    >>> 2,4,6,8,10,

    ////////

    Caso queria substituir o último item da lista:

    var lista = [2,4,6,8,10,12];
    lista[lista.length-1] = "15"
    document.write(lista)
    >>> 2,4,6,8,10,15

    ////////

    Caso queira substituir o penúltimo item de uma lista (e assim por diante):
    var lista = [2,4,6,8,10,12];
    lista[lista.length-2] = "15"
    document.write(lista)
    >>> 2,4,6,8,15,12

    ////////

    Atenção:
    Caso use uma variável para guardar os itens excluídos com delete:

    var lista = [2,4,6,8,10,12];
    var x = delete lista[lista.length-1]
    document.write(x)
    >>> True

    //////////////////////////////////////////////////////////////////////////////////////////////////////////

////        CÓDIGO PARA TRANSFORMAR UM NÚMERO EM DUAS CASA DECIMAIS (E ARREDONDAR ÀS VEZES)

    VARIAVEL.toFixed(NUMEROS DE CASAS DECIMAIS)

    OBS: Transforma o número em STRING
    

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA SUBSTITUIR UMA COISA POR OUTRA

    VARIAVEL.replace("ITEM 1" , "ITEM 2")

    //////////

    CÓDIGO PARA TRANSFORMAR PONTO EM VÍRGULA

    Exemplo:
    var x = 13.458765
    var y = x.toFixed(2)
    var z = y.replace("." , ",")
    document.write(z)
    

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    
////        PARA TRANSFORMAR EM REAIS (R$)

    VARIAVEL.toLocaleString("pt-BR" , {style: "currency" , currency: "BRL"})

    Exemplo:
    const x = 2865.79
    const y = x.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
    document.write(y)

    OBS: Só aceita números int ou float. Não aceita string

    Para saber mais: https://dev.to/vanribeiro/formatando-numeros-e-moedas-com-tolocalestring-2j97
    

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=hZG9ODUdxHo&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=12
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA SABER O TIPO DE VARIAVEL

    typeof VARIAVEL
    ou
    typeof(VARIAVEL)
    

    //////////////////////////////////////////////////

    OPERADORES ARITMÉTICOS

    + = soma
    - = subtração
    * = multiplicação
    / = divisão real (quociente com número com casas decimais)
    % = para achar o resto de uma divisão
    ** = potenciação
    
    OBS: Não existe o operador // em Javascript

    /////////////////////////////////////////////////

    ORDEM DAS OPERAÇÕES MATEMÁTICAS

    () = parenteses
    ** = potenciação
    * , / , % = multiplicação e divisão
    + , - = soma e subtração
    == , != , > , < , >= , <=  =  operadores relacionais
    ! = negação
    && , and  =  e (conjunção)
    || , or  =  ou (disjunção)

    OBS: Utiliza-se os parenteses para mudar a ordem de precedencia
    
    ////////////////////////////////////////////////

    AUTO-ATRIBUIÇÕES

    x = x + 2
    ou
    x += 2 

    /////////////////////////////////////////////////

    INCREMENTO

    x = x + 1
    ou 
    x += 1
    ou 
    x++  (pós-incremento: resultado aparecerá depois)
    ++x  (pré-incremento: resultado aparecerá antes)

    ////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=BP63NhITvao&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=12
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

    OPERADORES RELACIONAIS

    >  =  maior que
    <  =  menor que
    >=  =  maior ou igual a 
    <=  =  menor ou igual a 
    ==  =  igual (é o mesmo valor)
    ===  =  idêntico (é o mesmo tipo e valor)
    !=  =  diferente (não é o mesmo valor)
    !==  =  não idêntico (não é o mesmo tipo e valor)

    /////////////////////////////////////////////////////

    OPERADORES LÓGICOS

    !  =  negação
    && = e (conjunção)
    || =  ou (disjunção)

    Obs: Ordem de precedencia: ! => && => ||

    //////////////////////////////////////////////////////

    PARA SUBSTITUIR TRUE E FALSE POR VERDADEIRO E FALSO

            function Função(condicao){
        if (condicao == "true"){
            return "Verdadeiro"
        }
        else {
            return "Falso"
        }
    }

    var x = 10 > 2
    var y = String(x)

    document.write(Função(y))

    /////////////////////////////////////////////////

    OPERADOR TERNÁRIO

    teste ? true : false
     
    Exemplo 1:
    média >= 7.0 ? "Aprovado" : "Reprovado"

    Exemplo 2:
    5 > 2 ? "Verdadeiro" : "Falso"

    ///////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=WWZX8RWLxIk&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=14
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA SABER QUAL CHARSET ESTÀ SENDO USADO

    window.document.charset
    ou 
    document.charset

    >>> UTF-8

    //////////////////////////////////////////////////////////

    PARA SABER QUAL NAVEGADOR ESTÁ SENDO USADO

    window.navigator.appName
    ou 
    navigator.appName

    >>> Netscape

    /////////////////////////////////////////////////////////

    PARA SABER QUAL A URL DA PÁGINA

    window.document.URL
    ou 
    document.URL

    ////////////////////////////////////////////////////////

    PARA SELECIONAR UMA ID

    document.getElementById("NOME DA ID")

    Obs: É usado em conjunto com .innerHTML ou .innerText

    ////

    -Para modificar o texto de um elemento:

    HTML:
    <div id="ID">Texto original</div>

    JS:
    document.getElementById("ID").innerHTML = "Texto modificado"
    ou
    document.getElementById("ID").innerHTML == "Texto modificado"

    ////

    -Para modificar o texto de mais de um elemento:

    HTML:
    <div id="ID1">Texto original 1</div>
    <div id="ID2">Texto original 2</div>
    <div id="ID3">Texto original 3</div>

    JS:
    let div1 = document.getElementById("ID1")
    let div2 = document.getElementById("ID2")
    let div3 = document.getElementById("ID3")

    const array = [div1, div2, div3]

    for (let div of array){
        div.innerHTML = "Texto modificado"
    }


    ou usando map:
    array.map( div => {
        div.innerHTML = "Texto modificado"
    })

    ////

    -Para obter alguma informação de um elemento:

    Para obter o id:

    HTML:
    <div id="ID">Texto</div>

    JS:
    let infoID = document.getElementById("ID").id
    console.log(infoID)

    ///

    Para obter o texto:

    HTML:
    <div id="ID">Texto</div>

    JS:
    let infoTexto = document.getElementById("ID").innerHTML
    console.log(infoTexto)

    ///

    Para obter a classe:

    HTML:
    <div id="ID" class="CLASSE">Texto</div>

    JS:
    let infoClasse = document.getElementById("ID").className
    console.log(infoClasse)

    /////

    -Para modificar a classe de um elemento:

    HTML:
    <div id="ID" class="classe_original">Texto</div>

    JS:
    document.getElementById("ID").className = "classe_nova"     //*dando um novo nome para a classe do elemento
    let infoClasse = document.getElementById("ID").className 
    console.log(infoClasse)
    >>> classe_nova


    ///////////////////////////////////////////////////////

    PARA SELECIONAR UMA TAG

    document.getElementsByTagName("NOME DA TAG")

    Exemplo:
    HTML:
    <h1> Primeiro texto </h1>
    <h1> Segundo texto </h1>

    JS:
    document.getElementsByTagName("h1")      *Para pegar todas as tags h1
    ou
    document.getElementsByTagName("h1")[1]      *Para pegar uma tag h1 específica pela ordem em que aparece

    Exemplo para substituir o conteúdo da tag:
    document.getElementsByTagName("h1")[0].innerHTML = "Texto que substitui a primeira tag h1"

    Exemplo para imprimir o conteúdo da tag:
    var x = document.getElementsByTagName("h1")[0].innerText 
    document.write(x)

    /////

    Para substituir o conteúdo de todas as tags:

    HTML:
    <div>Texto original 1</div>
    <div>Texto original 2</div>
    <div>Texto original 3</div>

    JS:
    let elemento = [...document.getElementsByTagName("div")]
    elemento.map( x => {
        x.innerHTML = "Texto modificado"
    })

    /////////////////////////////////////////////////////////

    PARA SUBSTITUIR A COR DA FONTE DE UMA TAG

    VARIAVEL.style.color = "COR"

    Exemplo:
    var x = document.getElementsByTagName("TAG")[0]
    x.style.color = "blue"
    

    /////////////////////////////////////////////////////////

    PARA SUBSTITUIR A COR DE FUNDO DE UMA TAG

    Exemplo:
    var x = window.document.body
    x.style.background = "red"

    Caso queira usar hexadecimal:
    x.style.background = "#ffffff"

    ////////////////////////////////////////////////////////

    innerHTML e innerText

    innerHTML = mostra o conteúdo com as formatações (negrito, estilo, etc...)
    innerText = mostra o conteúdo sem as formatações

    ////////////////////////////////////////////////////////

    PARA SELECIONAR POR NAME

    document.getElementsByName("NOME DO NAME")
    
    Exemplo:
    HTML:
    <h1 name="nome"> Primeiro texto </h1>
    <h1 name="nome"> Segundo texto </h1>

    JS:
    document.getElementsByName("nome")      *Para pegar todas as tags com esse name
    ou
    document.getElementsByName("nome")[1]      *Para pegar uma tag específica pela ordem em que aparece

    var x = document.getElementsByName("h1")[1].innerHTML
    document.write(x)

    ////////////////////////////////////////////////////////////

    PARA SELECIONAR POR CLASSE

    document.getElementsByClassName("NOME DA CLASSE")
    
    Exemplo:
    HTML:
    <h1 class="classe"> Primeiro texto </h1>
    <h1 class="classe"> Segundo texto </h1>

    JS:
    document.getElementsByClassName("classe")      *Para pegar todas as tags com essa classe
    ou
    document.getElementsByClassName("classe")[1]      *Para pegar uma tag específica pela ordem em que aparece

    var x = document.getElementsByClassName("classe")[1].innerHTML
    document.write(x)

    ////

    Para modificar o conteúdo de todos os elementos com uma classe:

    HTML:
    <div class="CLASSE">Texto original 1</div>
    <div class="CLASSE">Texto original 2</div>
    <div class="CLASSE">Texto original 3</div>

    JS:
    let elemento = [...document.getElementsByClassName("CLASSE")]   //*transformou em array usando o operador spread
    elemento.map( x => {
        x.innerHTML = "Texto modificado"
    })

    ////

    Para modificar o conteúdo de um elemento específico com uma classe a partir de seu índice:

    HTML:
    <div class="CLASSE">Texto original 1</div>
    <div class="CLASSE">Texto original 2</div>
    <div class="CLASSE">Texto original 3</div>

    JS:
    document.getElementsByClassName("CLASSE")[0].innerHTML = "Texto modificado"

    //////

    Para adicionar uma classe a um elemento:

    CSS:
    .CLASSE2 {
        color: red;
    }

    HTML:
    <div class="CLASSE">Texto original 1</div>
    <div class="CLASSE">Texto original 2</div>
    <div class="CLASSE">Texto original 3</div>

    JS:
    document.getElementsByClassName("CLASSE")[0].classList.add("CLASSE2")

    Agora a primeira div possui as classes CLASSE e CLASSE2

    /////

    Para adicionar uma classe em todos os elementos com a mesma classe:

    CSS:
    .CLASSE2 {
        color: red;
    }

    HTML:
    <div class="CLASSE">Texto original 1</div>
    <div class="CLASSE">Texto original 2</div>
    <div class="CLASSE">Texto original 3</div>

    JS:
    let elemento = [...document.getElementsByClassName("CLASSE")]   //*transformou em array usando o operador spread
    elemento.map( x => {
        x.classList.add("CLASSE2")
    })

    /////

    Para remover uma classe de um elemento:

    CSS:
    .vermelho {
        color: red;
    }

    .amarelo {
        background-color: yellow;
    }

    HTML:
    <div id="texto" class="vermelho amarelo">Texto de exemplo</div>

    JS:
    document.querySelector("#texto").classList.remove("amarelo")

    /////

    Para remover uma classe de mais de um elemento:

    CSS:
    .vermelho {
        color: red;
    }

    .amarelo {
        background-color: yellow;
    }

    HTML:
    <div class="vermelho amarelo">Texto 1</div>
    <div class="vermelho amarelo">Texto 2</div>
    <div class="vermelho amarelo">Texto 3</div>

    JS:
    var TEXTO = [...document.querySelectorAll(".vermelho")]

    TEXTO.map( (ELEMENTO) => {
        ELEMENTO.classList.remove("amarelo")
    })

    /////

    Para trocar a classe de um elemento de acordo com sua posição:

    CSS:
    .vermelho {
        color: red;
    }

    .amarelo {
        background-color: yellow;
    }

    HTML:
    <div class="amarelo">Texto 1</div>
    <div class="amarelo">Texto 2</div>
    <div class="amarelo">Texto 3</div>

    JS:
    document.getElementsByClassName("amarelo")[0].className = "vermelho"

    Com isso, o primeiro elemento (Texto 1) teve sua classe trocada para vermelho.

    /////////////////////////////////////////////////////////////

////    PARA SELECIONAR POR SELETOR (TAG, CLASSE OU ID) COM QUERY SELECTOR

    document.querySelector("TAG")
    ou
    document.querySelector("TAG#ID")
    ou 
    document.querySelector("TAG.CLASSE")

    ///

    Exemplo com tags:

    HTML:
    <p>Texto</p>
    JS:
    document.querySelector("p")

    ///

    Exemplo com IDs:

    HTML:
    <div id="IDENTIDADE">Texto</div>
    JS:
    document.querySelector("div#IDENTIDADE")

    ///

    Exemplo com classes:

    HTML:
    <h1 class="CLASSE">Texto</h1>
    JS:
    document.querySelector("h1.CLASSE")

    ///

    Para especificar mais:

    HTML:
    <div>Texto 1</div>
    <div><p>Texto 2</p></div>
    <div>Texto 3</div>

    JS:
    document.querySelector("div > p").innerHTML = "Texto modificado"

    Com isso, apenas a <div> que contém dentro uma tag <p> teve o seu texto modificado.

    ///////

    Obs: A orderm da Tag e da Classe/Id pode ser trocada:
    document.querySelector("div.CLASSE")  =   document.querySelector(".CLASSE , div")

    Exemplo:

    <div class="CLASSE">Texto original</div>

    document.querySelector(".CLASSE , div").innerHTML = "Texto modificado"

    ////////////

////    QUERY SELECTOR x QUERY SELECTOR ALL
    VIDEO: https://www.youtube.com/watch?v=2V7rfcVg5UQ&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=34

    querySelector = Selecionar apenas o primeiro elemento que achar

    HTML:
    <div>Texto 1</div>
    <div>Texto 2</div>
    <div>Texto 3</div>

    JS:
    document.querySelector("div").innerHTML = "Texto modificado"

    Com isso, apenas a primeira tag <div> teve o seu texto trocado.

    O mesmo vale para classes:

    HTML:
    <div class="CLASSE">Texto 1</div>
    <div class="CLASSE">Texto 2</div>
    <div class="CLASSE">Texto 3</div>

    JS:
    document.querySelector(".CLASSE").innerHTML = "Texto modificado"

    Apenas a primeira <div> teve seu texto trocado

    ////////

    querySelectorAll = Selecionar todos os elementos que achar

    HTML:
    <div>Texto 1</div>
    <div>Texto 2</div>
    <div>Texto 3</div>

    JS:
    let array = [...document.querySelectorAll("div")]   //*transformou as divs em um array usando o operador spread

    array.map( x => {
        x.innerHTML = "Texto modificado"
    })
    
    Com isso, todas as tags <div> tiveram o seu texto trocado.

    ///////

    Para selecionar pelo tipo:

    <input type="radio" value="OPÇÃO 1">
    <label for="html">OPÇÃO 1</label><br>
    <input type="radio" value="OPÇÃO 2">
    <label for="html">OPÇÃO 2</label><br>
    <input type="radio" value="OPÇÃO 3">
    <label for="html">OPÇÃO 3</label><br>

    JS:
    document.querySelectorAll("input[type=radio]")

    //////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=wWnBB-mZIvY&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=15
    //////////////////////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////

    ALTERANDO A COR OU O TEXTO AO CLICAR

    HTML:
    <div id="ID" onclick="Função()">
        Antes de clicar
    </div>

    JS:
    function Função() {
        document.getElementById("ID").innerHTML = "Depois de clicar"
        document.getElementById("ID").style.background = "yellow"
    }

    ////////////////////////////////////////////////

    ALTERANDO A COR OU TEXTO AO PASSAR (ENTRAR) O MOUSE

    HTML:
    <div id="ID" onmouseenter="Função()">
        Botão
    </div>

    JS:
    function Função() {
        document.getElementById("ID").style.background = "red"
        document.getElementById("ID").innerHTML = "Entrou"
    }

    ///////////////////////////////////////////////

    ALTERANDO A COR OU TEXTO AO TIRAR (SAIR) O MOUSE

    HTML:
    <div id="ID" onmouseout="Função()">
        Botão
    </div>

    JS:
    function Função() {
        document.getElementById("ID").style.background = "blue"
        document.getElementById("ID").innerHTML = "Saiu"
    }

    ///////////////////////////////////////////////

    ALTERANDO A COR OU TEXTO AO MOVER O MOUSE

    HTML:
    <div id="ID" onmousemove="Função()">
        Botão
    </div>

    JS:
    function Função() {
        document.getElementById("ID").style.background = "blue"
        document.getElementById("ID").innerHTML = "Moveu"
    }

    ///////////////////////////////////////////////

    EVENTOS E LISTENERS (addEventListener)

    HTML:
    <div id="ID">
        Texto
    </div>

    JS:
    let VARIAVEL = document.getElementById("ID")
    VARIAVEL.addEventListener("click" , Função)

    function Função() {
        document.getElementById("ID").style.background = "purple"
    }


    VERSÃO RESUMIDA:
    document.getElementById("ID").addEventListener("click" , Função)

    function Função() {
        document.getElementById("ID").style.background = "purple"
    }


    TIPOS DE EVENTOS:
    click = onclick   (ao clicar o mouse)
    dblclick = ondblclick (ao fazer um clique duplo no mouse)
    mouseover = onmouseover  (ao passar o mouse por cima)
    mouseout = onmouseout  (ao tirar o mouse de cima)
    keypress = onkeypress (ao pressionar uma tecla do teclado)
    keydown = onkeydown (ao apertar a tecla e ela descer)
    keyup = onkeyup (ao apertar a tecla e ela subir)

    OBS: O "document.getElementById("ID")" pode ser substituído por "document.querySelector("div#ID")" ou "document.querySelector("#ID")"

    ////////

    addEventListener - CFB Cursos
    VIDEO: https://www.youtube.com/watch?v=4vCBmu3z5FY&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=36

////    Exemplo 1 (sem arrow function e sem variavel nova):

    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    function FUNÇÃO() {
        alert("Texto de exemplo")
    }

    document.getElementById("btn").addEventListener("click", FUNÇÃO)

    ////

////    Exemplo 2 (com arrow function e com variavel nova):

    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const FUNÇÃO = () => {               //*arrow function
        alert("Texto de exemplo")
    }

    const VARIAVEL = document.getElementById("btn")     //*nova variavel

    VARIAVEL.addEventListener("click", FUNÇÃO)

    ////

////    Exemplo 3 (com arrow function, com variavel nova e função anônima):

    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const VARIAVEL = document.getElementById("btn")

    VARIAVEL.addEventListener("click", () => {     //*Função anônima
        alert("Texto de exemplo")
    })

    ////

    Exemplo 4 (com arrow function, com variavel nova, função anônima e chamando uma função):

////    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const FUNÇÃO = () => {               
        alert("Texto de exemplo")
    }

    const VARIAVEL = document.getElementById("btn")

    VARIAVEL.addEventListener("click", () => {
        FUNÇÃO()                                     //*Chamando uma função
    })

    /////////////////

////    Para capturar os dados de quem disparou um evento:

    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const VARIAVEL = document.getElementById("btn")

    VARIAVEL.addEventListener("click", (evento) => {     
        console.log(evento.target)
    })

    Com isso, será impresso todos os dados do elemento que disparou o evento ao clicar (no caso o botão).
    Através disso é possível obter algumas informações do elemento, como por exemplo, o seu id:

////    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const VARIAVEL = document.getElementById("btn")

    VARIAVEL.addEventListener("click", (evento) => {     
        console.log(evento.target.id)
    })

    Ao clicar no botão, será mostrado o seu id:
    >>> btn

    ////

////    Obtendo o conteúdo de texto de um elemento: 

    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const VARIAVEL = document.getElementById("btn")

    VARIAVEL.addEventListener("click", (evento) => {     
        console.log(evento.target.innerHTML)
    })

    Ao clicar no botão, será mostrado o seu conteúdo:
    >>> BOTÃO

    ////

////    Adicionando uma classe a um elemento após obter seus dados:

    CSS: 
    .cor {
        color: red;
    }

    HTML:
    <button id="btn">BOTÃO</button>

    JS:
    const VARIAVEL = document.getElementById("btn")

    VARIAVEL.addEventListener("click", (evento) => {     
        evento.target.classList.add("cor")
    })

    Com isso, foi adicionada a classe "cor" ao botão.

    ////

////    Adicionando uma classe a todos os elemento com uma mesma classe:
    CSS: 
    .cor {
        color: red;
    }

    HTML:
    <button class="btn">BOTÃO 1</button>
    <button class="btn">BOTÃO 2</button>
    <button class="btn">BOTÃO 3</button>

    JS:
    const VARIAVEL = [...document.querySelectorAll(".btn")]

    VARIAVEL.map( (ELEMENTO) => {
        ELEMENTO.addEventListener("click", (EVENTO) => {     
            EVENTO.target.classList.add("cor")
        })
    })

    //////

////    Para selecionar e movimentar elementos de um lugar para outro:
    VIDEO: https://www.youtube.com/watch?v=aanyXzOaic8&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=36
    VIDEO: https://www.youtube.com/watch?v=94KKNdx42lM&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=37

    CSS:
    .selecionado {
        color: white;
        background-color: red;
        font-weight: bold;
    }

    HTML:
    <div id="caixa1" style="border: 1px solid red">
        <button id="btn1" class="btn">BOTÃO 1</button>
        <button id="btn2" class="btn">BOTÃO 2</button>
        <button id="btn3" class="btn">BOTÃO 3</button>
    </div>
    <br>
    <button id="btn_copiar">COPIAR</button>
    <br><br>
    <div id="caixa2" style="border: 1px solid blue">
    </div>
    
    JS:
    const CAIXA1 = document.getElementById("caixa1")
    const CAIXA2 = document.getElementById("caixa2")
    const COPIAR = document.getElementById("btn_copiar")
    const BOTÕES = [...document.querySelectorAll(".btn")]

    BOTÕES.map( (ELEMENTO) => {
        ELEMENTO.addEventListener("click" , (EVENTO) => {
            EVENTO.target.classList.toggle("selecionado")
        })
    })

    COPIAR.addEventListener("click" , () => {
        const SELECIONADOS = [...document.querySelectorAll(".selecionado")]
        const NÃO_SELECIONADOS = [...document.querySelectorAll(".btn:not(.selecionado)")]
        SELECIONADOS.map ( (ELEMENTO) => {
            CAIXA2.appendChild(ELEMENTO)
        })
        NÃO_SELECIONADOS.map ( (ELEMENTO) => {
            CAIXA1.appendChild(ELEMENTO)
        })
    })

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
        
////    PARA INTERROMPER OU PARAR A PROPAGAÇÃO DE UM EVENTO
    VIDEO: https://www.youtube.com/watch?v=7NcRhRN4MAw&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=38

    -Para interromper um evento de ocorrer em 1 elemento:
        
    <div id="caixa">
        <button id="btn1">BOTÃO 1</button>
        <button id="btn2">BOTÃO 2</button>
        <button id="btn3">BOTÃO 3</button>
    </div>

    JS:
    const CAIXA = document.getElementById("caixa")
    const BTN1 = document.getElementById("btn1")

    CAIXA.addEventListener( "click" , () => {
        alert("CLICOU")
    })

    BTN1.addEventListener( "click" , (EVENTO) => {
        EVENTO.stopPropagation()
    })

    Com isso, o evento não ocorre no Botão 1.

    ////

    -Para interromper um evento de ocorrer em todos os elementos:
        
    <div id="caixa">
        <button class="btn">BOTÃO 1</button>
        <button class="btn">BOTÃO 2</button>
        <button class="btn">BOTÃO 3</button>
    </div>

    JS:
    const CAIXA = document.getElementById("caixa")
    const BOTOES = [...document.querySelector(".btn")]

    CAIXA.addEventListener( "click" , () => {
        alert("CLICOU")
    })

    BOTOES.map( (ELEMENTO) => {
        ELEMENTO.addEventListener( "click" , (EVENTO) => {
            EVENTO.stopPropagation()
        })
    })

    Com isso, o evento não ocorre em todos os botões.               

    ///////////////////////////////////////////////

////    PARA PEGAR OS DADOS DIGITADOS EM UM FORMULÁRIO (input, select, radio, etc...)
    IMPRIMIR O TEXTO QUE FOI DIGITADO

    HTML:
    <input type="text" id="ID" />
    <input type="button" onclick="Função()" value="CLIQUE AQUI" />
    <div id="resultado"></div>

    JS:   
    function Função() {
           var x = document.getElementById("ID").value
           document.getElementById("resultado").innerHTML = x
    }

    //////////////////////////////////////////////

    PARA PEGAR OS DADOS DIGITADOS EM UM FORMULÁRIO (input, select, radio, etc...)
    REALIZAR A SOMA ENTRE DOIS NÚMEROS

    FORMA 1: 

    HTML:
    <input type="number" id="ID1" />
    <input type="number" id="ID2" />
    <input type="button" onclick="Função()" value="CLIQUE AQUI" />
    <div id="resultado"></div>

    JS:

    function Função() {
           var x = document.getElementById("ID1").value
           var y = document.getElementById("ID2").value
           var n1 = Number(x)
           var n2 = Number(y)
           document.getElementById("resultado").innerHTML = n1 + n2
    }

    /////////////////

    FORMA 2 (resumida):

    HTML:
    <input type="number" id="ID1" />
    <input type="number" id="ID2" />
    <input type="button" onclick="Função()" value="CLIQUE AQUI" />
    <div id="resultado"></div>

    JS:   
    function Função() {
           var x = Number(document.getElementById("ID1").value)
           var y = Number(document.getElementById("ID2").value)
           document.getElementById("resultado").innerHTML = x + y
    }


    //////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO 1: https://www.youtube.com/watch?v=cOdG4eACN2A&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=18
    VIDEO 2: https://www.youtube.com/watch?v=EEStcIe8rAM&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=19
        ////////////////////////////////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////////////////////////////////

        CONDIÇAO SIMPLES:

         if (condição) {
            instrução 
        }

        ///////////////////////////

        CONDIÇÃO COMPOSTA:

        if (condição) {
            instrução 1 (caso a condição seja verdadeira)
        }
        else {
            instrução 2 (caso a condição seja falsa)
        }

        ///////////////////////////

        CONDIÇÕES ANINHADAs:

        if (condição 1) {
            instrução 1 (caso a condição 1 seja verdadeira)
        }
        else {
            if (condição 2) {
                instrução 2 (caso a condição 1 seja falsa e a condição 2 seja verdadeira)
            }
            else {
                instrução 3 (caso as condições 1 e 2 sejam falsas)
            }


        /////////////////////////////

        ELSE IF

        if (condição 1) {
            instrução 1 (caso a condição 1 seja verdadeira)
        }
        else if (condição 2) {
            instrução 2 (caso a condição 1 seja falsa)
        }
        else {
            instrução 3 (caso as condiçãos 1 e 2 sejam falsas)
        }

        ///////////////////////////////////////////////////////////////////////

////        PARA PEGAR HORA E DATA DO SISTEMA
        VIDEO: https://www.youtube.com/watch?v=KHq_RO_8Qb0

        //////////////////////////////

        PARA PEGAR A HORA DO SISTEMA:

        new Date().getHours()

        Exemplo:
        document.getElementById("ID").innerHTML = new Date().getHours()

        Obs: É necessário tratar caso queira que tenha um zero na casa das dezenas:

        const data = new Date()

        let hora = data.getHours() < 10 ? "0" + data.getHours() : data.getHours()

        //////////////////////////////

        PARA PEGAR OS MINUTOS DO SISTEMA

        new Date().getMinutes()

        Obs: É necessário tratar caso queira que tenha um zero na casa das dezenas:

        const data = new Date()

        let minutos = data.getMinutes() < 10 ? "0" + data.getMinutes() : data.getMinutes()

        /////////////////////////////

        PARA PEGAR OS SEGUNDOS DO SISTEMA
        VIDEO: https://www.youtube.com/watch?v=32yZvWcA1pI

        new Date().getSeconds()

        Obs: É necessário tratar caso queira que tenha um zero na casa das dezenas:

        const data = new Date()

        let segundos = data.getSeconds() < 10 ? "0" + data.getSeconds() : data.getSeconds()

        /////////////////////////////

        PARA OBTER HORA, MINUTOS E SEGUNDOS ATUAIS (AO VIVO):

        HTML:
        <div id="hora_atual"></div>

        JS:
        setInterval( () => {
            const data = new Date()
            let hora = data.getHours() < 10 ? "0" + data.getHours() : data.getHours()
            let minutos = data.getMinutes() < 10 ? "0" + data.getMinutes() : data.getMinutes()
            let segundos = data.getSeconds() < 10 ? "0" + data.getSeconds() : data.getSeconds()
            document.querySelector("#hora_atual").innerHTML = hora + ":" + minutos + ":" + segundos
        }, 1000) 

        ////////////////////////////

        PARA OBTER A HORA, MINUTO E SEGUNDO SEM PRECISAR TRATAR:

        const data = new Date()

        console.log(data.toLocaleTimeString())
        >>> 20:53:10

        ////////////////////////////

        PARA OBTER A HORA COMPLETA AO VIVO SEM PRECISAR TRATAR:

        HTML:
        <div id="hora_atual"></div>

        JS:
        setInterval( () => {
            const data = new Date()
            let horacompleta = data.toLocaleTimeString()
            document.querySelector("#hora_atual").innerHTML = horacompleta
        }, 1000) 

        ////////////////////////////

        PARA PEGAR O DIA DA SEMANA

        new Date().getDay()

        0 = Domingo
        1 = Segunda-feira
        2 = Terça-feira
        3 = Quarta-feira
        4 = Quinta-feira
        5 = Sexta-feira
        6 = Sábado

        Obs: Se necessário, é preciso tratar essa informação recebida com um if ou um switch.

        /////////////////////////////

        PARA PEGAR O DIA DO MÊS

        new Date().getDate()

        /////////////////////////////

        PARA PEGAR O MÊS

        new Date().getMonth()

        0 = Janeiro
        1 = Fevereiro
        2 = Março
        3 = Abril
        4 = Maio
        5 = Junho
        6 = Julho
        7 = Agosto
        8 = Setembro
        9 = Outubro
        10 = Novembro
        11 = Dezembro

        Obs: É necessário tratar a informação recebida adicionando + 1

        ////////////////////////////

        PARA PEGAR O ANO

        new Date().getFullYear()

        OBS: Ano completo. Exemplo: 2023

        ///////////////////////////

        PARA OBTER A DATA COMPLETA:

        const data = new Date()

        const datacompleta = data.getDate() + "/" + data.getMonth() + "/" + data.getFullYear()

        console.log(datacompleta)
        >>> 3/10/2023

        Obs: O dia veio sem o zero na casa da dezena e o mês veio 1 mês atrasado.
        Portanto é preciso tratar esses casos:

        PARA TRATAR A DATA COMPLETA:
        VIDEO: https://www.youtube.com/watch?v=KHq_RO_8Qb0

        const data = new Date()
        let dia = data.getDate() < 10 ? "0" + data.getDate() : data.getDate()
        let mes = data.getMonth() < 10 ? "0" + parseFloat(data.getMonth()) + 1 : data.getMonth() + 1

        let datacompleta = dia + "/" + mes + "/" + data.getFullYear()

        console.log(datacompleta)
        >>> 03/11/2023

        ///////////////////////////

        PARA OBTER A DATA COMPLETA SEM PRECISAR TRATAR:

        const data = new Date()

        console.log(data.toLocaleDateString())
        >>> 23/11/2023

        ///////////////////////////

        Outra forma de obter a data e hora completa:

        const data = new Date()

        console.log(data)
        >>> Thu Nov 23 2023 18:41:29 GMT-0300 (Horário Padrão de Brasília)

        ///////////

        Para obter somente a data em string:

        const data = new Date().toDateString()

        console.log(data)
        >>> Thu Nov 23 2023

        ///////////

        Para obter quantos milisegundos se passaram desde 1 de janeiro de 1970 (Timestamp):

        const data = Date.now()
        ou
        const data = new Date().getTime()

        console.log(data)
        >>> 1700779507551

        /////////////////////////////////////////////////////////////////////

        SWITCH

        var VARIAVEL = VALOR ?

        switch (VARIAVEL) {
            case (VALOR 1):     
                instrução 1
                break

            case (VALOR 2):
                instrução 2
                break

            case (VALOR 3):
                instrução 3
                break

            default:
                instrução 4
                break 
        }

        OBS: Os parenteses após case são opcionais. 
        OBS: Os parenteses após switch são obrigatórios.
        OBS: O último break em default é opcional.

        ////

        Colocando mais de um 1 case:

        let colocação = 5

        switch (colocação) {
            case (1):     
                console.log("Primeiro lugar - Medalha de ouro")
                break

            case (2):
                console.log("Segundo lugar - Medalha de prata")
                break

            case (3):
                console.log("Terceiro lugar - Medalha de bronze")
                break

            case (4): case (5): case (6):
                console.log("Prêmio de participação")
                break

            default:
                console.log("Não subiu ao pódio")
                break 
        }

    /////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////
VIDEO: https://www.youtube.com/watch?v=b2K7eo5Jdj8&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=19

    /////////////////////////////////////////////////////////////

    PARA FAZER O SIMBOLO DE COPYRIGHT

    &copy;

    Exemplo:
    <p>&copy; Curso em video</p> 

    //////////////////////////////////////////////////////////

    PARA CARREGAR UMA FUNÇÃO NO JAVASCRIPT AO INICIAR A PÁGINA HTML

    onload="Função()"

    Exemplo:
    HTML:
    <body onload="Função()">
        .....
    < /body>

    JS:
        function Função() {
            .......
        } 
    
    ///////////////////////////////////////////////////////////

    IMPORTANDO UMA IMAGEM NO JAVASCRIPT
    
    HTML:
    <img src="NomeDoArquivo1.png" alt="Texto alternativo" id="ID" />

    JS:
    var imagem = documento.getElementById("ID")

    imagem.src = "NomeDoArquivo2.png"

    //////////////////////////////////////////////////////////

    PARA ALTERAR A COR DE FUNDO DO BODY

    document.body.style.background = "#ffffff"

    /////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////
VIDEO: https://www.youtube.com/watch?v=f5es-PpaUI8&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=22
    ///////////////////////////////////////////////////////////////////////////////////////

    PARA ALINHAR O TEXTO (CENTER, RIGHT, LEFT, JUSTIFY)

    HTML:
    <div id="ID">
        Texto de exemplo
    </div>

    JAVASCRIPT:
    document.getElementById("ID").style.textAlign = "center"
    ou
    document.querySelector("div#ID").style.textAlign = "center"

    /////////////////////////////////////////////////////////////////

    PEGAR UM ATRIBUTO DE UM ELEMENTO:

    HTML:
    <div id="txt_id" class="txt_class" name="txt_name">TEXTO DE EXEMPLO</div>

    JS:
    const classe = document.getElementById("txt_id").getAttribute("class")
    console.log(classe)

    >>> txt_class

    OU: 

    const nome = document.getElementById("txt_id").className
    console.log(nome)

    -------

    const identity = document.getElementById("txt_id").getAttribute("id")
    console.log(identity)

    >>> txt_id

    OU:

    const identity = document.getElementById("txt_id").id
    console.log(identity)

    -------

    const nome = document.getElementById("txt_id").getAttribute("name")
    console.log(nome)

    >>> txt_name

    -------

    const texto = document.getElementById("txt_id").innerText
    console.log(texto)

    >>> TEXTO DE EXEMPLO

    -------


    ////////////////////////////////////////////////////////////////

    CRIAR UMA TAG DINAMICAMENTE NO JAVASCRIPT COM CREATEELEMENT

    -Para criar um elemento e dar um atributo para ele:

    var VARIAVEL = document.createElement("img")  *criou a tag <img>
    VARIAVEL.setAttribute("id" , "imagem")   *adicionou o id "imagem" na tag <img>

    Com isso foi criado no Javascript uma tag <img> com id = imagem:
    <img id="imagem" />

    ////

    -Para criar um elemento dentro de outro elemento:
    VIDEO: https://www.youtube.com/watch?v=KzXZMemQ_Lc&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=41

    CSS:
    p {
        background-color: yellow;
        width: 100px;
        height: 100px;
    }

    div {
        background-color: blue;
        width: 150px;
        height: 150px;
    }

    HTML:
    <div id="pai"></div>

    JS:
    var novatag = document.createElement("p")
    document.getElementById("pai").appendChild(novatag)

    ///////

    -Para criar elementos com base em um array:

    HTML:
    <div id="pai"></div>
    
    JS:
    const paises = ["Brasil", "EUA", "Japão", "França"]

    paises.map ( (elemento , posição) => {
        const novatag = document.createElement("p")
        novatag.setAttribute("id", "filho" + posição)
        novatag.innerHTML = elemento
        document.getElementById("pai").appendChild(novatag)
    })

    Com isso, a div pai passou a ter os seguintes filhos:
    <div id="pai">
        <p id="filho0">Brasil</p>
        <p id="filho1">USA</p>
        <p id="filho2">Japão</p>
        <p id="filho3">França</p>
    </div>

    ///////////////////////////////////////////////////////////////

    PARA ADICIONAR UM ATRIBUTO A UMA TAG

    HTML:
    <div></div>

    JAVASCRIPT:
    document.querySelector("div").setAttribute("id", "NomeDoID")

    Então a tag ficou assim:
    <div id="NomeDoID"></div>

    ////////////////////////////////////////////////////////////////

    PARA ADICIONAR UM ELEMENTO DA TAG FILHO NO FINAL DA TAG PAI COM APPENDCHILD

    var filho = elemento.appendChild(filho);

    - elemento é o elemento pai.
    - filho é o nó a ser adicionado como filho de elemento. Também é devolvido.

    Exemplo :

    HTML:
    <div id="ID">
    </div>

    JAVASCRIPT:
    var VARIAVEL = document.createElement("p");  *criou a tag <p>
    VARIAVEL.innerHTML = "Texto de exemplo";   *inseriu o conteúdo na tag <p>

    document.getElementById("ID").appendChild(VARIAVEL);   *adicionou o conteúdo da tag <p> na tag <div>

    -Caso queira adicionar uma imagem:

    var VARIAVEL = document.createElement("img");  *criou a tag <img>
    VARIAVEL.src = "NomeDaImagem.png";   *inseriu a url ou caminho de diretório da imagem na tag <img>

    document.getElementById("ID").appendChild(VARIAVEL);   *adicionou o conteúdo da tag <img> na tag <div>

    -Caso queira remover o conteúdo:

    document.getElementById("ID").removeChild(VARIAVEL);   *removeu o conteúdo da tag filha na tag pai

    /////////////////////

    PARA MOVER UM ELEMENTO PARA UM ELEMENTO PAI COM APPENDCHILD
    
    HTML:
    <div id="pai">
        <div id="filho1">Texto do filho 1</div>
    </div>

    <div id="filho2">Texto do filho 2</div>

    JS:
    var pai = document.querySelector("#pai")
    var filho2 = document.querySelector("#filho2")

    pai.appendChild(filho2)

    Com isso, a div filho2 foi movida para dentro da div pai.

    /////////////////////

    PARA REMOVER UM ELEMENTO FILHO DE UMA TAG PAI COM REMOVECHILD
    VIDEO: https://www.youtube.com/watch?v=Rx1AbTkK-kc&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=43

    HTML:
    <div id="pai">
        <div id="filho1">Texto do filho 1</div>
        <div id="filho2">Texto do filho 2</div>
        <div id="filho3">Texto do filho 3</div>
    </div>

    JS:
    var filho = document.querySelector("#filho2")

    document.getElementById("pai").removeChild(filho)

    //////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=5rZqYPKIwkY&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=23

    ////////////////////////////////////////////////////////////////

    LAÇO DE REPETIÇÃO WHILE
    Estrura de repetição com teste lógico NO INÍCIO

    while (condição) {
        instrução (será realizada se a condição for verdadeira)
    }

    Exemplo:

    var x = 1;

    while (x < 5) {
        document.write("Texto de exemplo <br>");
        x += 1;
    }

    //////////////////////////////////////////////////////////////////

    LAÇO DE REPETIÇÃO DO-WHILE
    Estrura de repetição com teste lógico NO FINAL

    do {
        instrução;
    }
    while (condição);

    Exemplo:

    var x = 1;

    do {
        document.write("Texto de exemplo <br>");
        x += 1;
    }
    while (x < 5);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
VIDEO: https://www.youtube.com/watch?v=eX-lkN_Zahc&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=24

    /////////////////////////////////////////////////////////////////////////////////////////////////

    LAÇO DE REPETIÇÃO FOR
    Estrutura de repetição com variável de controle

    for (início ; condição ; incremento){
        instrução (será realizada caso a condição seja verdadeira);
    }

    Exemplo:

    for (var x = 1 ; x < 5 ; x += 1) {
        document.write("Texto de exemplo <br>")
    }

    /////////////////////////////////////////////////////////////////////////////////////////////

    MODO DE DEPURAÇÃO

    mais ou menos 16 minutos do video

     ////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
VIDEO: https://www.youtube.com/watch?v=oMNbc_LFz8w&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=26

    ////////////////////////////////////////////////////////////////////////

    PARA INSERIR EMOJIS

    Pegar o código (code) do emoji no site do unicode.org:
    https://unicode.org/emoji/charts/full-emoji-list.html

    Para inserir o emoji:
    \u{Code}

    Exemplo:
    Code do emoji de carinha sorrido: U+1F600

    document.write("\u{1F600}")

    Obs: Talvez só funcione entre crases?

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////    
VIDEO: https://www.youtube.com/watch?v=XdkW62tkAgU&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=30
    //////////////////////////////////////////////////////////////

////    Variável simples:
    var x = 5

    Variável composta (array / vetor):
    var x = [1, 2, 3, 4, 5]

    ////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UM ARRAY / VETOR UNIDIMENSIONAL

    var lista = [1, 2, 3, 4, 5]
    ou
    var lista = Array(1, 2, 3, 4, 5)

    document.write(lista[0])
    >>> 1

    ////////////////////////////////////////////////////////////////////////////////////////////////

    PARA CRIAR UM ARRAY COM FUNÇÕES:
    VIDEO: https://www.youtube.com/watch?v=IzADtpBafSQ

    let Função = [
        () => {
            var x = 7;
            var y = 9;
            return x + y
        },
        () => {
            var x = 7;
            var y = 9;
            return x * y
        },
    ]
    
    console.log(Função[0]())    //*retorna o resultado da função na posição 0 (x + y), dando o total de 16
    console.log(Função[1]())    //*retorna o resultado da função na posição 1 (x * y), dando o total de 63

    /////

    Para criar um Array com funções possuindo parâmetros:

    let Função = [
        (x , y) => {
            return x + y
        },
        (x , y) => {
            return x * y
        },
    ]
    
    console.log(Função[0](6 , 3))    //*retorna o resultado da função na posição 0 (x + y), dando o total de 9 (soma de 6 + 3)


    ////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UM ARRAY / VETOR ASSOCIATIVO (par chave=>valor):

    var Array = {
        Fruta :"Morango",
        Legume : "Cenoura",
        Verdura : "Alface"
    };

    document.write(Array.Fruta)
    >>> Morango

    -Para saber o número de elementos (pares chave=>valor):

    document.write(Object.keys(Array).length)
    >>> 3

    /////////

    -Para chaves que possuam mais de 1 valor, é preciso usar a posição no array:

    let sudeste = { 
        estado : ["RJ","SP","MG","ES"], 
        cidade : ["Rio de Janeiro", "São Paulo", "Belo Horizonte", "Vitória"] 
    };

    document.write(sudeste.estado[1]);
    >>> SP

    ////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UM DICIONÁRIO

    var dicionario = [{ A0: "a0" , B0: "b0" , C0: "c0"}] ;
    for (const x of dicionario) {
        document.write(x["A0 ou B0 ou C0"] + "<br>");
    }

    ////////

    É preciso usar for/of e não for/in ao utilizar dicionários.
    Os dicionários precisam abrir e fechar com colchetes [ ].
    Os pares são separados por virgulas.
    O nome e o valor são separados por dois pontos (:)
    Se o valor for uma string de texto, precisa estar entre aspas.
    x[" "] = o nome dentro dos colchetes precisa estar entre aspas.

    Os itens de cada posição do dicionário ficam entre chaves { }.
    Caso tenha mais de uma posição:
    var dicionario = [{ A0: "a0" , B0: "b0"} , {A1: "a1" , B1: "b1}] ;

    No caso A0 e B0 estão na posição 0 do dicionário e A1 e B1 estão na posição 1.

    /////////

    Exemplo com apenas 1 valor: 

    let comida = [{ 
        fruta : "manga" , 
        doce : "pudim" , 
        salgado : "queijo"
    }] ;

    for (const x of comida) {
        document.write(x["doce"]);
    }
    >>> pudim

    //////////

    Exemplo com mais de 1 valor:

    let comida = [{ 
        fruta : ["manga","maçã","uva"] , 
        doce : ["pudim","bolo","sonho"] , 
        salgado : ["queijo","presunto","coxinha"]
    }] ;

    for (const x of comida) {
        document.write(x["doce"]);
    }
    >>> pudim,bolo,sonho

    /////////////////

    Outros exemplos:

    let pessoas = [
        { idade: 25, nome: "Ana" } , 
        { idade: 43, nome: "Carlos" }
    ];

    for (const x of pessoas) {
        document.write(x["nome"] + "<br>");
    }
    >>> Ana
    >>> Carlos

    //////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA CRIAR UMA MATRIZ (ARRAY MULTIDIMENSIONAL)

    -Array bidimensional:
    var Matriz = [
        ["A" , 1 ],
        ["B" , 2 ],
        ["C" , 3 ]
    ];

    ou

    var Matriz = Array(
        Array("A" , 1 ),
        Array("B" , 2 ),
        Array("C" , 3 )
    );


    Para mostrar o array Matriz no console, use o método console.table() da seguinte forma:
    console.table(Matriz)

    ////////

    Caso queira imprimir:

    document.write(Matriz)
    >>> A,1,B,2,C,3

    ////////

    Caso queira imprimir um item específico:

    document.write(Matriz[0])
    >>> A,1

    ou

    document.write(Matriz[0][0])
    >>> A

    ////////

    Para incluir ou adicionar itens:

    push(): Adiciona no final.

    var Matriz = [
        ["A" , 1 ],
        ["B" , 2 ],
        ["C" , 3 ]
    ];

    Matriz.push(["D", 4])
    document.write(Matriz[3][0])
    >>> D

    ////

    splice(): Adiciona em qualquer posição.

    var Matriz = [
        ["A" , 1 ],
        ["B" , 2 ],
        ["C" , 3 ]
    ];

    Matriz.splice( 1 , 0 , ["D", 4])   *Foi adicionado na posição 1 da matriz
    document.write(Matriz[1][0])
    >>> D

    ////////////////////////

    -Para remover um elemento de um array:

    .pop(): Remove no final.

    Matriz.pop()

    //////

    .splice(): Remove em qualquer posição

    Matriz.splice( 1 , 1 )   *Removeu 1 array da posição 1 da matriz

    //////////////////

    -Array tridimensional:

    var matriz = [
        ["a","b","c"],
        [ 1 , 2 , 3],
        ["d","4", 5]
    ];

    ou

    var matriz = Array(
        Array("a","b","c"),
        Array( 1 , 2 , 3),
        Array("d","4", 5)
    );

    ////////////

    Exemplo 1:

    let pessoas = [
        ['Jack', 24, "homem"], 
        ['Sara', 23, "mulher"], 
        ['Peter', 24, "homem"]
    ];

    document.write(pessoas[1][0])
    >>> Sara

    document.write(pessoas[1][1])
    >>> 23

    document.write(pessoas[1][2])
    >>> mulher


    /////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA ADICIONAR ELEMENTOS EM UM ARRAY / VETOR PELA POSIÇÃO (ÍNDICE)

    var lista = [1, 2, 3] 

    lista[3] = 4

    Foi adicionado o número 4 na posição (índice) 3 do array x

    document.write(lista)
    >>> 1,2,3,4

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA ADICIONAR ELEMENTOS NO FINAL DE UM ARRAY / VETOR NO FINAL USANDO PUSH

    var lista = [1, 2, 3]

    lista.push(4)

    document.write(lista)
    >>> 1,2,3,4

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA INCLUIR, EXCLUIR OU SUBSTITUIR ELEMENTOS DE UM ARRAY / VETOR USANDO SPLICE

    var lista = ["item 0", "item 1", "item 2"]

    -Para incluir apenas 1 elemento:
    var x = lista.splice (posição , 0 , "item 3");

    -Para incluir mais de 1 elemento:
    lista.splice(posição , 0 , "item 3" , "item 4 , "item 5");

    posição = Local em que os novos elementos serão incluídos.
    0 = Quantidade de elementos que serão excluídos

    Exemplo:

    var alunos = ['Alex', 'Anna', 'João'];
    alunos.splice(3,0,'Helena');
    document.write(alunos); 
    >>>  Alex,Anna,João,Helena

    //////////////

    PARA SUBSTITUIR UM DOS ELEMENTOS USANDO SPLICE

    var alunos = ['Alex', 'Anna', 'João'];
    alunos.splice(1,1,'Helena');
    document.write(alunos); 
    >>> Alex,Helena,João

    //////////////

    -É possível substituir um item de uma lista informando a sua posição.
    -Caso seja informada a posição em uma lista, o item será substituído pelo novo item informado:

    var alunos = ['Alex', 'Anna', 'João'];
    
    alunos[1] = 'Maria';

    document.write(alunos);
    >>> Alex,Maria,João

    ///////////////////

    PARA EXCLUIR UM ELEMENTO USANDO SPLICE
    (Não tem no video)

    var primos = [2,3,5,7,11,13,17];
    primos.splice(2,2);
    document.write(primos); 
    >>> 2,3,11,13,17

    Nesse método, para fins de remoção, o primeiro parâmetro indica o índice e o segundo, 
    a quantidade de elementos a serem excluídos.

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA REMOVER UM ELEMENTO DE UM ARRAY / VETOR USANDO DELETE
    (Não tem no video)

    frutas = ["Manga" , "Caqui" , "Abacaxi"];

    delete frutas[0];

    document.write(frutas);
    >>> ,Caqui,Abacaxi

    Obs: Embora o valor seja excluído do array, este não é “reorganizado”, permanecendo com o mesmo tamanho.

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
////        PARA REMOVER UM ELEMENTO DO FINAL DE UM ARRAY / VETOR USANDO POP
    (Não tem no video)

    var frutas = ["Manga" , "Caqui" , "Abacaxi"];

    frutas.pop();   *Remove 1 item por vez

    document.write(frutas);
    >>> Manga, Caqui

    //////////

    -Para guardar os itens removidos em uma variável:

    var frutas = ["Manga" , "Caqui" , "Abacaxi"];

    x = frutas.pop();

    document.write(x);
    >>> Abacaxi

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA REMOVER UM ELEMENTO DO INICIO DE UM ARRAY / VETOR USANDO SHIFT
    (Não tem no video)

    var frutas = ["Manga" , "Caqui" , "Abacaxi"];

    frutas.shift();   *Remove 1 item por vez

    document.write(frutas);

    >>> Caqui, Abacaxi

    Obs: Após a remoção, este é reindexado (ou seja, o elemento de índice 1 passa a ser o de índice 0 e assim sucessivamente). 
    Além disso, o tamanho do array também é atualizado.

    ///////////

    Caso queira guardar os itens removidos em uma variável:

    var frutas = ["Manga" , "Caqui" , "Abacaxi"];

    x = frutas.shift();

    document.write(x);
    >>> Manga

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA ADICIONAR ELEMENTOS NO INICIO DE UM ARRAY / VETOR USANDO UNSHIFT

    Para acrescentar somente 1 elemento:
    lista.unshift("Item");

    Ou para adicionar mais de 1 elemento:
    lista.unshift("Item 1" , "Item 2" , "Item 3");

    //////////

    Exemplo 1:

    var frutas = ["Manga" , "Caqui" , "Abacaxi"];

    frutas.unshift("Limão");

    document.write(frutas);
    >>> Limão,Manga,Caqui,Abacaxi

    //////////

    Exemplo 2:

    var frutas = ["Manga" , "Caqui" , "Abacaxi"];

    frutas.unshift("Limão" , "Uva");

    document.write(frutas);
    >>> Limão,Uva,Manga,Caqui,Abacaxi

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA REALIZAR OPERAÇÕES COM CADA ELEMENTO DE UM ARRAY / VETOR USANDO MAP
    (Não tem no video)

    Sintaxe (map com apenas 1 operação):
    Array.map ( (elemento) => operação com o elemento )

    Sintaxe (map com mais de uma operação):
    Array.map ( (elemento) => {
        operação 1 com o elemento 
        operação 2 com o elemento 
        return ...
    })


    Exemplo 1:

    const numeros = [20, 40, 10, 4];
    const mult = numeros.map ( (x) => x * 5 );
    document.write(mult);
    >>> 100,200,50,20

    (x) => x * 5    (Significa: Para cada x que encontrar, multiplique ele por 5)

    //////////

    Exemplo 2:

    const numeros = [20, 40, 10, 4];

    const soma = numeros.map ( (x) => x + 3 );

    document.write(soma);
    >>> 23,43,13,7

    Obs: Como só tem apenas 1 parâmetro, é possível remover os parenteses em volta do x:
    const soma = numeros.map ( x => x + 3 );

    Aqui é utilizado uma arrow function (função lambda)

    ///////////

    Exemplo 3:

    const numeros = [20, 40, 10, 4];
    const dobro = numeros.map ( (x) => {
        let m = x * 2 
        document.write(m + "<br>")
        return m
     });
    
    document.write("O dobro dos números é igual a " + dobro)

    >>> 40
    >>> 80
    >>> 20
    >>> 8
    >>> O dobro dos números é igual a 40,80,20,8

    ////////////////////////////

////    PARA VARRER UM ARRAY / VETOR USANDO O MAP
    VIDEO: https://www.youtube.com/watch?v=0M2ba5A6DHY&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=29

    Exemplo 1 (Map com índice):
    
    const cursos = ["HTML", "CSS", "PHP" , "JAVASCRIPT", "PYTHON"]

    cursos.map( (elemento , indice) => {
        console.log("Curso: " + elemento + " - Posição no array: " + indice)
    })

    >>> "Curso: HTML - Posição do curso: 0"
    >>> "Curso: CSS - Posição do curso: 1"
    >>> "Curso: PHP - Posição do curso: 2"
    >>> "Curso: JAVASCRIPT - Posição do curso: 3"
    >>> "Curso: PYTHON - Posição do curso: 4"

    /////

    Exemplo 2 (imprimindo cada elemento do array):

    const cursos = ["HTML", "CSS", "PHP" , "JAVASCRIPT", "PYTHON"]

    let x = cursos.map ( (elemento) => {
        return elemento
    })

    console.log(x)
    >>> ["HTML", "CSS", "PHP", "JAVASCRIPT", "PYTHON"]

    /////

    Exemplo 3 (modificando o conteúdo de uma tag):

    HTML:
    <div>Texto original 1</div>
    <div>Texto original 2</div>
    <div>Texto original 3</div>

    JS:
    let elemento = document.getElementsByTagName("div")
    elemento = [...elemento]
    elemento.map( x => {
        x.innerHTML = "Texto modificado"
    })

    Obs: Poderia simplificar fazendo:
    let elemento = [...document.getElementsByTagName("div")]
    elemento.map( x => {
        x.innerHTML = "Texto modificado"
    })

    /////

    Exemplo 4 (convertendo strings em números inteiros):

    let converter = x => parseInt(x)
    let numeros = [ "1" , "2" , "3" , "4" , "5"].map(converter)

    console.log(numeros)
    >>> [1, 2, 3, 4, 5]

    ou

    let numeros = [ "1" , "2" , "3" , "4" , "5"]
    numeros.map(x => {
      console.log(parseInt(x))
    })
    >>> 1
    >>> 2
    >>> 3
    >>> 4
    >>> 5

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UMA COLEÇÃO / ARRAY MAP
    VIDEO: https://www.youtube.com/watch?v=y9Tz0bjXBXs

    Para adicionar pares de chave+valor em um array map:

    Sintaxe:
    let Array = new Set()         //*Para instanciar
    array.set("chave","valor")    //*Para adicionar

    array.set("estado" , "RJ")   //*apenas strings
    array.set("Velocidade" , 100) //*string + número
    array.set(1 , 20)   //*apenas números

    ////

    Exemplo:

    let LISTA = new Map()

    LISTA.set("curso" , "JAVASCRIPT")
    LISTA.set("aula" , "CSS")

    console.log(LISTA)
    
    Com isso, foi criado um array Map() contendo dois pares de chave+valor

    ////

    Para imprimir o valor de uma chave em uma coleção Map(), é necessário utilizar o .get("chave"):

    let LISTA = new Map()

    LISTA.set("curso" , "JAVASCRIPT")
    LISTA.set("aula" , "CSS")

    var resultado = LISTA.get("curso")

    console.log(resultado)
    >>> JAVASCRIPT

    /////

    Para saber a quantidade de pares chave+valor em uma coleção Map() é preciso usar o .size:

    let LISTA = new Map()

    LISTA.set("curso" , "JAVASCRIPT")
    LISTA.set("aula" , "CSS")

    var resultado = LISTA.size

    console.log(resultado)
    >>> 2

    /////

    Para saber se existe alguma chave em uma coleção Map() é preciso usar o .has("chave"):

    let LISTA = new Map()

    LISTA.set("curso" , "JAVASCRIPT")
    LISTA.set("aula" , "CSS")

    var resultado = LISTA.has("curso")

    console.log(resultado)
    >>> true

    Foi impresso true pois existe a chave "curso" na coleção Map().

    //////

    Para deletar um par chave+valor de uma coleção map(), é necessário usar o .delete("chave"):

    let LISTA = new Map()

    LISTA.set("curso" , "JAVASCRIPT")
    LISTA.set("aula" , "CSS")

    LISTA.delete("curso")

    Com isso, o par ("curso" , "JAVASCRIPT") foi deletado do array.

    //////

    Para percorrer todos os pares chave+valor de uma coleção Map(), é preciso usar o .forEach():

    let LISTA = new Map()

    LISTA.set("curso" , "JAVASCRIPT")
    LISTA.set("aula" , "CSS")

    LISTA.forEach( (elemento) => {
        console.log(elemento)
    })

    >>> JAVASCRIPT
    >>> CSS

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UMA COLEÇÃO / ARRAY SET
    VIDEO: https://www.youtube.com/watch?v=v24QAyoiAo0

    A coleção set() não permite a entrada de valores duplicados. 

    Para adicionar pares de chave+valor em um array set:

    Sintaxe:
    let Array = new Set()         //*Para instanciar a coleção com o operador new
    ou
    let Array = new Set(["item 0", "item 1", "item 2"])    //*Para instanciar e já adicionar elementos diretamente

    ////

    Exemplo:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    Com isso, foi criado um array set contendo estes 4 elementos.

    /////

    Para adicionar mais elementos ao array:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    estados.add("AM")

    /////

    A coleção set() não permite a inclusão de elementos já existentes:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    estados.add("AM")
    estados.add("MS")
    estados.add("SP")   //*Já possui este elemento dentro do array, portanto não será incluído
    estados.add("RS")

    //////

    Para deletar um elemento do array:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    estados.delete("SP")

    //////

    Para deletar todos os elementos do array:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    estados.clear()

    //////

    Para saber o número de elementos dentro array:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    console.log(estados.size)
    >>> 4

    /////

    Para percorrer todos os elementos do array:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    estados.forEach( (elemento) => {
        console.log(elemento)
    })

    >>> RJ
    >>> SP
    >>> MG
    >>> ES

    Outra forma é usar o for/of:

    let estados = new Set(["RJ", "SP", "MG", "ES"])

    for (var elemento of estados){
        console.log(elemento)
    }

    ////// 


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA REALIZAR OPERAÇÕES ENTRE MAIS DE UM ELEMENTO DE UM ARRAY / VETOR USANDO REDUCE
    (para fazer sumarizações / juntar ou somar todos os elementos / realizar operações com todos os elementos)
    (Não tem no video)

    Sintaxe (para apenas 1 operação): 
    array.reduce( (valoranterior , valoratual) => operação com anterior e atual)

    Sintaxe (para mais de 1 operação):
    array.reduce( (valoranterior , valoratual) => {
        operação 1
        operação 2
        return operação 3
    })

    ////

    const numeros = [20, 40, 10, 4];
    const soma = numeros.reduce ( (x , y) => x + y );
    document.write(soma);
    >>> 74

    (x,y) => x + y   (Significa: Para cada elemento x e y , some x com y. 
    Ou seja, pegue os numeros 20 e 40 e os some. 
    Depois pegue o resultado e some com 10. 
    Por fim, pegue o resultado e some com 4)

    Aqui é utilizado uma arrow function (função lambda)

    /////

    Para separar os valores anteriores em uma nova lista:
    VIDEO: https://www.youtube.com/watch?v=LfKJFLqQgGo

    const numeros = [20, 40, 10, 4];
    let valoranterior = []

    const soma = numeros.reduce ( (x , y) => 
        valoranterior.push(x)
        return x + y
    );

    document.write("Os valores anteriores são " + valoranterior + "<br>");
    document.write("O total é igual a " + soma);

    >>> Os valores anteriores são 20,60,70
    >>> O total é igual a 74

    //////
    Com valor inicial:

    Sintaxe:
    reduce(callbackFn)      //Sem valor inicial
    ou
    reduce(callbackFn, initialValue)

    ¨¨¨¨
    const array = [1, 2, 3, 4];

    const initialValue = 0;

    const sumWithInitial = array.reduce(
    (accumulator, currentValue) => accumulator + currentValue,
    initialValue,
    );

    console.log(sumWithInitial);

    >>> 10      (0 + 1 + 2 + 3 + 4)

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA SEPARAR ELEMENTOS DE UM ARRAY / VETOR USANDO SLICE
    (não tem no video)

    lista.slice(Começo, Fim+1)

    Serve para separar itens de uma lista que estão em uma área, bloco ou intervalo. 
    Não serve para remover itens da lista, apenas separá-los em uma variável.

    Exemplo:

    const lista = ["item 0" , "item 1" , "item 2" , "item 3"];

    const x = lista.slice(1, 3);

    document.write(x);
    >>> item 1,item 2


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA JUNTAR / FUNDIR ELEMENTOS DE DOIS OU MAIS ARRAYS / VETORES USANDO CONCAT
    (não tem no video)

    Array1.concat(Array2)

    ///////

    -Para juntar dois arrays:

    var x = [1, 2, 3];
    var y = [4, 5, 6];

    var junta = x.concat(y);

    document.write(junta);
    >>> 1,2,3,4,5,6

    ///////

    -Para juntar mais de dois arrays:

    var x = [1, 2, 3];
    var y = [4, 5, 6];
    var z = [7, 8, 9];

    var junta = x.concat(y).concat(z);

    document.write(junta);
    >>> 1,2,3,4,5,6,7,8,9

    -Pode-se mudar a ordem da concatenação:
    var junta = y.concat(z).concat(x);
    >>> 4,5,6,7,8,9,1,2,3
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA INSERIR ELEMENTOS ENTRE DOIS OU MAIS ARRAYS / VETORES USANDO JOIN

    Array.join(".......")

    É preciso criar uma variável para conter como ficou a nova formatação ao juntar.

    /////////

    Exemplo 1:

    var lista = [1, 2, 3];
    x = lista.join("  ::  ");
    document.write(x)
    >>> 1 :: 2 :: 3

    //////////

    Exemplo 2:

    var lista = ["Brasil" ,  "EUA" , "Japão"];
    x = lista.join(" e ");
    document.write(x)
    >>> Brasil e EUA e Japão

    //////////

    -Pode-se usar o <br> para quebra a linha:

    var lista = ["Brasil" ,  "EUA" , "Japão"];
    x = lista.join("<br>");
    document.write(x)
    >>> Brasil
    >>> EUA
    >>> Japão

    //////////

    Caso não seja especificado nenhum valor em join, os itens ficarão grudados e separados por vírgula:

    var lista = ["Brasil" ,  "EUA" , "Japão"];
    x = lista.join();
    document.write(x)
    >>> Brasil,EUA,Japão

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA COLOCAR EM ORDEM CRESCENTE OS ELEMENTOS DE UM ARRAY / VETOR COM O SORT()

    -Colocando números em ordem crescente:
    var lista = [4, 2, 8, 1, 3]

    lista.sort()

    document.write(lista)
    >>> 1,2,3,4,8

    Obs: Todos os números precisam ter o mesmo número de dígitos, então talvez seja necessário adicionar zeros antes do número.

    var lista = [ "14" , "06" , "03" , "23" , "42" , "15" , "11" ];

    lista.sort();

    document.write(lista);
    >>> 03,06,11,14,15,23,42

    //////////////////

    -Colocando palavras ou letras em ordem crescente:
    var x = [ "feijão" , "arroz" , "batata" , "carne" , "água" , "cenoura" , "fruta" ];
    x.sort();
    document.write(x);
    >>> arroz,batata,carne,cenoura,feijão,fruta,água

    Obs: Note que o item água foi para o final da lista pois começa com "a com acento agudo". Note a ordem no exemplo abaixo:

    var x = [ "ãgua", "agua" , "âgua" , "água"]
    var sort = x.sort();
    document.write(sort);
    >>> agua,água,âgua,ãgua
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA COLOCAR DE TRÁS PARA FRENTE OS ELEMENTOS DE UM ARRAY / VETOR COM O REVERSE()

    O método reverse coloca os itens de trás para frente. Ele não reorganiza de forma decrescente.
    É preciso colocar os itens entre aspas senão pode dar problema.

    ////////

    -Exemplo usando palavras:
    var x = [ "feijão" , "arroz" , "batata" , "carne" , "água" , "cenoura" , "fruta" ];
    x.reverse();
    document.write(x);
    >>> fruta,cenoura,água,carne,batata,arroz,feijão

    /////////

    Exemplo 1 usando números:
    var x = [ "3" , "2" , "7" , "6" , "1" , "9" , "5" ];

    var sort = x.reverse();

    document.write(sort);
    >>> 5,9,1,6,7,2,3

    Exemplo 2 usando números:

    var x = [ "14" , "06" , "03" , "23" , "42" , "15" , "11" ];

    x.reverse();

    document.write(x);
    >>> 11,15,42,23,3,6,14

    /////////////

    -Caso queira colocar os números ou palavras da lista de trás para frente e organizados em ordem decrescente, 
    é preciso antes usar o comando .sort():

    var x = [ "14" , "06" , "03" , "23" , "42" , "15" , "11" ];
    x.sort();
    x.reverse();
    document.write(x);
    >>> 42,23,15,14,11,06,03

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA FILTRAR OS ELEMENTOS DE UM ARRAY / VETOR USANDO O FILTER

    var lista = [ "item 1" , "item 2" , "item 3" , "item 4" , "item 5"];
    var filtro = lista.filter( (x) => (condição de x) );
    document.write(filtro);

    É preciso criar uma variável para conter os itens que foram filtrados.

    ///////////

    Exemplo usando números:

    var lista = [ "14" , "6" , "3" , "23" , "42" , "15" , "11" ];
    var filtro = lista.filter( (x) => ( x > 10 && x < 30 ) );
    document.write(filtro);
    >>> 14,23,15,11

    No exemplo acima foram filtrados apenas os números maiores que 10 e menores que 30.

    //////////

    Exemplo usando palavras:

    var lista = [ "manga" , "abacaxi" , "lima" , "maçã" , "kiwi" , "caqui" ];
    var filtro = lista.filter( (x) => (x[0] == "m") );
    document.write(filtro);
    >>> manga,maçã

    No exemplo acima foram filtradas apenas palavras que comecem com a letra m (na posição 0).

    //////////

    OBS: O filter utiliza arrow function (função lambda).
    Por isso, como há apenas 1 parâmetro e 1 condição, é possível remover os parenteses:

    Array.filter( elemento => condição)

    Exemplo:
    var filtro = lista.filter( x => x > 10 );

    ////

    Para filtrar elementos marcados de um radio:

    <input type="radio" name="opção1" value="OPÇÃO 1">
    <label for="html">OPÇÃO 1</label><br>
    <input type="radio" name="opção1" value="OPÇÃO 2">
    <label for="html">OPÇÃO 2</label><br>
    <input type="radio" name="opção1" value="OPÇÃO 3">
    <label for="html">OPÇÃO 3</label><br>

    <button id="btn" onclick="CLICAR()">BOTÃO</button>

    JS:
    var marcados = [...document.querySelectorAll("input[type=radio]")]
    
    function CLICAR() {
        var filtro = marcados.filter((elemento) => elemento.checked)
        console.log(filtro[0].value)
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA IMPRIMIR OS ELEMENTOS DE UM ARRAY / VETOR USANDO FOR

    var lista = [4, 2, 5, 1, 3]

    lista.sort()   //*Colocou em ordem crescente (Opcional)
    
    for (let pos = 0 ; pos < lista.length ; pos++){
            document.write(lista[pos] + " ")
    }

    >>> 1 2 3 4 5 

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA IMPRIMIR OS ELEMENTOS DE UM ARRAY / VETOR USANDO FOR/IN

    var lista = [4, 2, 5, 1, 3]

    lista.sort()   //*Colocou em ordem crescente (Opcional)
    
    for (let pos in lista){
            document.write(lista[pos] + " ")
    }

    >>> 1 2 3 4 5 

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA IMPRIMIR OS ELEMENTOS DE UM ARRAY / VETOR USANDO FOR/OF
    (Não está no video)

    var lista = [4, 2, 5, 1, 3]

    lista.sort()   //*Colocou em ordem crescente (Opcional)

    for (let x of lista) {
        document.write(x + " ");
    }

    >>> 1 2 3 4 5 

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA IMPRIMIR OS ELEMENTOS DE UM ARRAY / VETOR USANDO FOREACH
    (Não está no video)

    Array.forEach( (elemento) => document.write(elemento + "<br>") );

    Exemplos:

    var itens = ["Item 1", "Item 2", "Item 3"];
    itens.forEach( (x) => document.write(x + "<br>") );
    >>> Item 1
    >>> Item 2
    >>> Item 3


    const letras = ['a', 'b', 'c'];
    letras.forEach( (x) => document.write(x));
    >>> abc

    Obs: Esse método utiliza arrow function (função lambda).
    Por isso, como há apenas 1 parâmetro, é possível remover os parenteses do parâmetro:

    itens.forEach( x => document.write(x + "<br>") );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////        PARA ACHAR A POSIÇÂO (ÍNDICE) DE UM ELEMENTO EM UM ARRAY / VETOR USANDO INDEXOF()

    var lista = ["Item 0", "Item 1", "Item 2", "Item 3", "Item 4"]

    var x = lista.indexOf("Item 3")

    document.write(x)
    >>> 3

    O elemento "Item 3" está na posição (índice) 3

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=mc3TKp2XzhI&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=30
    ////////////////////////////////////////////////////////////////////

    FUNÇÕES

    function Função(parâmetro formal){
        instrução
        return resultado
    }

    Função(parâmetro real)

    -Também pode ser simbolizado sem quebras de linha:

    function Função(parâmetro formal){instrução ; return resultado}

    ////////////

    Exemplo 1:

    function Função(x){
        return x + 3
    }

    var resultado = Função(7)

    document.write(resultado)
    >>> 10

    ///////////

    Exemplo 2:

    function ParOuImpar(n){
        if (n % 2 == 0) {
            return "O número é par"
        }
        else {
            return "O número é ímpar"
        }
    }

    var resultado = ParOuImpar(8)

    document.write(resultado)
    >>> O número é par

    /////////////////////////////////////////////////////////////

    FUNÇÃO COM MAIS DE UM PARÂMETRO

    function Função(x , y){
        return x + y
    }

    var resultado = Função(3 , 5)

    document.write(resultado)
    >>> 8

    ////////////////

    -Também pode ser simbolizado sem quebras de linha:

    function Função(x , y){var z = 2 ; return x + y + z}

    var resultado = Função(3 , 5)

    document.write(resultado)
    >>> 10

    ////////////////

    -Caso um dos parâmetros não seja dado, será impresso o erro Nan (Not a Number):

    function Função(x , y){
        return x + y
    }

    var resultado = Função(3)

    document.write(resultado)
    >>> NaN

    /////////////////

    -Porém é possível já declarar um parâmetro base caso não seja declarado algum parâmetro para evitar o erro NaN:

    function Função(x = 0 , y = 0){
        return x + y
    }

    var resultado = Função(3)

    document.write(resultado)
    >>> 3

    ////////////////////////////////////////////////////////////////////////////////

    FATORIAL
    (Exemplo: 5! = 5 x 4 x 3 x 2 x 1)


    FORMA 1 (SEM SER UMA FUNÇÃO RECURSIVA)

    function fatorial(n) {
        let fat = 1
        for (let c = n ; c > 1 ; c--) {
            fat *= c
        }
        return fat
    }

    document.write(fatorial(5))
    >>> 120

    //////////////////////

    FORMA 2 (USANDO WHILE)

    var num = 5
    var fat = 1

    while (num >= 1) {
        fat = fat * num
        num--
    }

    document.write(fat)
    >>> 120

    //////////////////////

    FORMA 3 (FUNÇÃO RECURSIVA)

    function Função(n) {
        if (n == 1 || n == 0) {
            return 1
        }
        else {
            return n * Função(n-1)
        }
    }

    document.write(Função(5))
    >>> 120

    ////////////////////////////////////////////////////////////////////////

    UTILIZAR O NOME DA VARIAVEL COMO NOME DA FUNÇÃO

    const variavel = function(x , y){return x + y}

    document.write(variavel(3 , 2))
    >>> 5

    //////////////////////////////////////////////////////////////////////

    ARROW FUNCTIONS (FUNÇÕES LAMBDA) - PARTE 1
    VIDEO: https://www.youtube.com/watch?v=maiNY1zYKSQ

    
    
    -FUNÇÃO SEM ARROW FUNCTION (SEM QUEBRAS DE LINHA):
    const variavel = function(x , y){return x + y}

    document.write(variavel(3 , 2))
    >>> 5

    //////////////////


    -FUNÇÃO COM ARROW FUNCTION (FUNÇÃO LAMBDA):
    const variavel = (x , y) => {return x + y}

    document.write(variavel(3 , 2))
    >>> 5

    Pode ser resumido para:
    const variavel = (x , y) => x + y

    ////////////////

    -FUNÇÃO COM ARROW FUNCTION COM APENAS 1 PARÂMETRO:

    -Não é preciso colocar os parenteses

    const variavel = x => {var y = 2 ; return x + y}

    document.write(variavel(3))
    >>> 5

    -Caso tenha apenas uma instrução na função, não precisa colocar as chaves:

    const variavel = x => x + 2

    document.write(variavel(3))
    >>> 5

    /////////////////////////////////////////////////////////////////////////////

    ARROW FUNCTIONS (FUNÇÕES LAMBDA) - PARTE 2
    VIDEO: https://www.youtube.com/watch?v=h33Srr5J9nY

    Convertendo funções para função lambda:

    -Função com nome e mais de um parâmetro (sem arrow function):
    function Função(a , b) {
        return a + b
    }

    -Função com nome e mais de um parâmetro (com arrow function):
    let Função = (a , b) => {return a + b}

    Como só há uma instrução dentro da função, esse código pode ser resumido removendo as chaves e o return:

    let Função = (a , b) => a + b

    //////////////////////////////////////////////////////

    -Função com nome e apenas 1 parâmetro (sem arrow function):
    function Função(x){
        return x > 0
    }

    -Função com nome e apenas 1 parâmetro (com arrow function):
    let Função = (x) => {return x > 0}

    Como só há uma instrução e um parâmetro dentro da função, esse código pode ser resumido removendo os parenteses, chaves e o return:

    let Função = x => x > 0

    //////////////////////////////////////////////////////

    -Função com nome e sem parâmetros (sem arrow function):
    function Função() {
        return Math.random
    }

    -Função com nome e sem parâmetros (com arrow function):
    let Função = () => {return Math.random}

    Como só há uma instrução, esse código pode ser resumido removendo as chaves e o return:
    let Função = () => Math.random

    /////////////////////////////////////////////////////

    -Função sem nome / Função anônima (sem arrow function):
    document.addEventListener("click" , function() {
        document.write("Clicou")
    })

    -Função sem nome / Função anônima (com arrow function):
    document.addEventListener("click" , () => document.write("Clicou"))

    ////////////////////////////////////////////////////

    Arrow functions são bastante úteis com classes por causa do escopo:

    class Pessoa {
        constructor(nome) {
            this.nome = nome
    }

        ArrowFunction(){
        setTimeout( () => {
            document.write("Arrow: " + this.nome)
        }, 100)
    }
    }

    let pessoaObjeto = new Pessoa("João")
    pessoaObjeto.ArrowFunction()
    document.write(this.nome)
    >>> Arrow: João

    /////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA FAZER COM QUE O RESULTADO DE UMA FUNÇÃO APAREÇA DE TEMPOS EM TEMPOS (INTERVALO) USANDO SETINTERVAL()

    function Vermelho() {
        document.body.style.background = "red"
    }

    setInterval(Vermelho , 5000)    //*Depois de 5 segundos o background do body fica vermelho

    1000 = 1 segundo
    2000 = 2 segundos
    3000 = 3 segundos
    etc...

    ////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA GERAR NÚMEROS ALEATÓRIOS USANDO MATH.RANDOM()

    Math.random();

    Obs: Math.random() returns a random number between 0 (inclusive), and 1 (exclusive).

    ////

    Para gerar um número entre 0 e 10:
    Math.random() * 10

    ////

    Para gerar um número entre 0 e 100:
    Math.random() * 100

    ////

    Para gerar apenas números inteiros e não float:

    Forma 1:
    Math.floor(Math.random() * 10)

    Forma 2: 
    parseInt(Math.random() * 10)

    ////

    Para gerar números entre min e max:

    -Número aleatório entre min (incluído) e max (excluído):
    function Random(min, max) {
        return Math.floor(Math.random() * (max - min) ) + min;
    }

    -Número aleatório entre min (incluído) e max (incluído):
    function Random(min, max) {
        return Math.floor(Math.random() * (max - min + 1) ) + min;
    }

    Para imprimir:
    document.write(Random(min , max))

    Exemplo para gerar um número entre 10 e 30:
    document.write(Random(10 , 30))

    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
VIDEO: https://www.youtube.com/watch?v=slLoLLCd-k0&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=32
    ///////////////////////////////////////////////////////////////////////////////////

    PARA DAR FOCO EM ALGUMA ÁREA DO SITE USANDO FOCUS()

    Exemplo 1:
    (Ao clicar no botão, o foco irá para a caixa de input)
    
    HTML:
    <input id="myTextField" value="Text field." />
    <button id="focusButton">
        Click to set focus on the text field
    </button>

    JS:
    document.getElementById("focusButton").addEventListener("click", () => {
        document.getElementById("myTextField").focus();
    });

    ///////////////////

    Exemplo 2:
    (Ao clicar o botão, o foco fará a página rolar (scroll) lá para baixo onde está o outro botão)

    HTML:
    <button id="focus_scroll">
        Click to set focus on off-screen button
    </button>
    <div id="container">
        <button id="myButton" style="margin-top: 500px;">
            Button
        </button>
    </div>
    
    JS:
    document.getElementById("focus_scroll").addEventListener("click", () => {
        document.getElementById("myButton").focus();
    });

    ///////////////////////

    Obs: Caso queira desabilitar o scroll, é possível acrescentar "preventScroll:true"
    O default é {preventScroll:false}

    Exemplo:
    document.getElementById("focus_no_scroll").addEventListener("click", () => {
        document.getElementById("myButton").focus({ preventScroll: true });
    });

    //////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////
   VIDEO: https://www.youtube.com/watch?v=roP93FA-NgU&list=PLHz_AreHm4dlsK3Nr9GVvXCbpQyHQl1o1&index=33
    //////////////////////////////////////////////////////////////////////////////////////////

    PARA CRIAR UM OBJETO 
    (Paradigma orientado a objetos)

    Array e Objetos são objetos

    /////////////////////////

    -Para criar um array:
    var ARRAY = ["Indice 0" , "Indice 1" , "Indice 2"] 

    //////////////

    -Para criar um objeto:
    var OBJETO = {
        Atributo 0 : "Valor 0" , 
        Atributo 1 : "Valor 1" , 
        Atributo 2 : "Valor 2"  
    }

    Exemplo:

    var Pessoa = {
        Nome : "João" , 
        Sexo : "Masculino" , 
        Idade : 20 
    }

    -Para imprimir um dos valores:

    document.write(Pessoa.Nome)
    >>> João

    ////////////////////


    -É possível colocar também funções dentro de um objeto.

    Exemplo 1:
    var amigo = {
        peso : 75,
        engordar(p = 0) {
            document.write("Engordou")
            this.peso += p
        }
    }

    ///////

    Exemplo 2:
    const pessoa = {
        Nome : "João",
        Sobrenome : "Lacorte",
        NomeCompleto : function () {
            document.write(`${this.Nome} ${this.Sobrenome}`)
        }
    }

    pessoa.imprimir()
    >>> João Lacôrte

    O código acima poderia ser resumido para:
    const pessoa = {
        Nome : "João",
        Sobrenome : "Lacorte",
        NomeCompleto() {
            document.write(`${this.Nome} ${this.Sobrenome}`)
        }
    }

    pessoa.NomeCompleto()
    >>> João Lacôrte


    ////////////////////


    Observações:
    -Javascript não aceita boolean (True e False) como valor.

    //////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UMA CLASSE (Paradigma Orientado a objetos)
    VIDEO: https://www.youtube.com/watch?v=h8HvEPIOQ1k
    VIDEO: https://www.youtube.com/watch?v=eh-ZSJpI5Ms

    Para criar uma classe com uma propridade usando o método construtor:

    Sintaxe:
    class NOMEDACLASSE {
        constructor(PROPRIEDADE){
            this.PROPRIEDADE = PROPRIEDADE     //*criou uma propriedade ou atributo
        }
    }

    var OBJETO = new NOMEDACLASSE("NOME DA PROPRIEDADE")      //*para instanciar um novo objeto para a classe
    
    console.log(OBJETO.PROPRIEDADE)
    >>> NOME DA PROPRIEDADE

    Obs: O operador new cria uma nova instância na memória, criando um objeto daquela classe e todos os objetos são independentes.

    ////

////    FORMA 1 (declarando o valor dentro do construtor):

    class Pessoa {
        constructor() {
            this.nome = "Bruno"    
        }
    }

    let objeto = new Pessoa()    

    console.log(objeto.nome)
    >>> Bruno

    ////   

////    FORMA 2 (declarando o valor fora do construtor):

    class Pessoa {
        constructor() {
            this.nome = nome    
        }
    }

    let objeto = new Pessoa("Bruno")    

    console.log(objeto.nome)
    >>> Bruno

    ////

////    FORMA 3 (criando mais de um objeto):

    class Pessoa {
        constructor(parametronome) {
            this.nome = parametronome    
        }
    }

    let objeto1 = new Pessoa("Bruno")    
    let objeto2 = new Pessoa("Maria") 
    let objeto3 = new Pessoa("José") 

    console.log(objeto2.nome)
    >>> Maria

    ///////

////    FORMA 4 (com mais de uma propriedade ou atributo):

    class Pessoa {
        constructor(nome, idade, sexo) {
            this.nome = nome
            this.idade = idade
            this.sexo = sexo
        }
    }

    let pessoa1 = new Pessoa("Marcos", 31, "Homem")
    let pessoa2 = new Pessoa("Ana", 27, "Mulher")
    let pessoa3 = new Pessoa("José", 23, "Homem")

    console.log(pessoa2.sexo)
    >>> Mulher

    ////////

////    Para criar uma classe com um método (função) dentro:

    class Adição {
        constructor(valor1 , valor2) {
            this.valor1 = valor1
            this.valor2 = valor2
        }
        Soma() {
            console.log(this.valor1 + this.valor2)
        }
    }

    let valores = new Adição(3, 5)
    valores.Soma()
    >>> 8

    ////

    Outro exemplo:
    VIDEO: https://www.youtube.com/watch?v=Y8KBN1NN6tU

    class Carro {
        constructor(nome, tipo){
            this.nome = nome
            if (tipo == 1){
                this.tipo = "Esportivo"
                this.velmax = 300
            } else if (tipo == 2) {
                this.tipo = "Utilitário"
                this.velmax = 100
            } else if (tipo == 3) {
                this.tipo = "Passeio"
                this.velmax = 160
            } else {
                this.tipo = "Militar"
                this.velmax = 180
            }
        }
        info() {
            console.log("Nome: " + this.nome)
            console.log("Tipo: " + this.tipo)
            console.log("Vel. Máxima: " + this.velmax)
        }
    }

    let modelo1 = new Carro("Ferrari", 1)
    let modelo2 = new Carro("Fiat", 2)
    let modelo3 = new Carro("Ford", 3)

    modelo1.info()

    >>> Nome: Ferrari
    >>> Tipo: Esportivo
    >>> Vel. Máxima: 300

    ////////////////////

////    Colocando as informações em um array e imprimindo apenas uma informação específica:

    class Aluno {
        constructor(nome, turma, idade) {
            this.nome = nome
            this.turma = turma
            this.idade = idade
        }
        info(){
            return [this.nome, this.turma, this.idade]
        }
    }

    let estudante = new Aluno("Carlos", 204, 13)

    console.log(estudante.info()[1])
    >>> 204

    /////////

////    Utilizando o método get (getter) para obter as informações:

    class Aluno {
        constructor(nome, turma) {
            this.nome = nome
            this.turma = turma
        }

        getNome() {
            return this.nome
        }

        getTurma() {
            return this.turma
        }
    }

    let estudante = new Aluno("Carlos", 204)

    console.log(estudante.getNome())
    console.log(estudante.getTurma())

    >>> Carlos
    >>> 204

    ////

    Outro exemplo:

    class Aluno {
        constructor(nome, turma) {
            this.nome = nome
            this.turma = turma
        }

        getNome() {
            console.log("O nome do aluno é " + this.nome)
        }

        getTurma() {
            console.log("A turma do aluno é a " + this.turma)
        }
    }

    let estudante = new Aluno("Carlos", 204)

    estudante.getNome()
    estudante.getTurma()

    >>> O nome do aluno é Carlos
    >>> A turma do aluno é a 204

    ///////////////////////

////    Utilizando o método set (setter) para fornecer as informações sem utilizar o construtor:

    class Aluno {
        setNome(nome) {
            this.nome = nome
        }

        setTurma(turma) {
            this.turma = turma
        }
    }

    let estudante = new Aluno()

    estudante.setNome("Daniel")
    estudante.setTurma(302)

    console.log(estudante.nome)
    console.log(estudante.turma)

    >>> Daniel
    >>> 302

    /////

////    A utilização da palavra set ou get não é obrigatória, sendo apenas uma convenção. 
    Por exemplo, é apenas necessário utilizar um método (função) para instanciar os parâmetros:

    class Aluno {
        Info(nome, turma) {
            this.nome = nome
            this.turma = turma
        }
    }

    let estudante = new Aluno()

    estudante.Info("Daniel", 302)

    console.log(estudante.nome)
    console.log(estudante.turma)

    >>> Daniel
    >>> 302

    ////

////    Para criar uma classe sem instanciar usando o this:

    class Aluno {
        nome = "Daniel"
        turma = 302
    }

    let estudante = new Aluno()

    console.log(estudante.nome)
    console.log(estudante.turma)

    >>> Daniel
    >>> 302

    ////

////    Criar um atributo/propriedade antes do construtor:

    class Pessoa {
        nome = "Bruno"
        constructor(nome) {
            console.log(this.nome)
        }
    }    

    let objeto = new Pessoa()

    //////////////////

////    Os valores poderiam ser obtidos através de um prompt se quisesse:

    class Aluno {
        nome = prompt("Nome:")
        turma = prompt("Turma:")
    }

    let estudante = new Aluno()

    console.log(estudante.nome)
    console.log(estudante.turma)

    ////

////    Os valores poderiam ser obtidos através de um input de formulário se quisesse:

    HTML:
    <label for="nome">Nome: </label>
    <input type="text" id="nome" name="nome" />
    <label for="turma">Turma: </label>
    <input type="text" id="turma" name="turma" />
    <button id="btn" onclick="Enviar()">ENVIAR</button>

    JS:
    class Aluno {
        constructor (nome, turma) {
            this.nome = nome
            this.turma = turma
        }
    }

    function Enviar(){
        var nome = document.querySelector("#nome").value
        var turma = document.querySelector("#turma").value
        var estudante = new Aluno(nome, turma)
        console.log(estudante.nome)
        console.log(estudante.turma)
        document.querySelector("#nome").value = ""
        document.querySelector("#turma").value = ""
    }

    ////

////    Para ir adicionando os dados em um novo array:

    HTML:
    <label for="nome">Nome: </label>
    <input type="text" id="nome" name="nome" />
    <label for="turma">Turma: </label>
    <input type="text" id="turma" name="turma" />
    <button id="btn" onclick="Enviar()">ENVIAR</button>
    <div id="texto"></div>

    JS:
    class Aluno {
        constructor (nome, turma) {
            this.nome = nome
            this.turma = turma
        }
    }

    var pessoas = []

    function Enviar(){
        var nome = document.querySelector("#nome").value
        var turma = document.querySelector("#turma").value
        var estudante = new Aluno(nome, turma)
        pessoas.push(estudante)    //*adicionou elementos no array pessoas
        document.querySelector("#nome").value = ""
        document.querySelector("#turma").value = ""
        console.log(pessoas)
    }

    ////////////////////////////////////////////////////////////////

////    Diferença Constructor x Setter:

    Constructor:

    class Pessoa {
        constructor(nome) {
            this.nome = nome
        }
    }    

    let objeto = new Pessoa("Bruno")

    console.log(objeto.nome)
    >>> Bruno

    ////

    Setter:

    class Pessoa {
        setNome(nome) {
            this.nome = nome
        }
    }

    let objeto = new Pessoa()

    objeto.setNome("Bruno")

    console.log(objeto.nome)
    >>> Bruno

    Obs: O método construtor e a função setNome fazem exatamente a mesma coisa. 
    Porém setters são usados quando se quer modificar o valor atual.

    ///////////////////////////////////////////////////////////////

////    Diferença Classe x Função:

    Classe:
    class Pessoa {
        constructor(nome) {
            this.nome = nome
        }
        getNome() {
            return this.nome
        }
        setNome(nome) {
            this.nome = nome
        }
    }

    const objeto = new Pessoa("Bruno")

    console.log(objeto.nome)

    ////

    Função:

    function Pessoa(nome) {
        this.nome = nome,
        this.getNome = function() {
            return this.nome
        },
        this.setNome = function(nome) {
            this.nome = nome
        }
    }

    const objeto = new Pessoa("Bruno")

    console.log(objeto.nome)

    Obs: Ao utilizar funções, é necessário não se esquecer das vírgulas separando as instruções.

    /////////////////////////////////////////////////////////////////////////////////////////////

    HERANÇA EM CLASSES (Paradigma orientado a objetos)
    VIDEO: https://www.youtube.com/watch?v=-fOCg39SBzc

////    Para que a classe filho herde atributos da classe Pai:

    class Pai {
        constructor(nome, idade, sexo) {
            this.nome = nome
            this.idade = idade
            this.sexo = sexo
        }
    }

    class Filho extends Pai {       //*usa-se o extends para dizer que a classe filho herda atributos e métodos da classe pai
        constructor(nome, idade, sexo) {
            super(nome, idade, sexo)      //*Usa-se o super() para herdar os atributos da classe Pai
        }
    }

    let objeto = new Filho("Bruno", 32, "masculino")

    console.log(objeto.nome)
    >>> Bruno

    /////

////    Para que a classe filho herde atributos da classe Pai e adicione mais alguns atributos:

    class Pai {
        constructor(nome, idade, sexo) {
            this.nome = nome
            this.idade = idade
            this.sexo = sexo
        }
    }

    class Filho extends Pai {       
        constructor(nome, idade, sexo, turma, escola) {
            super(nome, idade, sexo)     
            this.turma = turma
            this.escola = escola 
        }
    }

    let objeto = new Filho("Bruno", 32, "masculino", 203, "Escola Municipal")

    console.log(objeto.escola)
    >>> Escola Municipal     

    /////

////    Herdando métodos (funções) da classe pai:

    class Pai {
        constructor(valor1 , valor2) {
            this.valor1 = valor1
            this.valor2 = valor2
        }

        Soma() {
            console.log(this.valor1 + this.valor2)
        }
    }

    class Filho extends Pai {
        constructor(valor1, valor2) {
            super(valor1, valor2)
        }  
    }

    let objeto = new Filho(3 , 5)

    objeto.Soma()
    >>> 8

    /////

////    Herdando valores da classe Pai:

    class Pai {
        constructor(valor1 , valor2) {
            this.valor1 = valor1
            this.valor2 = valor2
        }
    }

    class Filho extends Pai {
        constructor(valor1, valor2, valor3) {
            super(valor1, valor2)
            this.valor3 = valor3
        }  
        Conta() {
            console.log((this.valor1 + this.valor2) * this.valor3)
        }
    }

    let objeto = new Filho(3 , 5 , 4)

    objeto.Conta()
    >>> 32

    /////

////    Obs: Não é necessário que a classe filho herde todas as propriedades e métodos da classe pai:

    class Pai {
        constructor(nome, idade, sexo, trabalho) {
            this.nome = nome
            this.idade = idade
            this.sexo = sexo
            this.trabalho = trabalho
        }
    }

    class Filho extends Pai {       
        constructor(nome, turma, escola) {
            super(nome)     
            this.turma = turma
            this.escola = escola 
        }
    }


    let objeto = new Filho("Bruno", 203, "Escola Municipal")

    console.log(objeto.nome)

    ///////////////////////////////////////////////////////////////////////////////////////////////////

////    POLIMORFISMO COM CLASSES
    (Paradigma orientado a objetos)
    VIDEO: https://www.youtube.com/watch?v=c2t7m3Whyb4

    
////    Polimorfismo nada mais é que diferentes classes terem funções de mesmo nome, mas com funcionalidades diferentes.

    Exemplo:

    class gato {
        fazerbarulho( ){
            console.log("miau")
        }
    }

    class cachorro {
        fazerbarulho ( ) {
            console.log ("au au")
        }
    }

    let mimi = new gato
    let rex = new cachorro

    mimi.fazerbarulho( )
    >>> miau

    rex.fazerbarulho( )
    >>> au au

    Ambos as varíáveis foram feitas de classes diferentes (mimi e rex). 
    Ambas as classes tem funções com o mesmo nome, mas a função é executada de forma diferente em cada uma das classes.
    Isso é o polimorfismo.

    /////

////    Polimorfismo com herança:

    class Valores {
        constructor(valor1) {
            this.valor1 = valor1
        }
    }

    class Soma extends Valores {
        constructor(valor1 , valor2) {
            super(valor1)
            this.valor2 = valor2
        }
        Conta = () => {
            console.log(this.valor1 + this.valor2)
        }
    }

    class Mult extends Valores {
        constructor(valor1 , valor2) {
            super(valor1)
            this.valor2 = valor2
        }
        Conta = () => {
            console.log(this.valor1 * this.valor2)
        }
    }

    const objSoma = new Soma(3, 3)

    objSoma.Conta()
    >>> 6

    const objMult = new Mult(3, 3)

    objMult.Conta()
    >>> 9

    //////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA NÃO PRECISAR INSTANCIAR UM OBJETO DE UMA CLASSE USANDO O STATIC
    VIDEO: https://www.youtube.com/watch?v=dfmP8SWttfU

    class America {
        static paises = ["Brasil", "EUA", "Argentina", "Cuba"]
    }

    console.log(America.paises[0])
    >>> Brasil

    /////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA MODIFICAR O VALOR DE UM ATRIBUTO DE UMA CLASSE PARA TODOS OS OBJETOS USANDO O STATIC (MEMBROS ESTÁTICOS)
    VIDEO: https://www.youtube.com/watch?v=lJ35mX0t1eE
    (Paradigma orientado a objetos)

    class Pessoa {
        constructor(nome, trabalho, estado) {
            this.nome = nome
            this.trabalho = trabalho
            this.estado = estado
            this.salario = "R$ 1000,00"
        }
    }

    let objPessoa1 = new Pessoa("Maria", "Empregada", "RJ")
    let objPessoa2 = new Pessoa("José", "Motorista", "SP")
    let objPessoa3 = new Pessoa("Jesus", "Pastor", "MG")

    objPessoa1.salario = "R$ 2000,00"
    objPessoa2.salario = "R$ 2000,00"
    objPessoa3.salario = "R$ 2000,00"

    console.log(objPessoa1.salario)
    console.log(objPessoa2.salario)
    console.log(objPessoa3.salario)

    Como visto acima, caso queira modificar o salario de todas as pessoas, é necessário ir mudando cada um deles individualmente.
    Então para modificar de todas as pessoas ao mesmo tempo, é necessário usar o static:

////    class Pessoa {
        static salario = "R$ 1000,00"        //Utiliza-se o static e é colocado fora do construtor
        constructor(nome, trabalho, estado) {
            this.nome = nome
            this.trabalho = trabalho
            this.estado = estado
        }
    }

    let objPessoa1 = new Pessoa("Maria", "Empregada", "RJ")
    let objPessoa2 = new Pessoa("José", "Motorista", "SP")
    let objPessoa3 = new Pessoa("Jesus", "Pastor", "MG")

    Pessoa.salario = "R$ 2000,00"      //*Utiliza-se o nome da classe e não do objeto

    console.log(Pessoa.salario)
    >>> R$ 2000,00

    O novo salario será aplicado na classe Pessoa, porém os 3 objetos não terão mais o atributo salario dentro deles.
    Então o static pode ser usado em conjunto com um método/função:

////    class Pessoa {
        static salario = "R$ 1000,00"
        constructor(nome, trabalho, estado) {
            this.nome = nome
            this.trabalho = trabalho
            this.estado = estado
        }
        Info = () => {
            console.log(this.nome)
            console.log(this.trabalho)
            console.log(this.estado)
            console.log(Pessoa.salario)     //*Utilizando dentro de uma função
        }
    }

    let objPessoa1 = new Pessoa("Maria", "Empregada", "RJ")
    let objPessoa2 = new Pessoa("José", "Motorista", "SP")
    let objPessoa3 = new Pessoa("Jesus", "Pastor", "MG")

    Pessoa.salario = "R$ 2000,00"      

    objPessoa1.Info()
    >>> Maria
    >>> Empregada
    >>> RJ
    >>> R$ 2000,00

    ////

////    A mudança do valor do atributo pode ser feita também dentro de uma função com static:

    class Pessoa {
        static salario = "R$ 1000,00"
        constructor(nome, trabalho, estado) {
            this.nome = nome
            this.trabalho = trabalho
            this.estado = estado
        }
        Info = () => {
            console.log(this.nome)
            console.log(this.trabalho)
            console.log(this.estado)
            console.log(Pessoa.salario)     
        }
        static mudarSalario = () => {          //*O static também foi colocado na função e é obrigatório
            Pessoa.salario = "R$ 2000,00"      //*A mudança de salario foi colocada dentro de uma função
        }
    }

    let objPessoa1 = new Pessoa("Maria", "Empregada", "RJ")
    let objPessoa2 = new Pessoa("José", "Motorista", "SP")
    let objPessoa3 = new Pessoa("Jesus", "Pastor", "MG")    

    Pessoa.mudarSalario()       //*Para chamar a função mudarSalario

    objPessoa1.Info()
    >>> Maria
    >>> Empregada
    >>> RJ
    >>> R$ 2000,00

    /////////////////////////////////////////////////////////////////////////////////////////////////

    PARA NÃO PERMITIR QUE UMA CLASSE SEJA INSTANCIADA EM UM OBJETO (CLASSES ABSTRATAS - ABSTRACT)
    VIDEO: https://www.youtube.com/watch?v=oIcxhzMXHC4

    class Pessoa {
        constructor() {
            if (this.constructor === Pessoa) {
                throw new TypeError("Esta classe não pode ser instanciada")
            }
        }
    }

    const objeto = new Pessoa()

    >>> Uncaught TypeError: Esta classe não pode ser instanciada

    Com isso, dará um erro, não permitindo instanciar a classe Pessoa. 
    Esse método é útil quando queremos apenas que os atributos de uma classe sejam herdados por outras classe, mas
    que não queremos qe seja possível instanciar ela.

    class Pai {
        constructor() {
            if (this.constructor === Pai) {
                throw new TypeError("Esta classe não pode ser instanciada")
            }
            this.nome = "Jesus"
            this.sexo = "Masculino"
        }
    }

    class Filho extends Pai {
        constructor(idade) {
            super()               //*herdou nome e sexo da classe Pai
            this.idade = idade
        }
    }

    const objeto = new Filho(33)

    console.log(objeto)
    >>> Filho {nome: 'Jesus', sexo: 'Masculino', idade: 33}

    /////////////////////////////////////////////////////////////////////////////////////////////////

    PARA EXIGIR QUE UMA CLASSE TENHA QUE UTILIZAR UM MÉTODO/FUNÇÃO (CLASSES ABSTRATAS - ABSTRACT)
    VIDEO: https://www.youtube.com/watch?v=oIcxhzMXHC4

    class Pai {
        constructor() {
            if (this.FUNÇÃO === undefined) {
                throw new TypeError("É obrigatório implementar o método FUNÇÃO")
            }
        }
    }

    class Filho extends Pai {
        constructor() {
            super()            
        }
        FUNÇÃO() {
            console.log("Texto de exemplo")
        }
    }

    const objeto = new Filho()

    >>> Uncaught TypeError: É obrigatório implementar o método FUNÇÃO

    Como o método FUNÇÃO não foi chamado, foi apresentada uma mensagem de erro.
    Então, para evitar que isso aconteça, é preciso chamar o método:
    
    class Pai {
        constructor() {
            if (this.FUNÇÃO === undefined) {
                throw new TypeError("É obrigatório implementar o método FUNÇÃO")
            }
        }
    }

    class Filho extends Pai {
        constructor() {
            super()            
        }
        FUNÇÃO() {
            console.log("Texto de exemplo")
        }
    }

    const objeto = new Filho()

    objeto.FUNÇÃO()

    >>> Texto de exemplo


    /////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR OBJETOS LITERAIS 
    VIDEO: https://www.youtube.com/watch?v=YLokpJmtvRw

    Obs: Com os objetos literias, todas as variáveis apontam para a mesma coisa. 
    Então toda vez que mudar o valor de um atributo, todos os objetos terão o seu valor modificados.

////    Criando um objeto literal com 1 atributo:    

    const Pessoa = {
        nome: "Bruno"
    }

    console.log(Pessoa.nome)
    >>> Bruno

    ou

    console.log(Pessoa["nome"])
    >>> Bruno

    ///////

////    Criando mais de um atributo:

    const Pessoa = {
        nome: "Bruno",
        idade: 32,
        sexo: "masculino"
    }

    console.log(Pessoa.nome)
    console.log(Pessoa.idade)
    console.log(Pessoa.sexo)
    >>> Bruno
    >>> 32
    >>> masculino

    ///////

////    Utilizando um método/função dentro de um objeto literal:  

    const Pessoa = {
        nome: "Bruno",
        idade: 32,
        sexo: "masculino",
        info: function() {
            console.log(this.nome)
            console.log(this.idade)
            console.log(this.sexo)
        }
    }

    Pessoa.info()

    >>> Bruno
    >>> 32
    >>> masculino

    ////

////    Caso queira usar parâmetros externos na função:

    const Pessoa = {
            nome: "Bruno",
            info: function(profissao) {
                console.log(this.nome + ": " + profissao)
            }
    }
    
    Pessoa.info("Motorista")

    ////////

////    Criando um getter em um objeto literal:

    const Pessoa = {
        nome: "Bruno",
        getNome: function() {
            return this.nome
        }
    }

    console.log(Pessoa.getNome())
    >>> Bruno

    ///////

////    Criando um setter em um objeto literal:

    const Pessoa = {
        nome: "Bruno",
        setNome: function(nome) {
            this.nome = nome
        }
    }

    Pessoa.setNome("Daniel")
    console.log(Pessoa.nome)
    >>> Daniel     

    ////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CONVERTER UM OBJETO LITERAL EM JSON (E VICE VERSA)
    VIDEO: https://www.youtube.com/watch?v=-EF_SYy2h7Q

    Objeto Literal:

    const objPessoa = {
        nome: "José",
        idade: 33,
        sexo: "Masculino",
        hobby: {
            hobby1: "Futebol",
            hobby2: "Filme",
            hobby3: "Praia"
        }
    }

    console.log(objPessoa.sexo)
    >>> Masculino

    console.log(objPessoa.hobby.hobby3)
    >>> Praia

    /////

////    Para converter o objeto literal acima em uma string JSON:

    const stringjson = JSON.stringify(objPessoa)

    /////

////    Para converter a string JSON acima em um objeto literal novamente:

    const objetoLiteral = JSON.parse(stringjson)

    /////////////////

    EXEMPLO DE ARQUIVO JSON:

    {
        "nome":"José",
        "idade":33,
        "sexo":"Masculino",
        "hobby":{
            "hobby1":"Futebol",
            "hobby2":"Filme",
            "hobby3":"Praia"
        }
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////

    PARA ADICIONAR UM ATRIBUTO OU MÉTODO PARA UM OBJETO USANDO O PROTOTYPE:
    VIDEO: https://www.youtube.com/watch?v=xwqvmRXodC0

////    Para adicionar um atributo/propriedade para uma função em um objeto literal usando o prototype:        

    const Pessoa = function(nome, trabalho) {      //*não se pode usar arrow function
            this.nome = nome
            this.trabalho = trabalho
    }

    let objPessoa = new Pessoa("Carlos", "Jardineiro")

    Pessoa.prototype.sexo = "Masculino"     //*Foi adicionado o atributo sexo no objeto Pessoa

    console.log(objPessoa.sexo)
    >>> Masculino

    /////

    Obs: O novo atributo é adicionado no objeto, porém ele fica separado dos atributos dentro do construtor:

    console.log(objPessoa)

    >>> Pessoa {nome: 'Carlos', trabalho: 'Jardineiro'}
            nome: "Carlos"
            trabalho: "Jardineiro"
            [[Prototype]]: Object
                sexo: "Masculino"
                constructor: class Pessoa
                [[Prototype]]: Object

    Obs: Adicionar atributos usando o prototype também funciona com classes.

    ///////////////////////

////    Para adicionar um atributo/propriedade ao objeto literal:  

    Sintaxe:
    NomeDoObjeto["NomeDoAtributo"]="ValorDoAtributo"

    const Pessoa = {
        nome : "Bruno",
        sexo : "Masculino"
    }

    Pessoa["profissao"]="Motorista"

    console.log(Pessoa.profissao)
    >>> Motorista

    ///////////////////

////    Para adicionar um método para um objeto usando o prototype:
    (Não se pode usar arrow functions!!!)

    const Pessoa = function(nome, trabalho) {
            this.nome = nome
            this.trabalho = trabalho
    }

    const objPessoa = new Pessoa("Carlos", "Jardineiro")

    Pessoa.prototype.Info = function() {      //*Foi adicionado o método/função Info na classe Pessoa
            console.log(this.nome)
    }   

    objPessoa.Info()
    >>> Carlos

    Obs: Adicionar métodos usando o prototype não funciona com classes, pois não herdará os valores dos parâmetros.

    /////////////

////    PARA REMOVER UM ATRIBUTO OU MÉTODO DE UM OBJETO LITERAL
    VIDEO: https://www.youtube.com/watch?v=Z7w-TZ5mnE4

    Para remover um atributo/propriedade:

    const Pessoa = {
        nome : "Bruno",
        sexo : "Masculino"
    }

    delete(Pessoa.sexo)

    Com isso, foi removido o atributo sexo do objeto Pessoa.

    //////

    Para remover um método/função:

    const Pessoa = {
        nome: "Bruno",
        info: function() {
            console.log(this.nome)
        }
    }

    delete(Pessoa.info)

    Com isso, foi removido o método info() do objeto Pessoa.

    /////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UM ARRAY DE OBJETOS LITERAIS
    VIDEO: https://www.youtube.com/watch?v=x_TVjjm6cNM

    const Pessoa = [
        {
            nome : "Bruno",
            idade : 33,
            sexo : "Masculino"
        },
        {
            nome : "José",
            idade : 25,
            sexo : "Masculino"
        },
        {
            nome : "Maria",
            idade : 28,
            sexo : "Feminino"
        },
    ]

    Para imprimir um dos elementos, é necessário usar a posição no array:

    console.log(Pessoa[0].nome)
    >>> Bruno

    ou

    console.log(Pessoa[0]["nome"])
    >>> Bruno

    ////////

////    Além de atributos dentro do objeto, é possível adicionar também métodos (funções):

    const Pessoa = [
        {
            nome: "Bruno",
            idade: 32,
            sexo: "masculino",
            info: function() {
                console.log(this.nome)
                console.log(this.idade)
                console.log(this.sexo)
            }
        },
        {
            nome: "Maria",
            idade: 27,
            sexo: "feminino",
            info: function() {
                console.log(this.nome)
                console.log(this.idade)
                console.log(this.sexo)
            }
        },
    ]

    Pessoa[0].info()
    >>> Bruno
    >>> 32
    >>> masculino

    ////////

////    Caso queira usar parâmetros externos na função:

    const Pessoa = [
        {
            nome: "Bruno",
            info: function(profissao) {
                console.log(this.nome + ": " + profissao)
            }
        },
        {
            nome: "Maria",
            info: function(profissao) {
                console.log(this.nome + ": " + profissao)
            }
        },
    ]

    Pessoa[0].info("Motorista")
    Pessoa[1].info("Advogada")

    >>> Bruno: Motorista
    >>> Maria: Advogada

    //////////////

////    Para imprimir cada um dos elementos do array:

    const Pessoa = [
        {
            nome : "Bruno",
            idade : 33,
            sexo : "Masculino"
        },
        {
            nome : "José",
            idade : 25,
            sexo : "Masculino"
        },
        {
            nome : "Maria",
            idade : 28,
            sexo : "Feminino"
        },
    ]

    Pessoa.forEach( (elemento) => {
        console.log(elemento.nome)
    })

    >>> Bruno
    >>> Maria
    >>> José

    /////////////

////    Para adicionar um atributo/propriedade ao array de objetos literais sem usar o prototype:  

    Sintaxe:
    NomeDoObjeto[índice]["NomeDoAtributo"]="ValorDoAtributo"

    const Pessoa = [
        {
            nome : "Bruno",
            sexo : "Masculino"
        },
        {
            nome : "Maria",
            sexo : "Feminino"
        },
    ]

    Pessoa[0]["profissao"]="Motorista"    //*Foi adicionado o atributo profissao apenas no primeiro objeto (de nome Bruno)

    console.log(Pessoa[0].profissao)

    ////////////////////////////////////////////////////////////////////

////    PARA CLONAR UM OBJETO LITERAL COM ASSIGN
    VIDEO: https://www.youtube.com/watch?v=Z7w-TZ5mnE4

    Para clonar um objeto literal:

    const Pessoa = {
            nome : "Bruno",
            idade : 33,
            sexo : "Masculino"
    }

    const clone = Object.assign({}, Pessoa)       //*clonou o objeto Pessoa

    console.log(clone.nome)
    >>> Bruno

    ////

    Para clonar um array de objetos literais:

    const Pessoa = [
        {
            nome : "Bruno",
            sexo : "Masculino"
        },
        {
            nome : "Maria",
            sexo : "Feminino"
        },
    ]

    const clone = Object.assign({}, Pessoa)     //*clonou o objeto Pessoa

    console.log(clone[0].nome)
    >>> Bruno
    
    ///////////////////////////////////////////////////////////////////////////////////////////

////    PARA FUNDIR OU MESCLAR OBJETOS LITERAIS COM O ASSIGN
    VIDEO: https://www.youtube.com/watch?v=Z7w-TZ5mnE4
    
    const Europa = {
        Inglaterra: "Inglês",
        França: "Francês"
    }

    const America = {
        Brasil: "Brasileiro",
        EUA: "Americano" 
    }

    const Asia = {
        Japão: "Japonês",
        China: "Chinês"
    }

    const Paises = Object.assign(Europa, America, Asia)

    console.log(Paises)

    Com isso, todos os atributos dos 3 objetos foram mesclados dentro da variavel/objeto Paises.

    ////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA CRIAR UM OBJETO (INSTANCIAR) A PARTIR DE UM OBJETO LITERAL
    VIDEO: https://www.youtube.com/watch?v=Z7w-TZ5mnE4
    
    const Pessoa = {
        nome: "Jesus",
        idade: 33
    }

    const objeto = Object.create(Pessoa)

    console.log(objeto.nome)
    >>> Jesus

    Isso é o equivalente a instanciar um objeto com uma classe:

    class Pessoa {
        constructor() {
            this.nome = "Jesus"
            this.idade = 33
        }
    }

    const objeto = new Pessoa()

    console.log(objeto.nome)
    >>> Jesus
    
    //////////////////////////////////////////////////////////////////////////////////////////////////

    PARA IMPORTAR MÓDULOS EM JAVASCRIPT
    VIDEO: https://www.youtube.com/watch?v=z3ZfhL6bDJc

    ATENÇÃO!!!
    É necessário usar o Live Server do VS Code ou algum Servidor privado como xxampp, etc... para usar o modo módulo.

////    Para exportar e importar um módulo que você mesmo criou:

    -Arquivo 1 (cores.js):
    const cores = ["vermelho", "azul", "verde", "amarelo"]
    export {cores}

    -Arquivo 2 (index.html):
    <html>
    <body>
        ....
        <script src="javascript.js" type="module"></ script>      //*Para utilizar um script em modo módulo
    </ body>
    </ html>

    -Arquivo 3 (javascript.js):
    import {cores} from "./cores.js"

    console.log(cores)
    >>> ['vermelho', 'azul', 'verde', 'amarelo']

    Caso queira imprimir um item específico do array, é necessário usar o seu índice/posição:

    console.log(cores[0])
    >>> vermelho

    /////

////    Caso queira incluir o script javascript dentro do html e não colocar em um arquivo separado:

    -Arquivo 1 (cores.js):
    const cores = ["vermelho", "azul", "verde", "amarelo"]
    export {cores}

    -Arquivo 2 (index.html):
    <html>
    <body>
        ....
        <script type="module">
            import {cores} from "./cores.js"
            console.log(cores)
        </ script> 
    </ body>
    </ html>

    /////

////    Caso queira exportar mais de um array:

    const cores = ["vermelho", "azul", "verde", "amarelo"]
    const nomes = ["Ana", "Beatriz", "Carlos"]

    export {cores , nomes}

    Obs: O mesmo vale para importar:
    import {cores , nomes} from "./nomedoarquivo.js"

    /////

////    Para exportar e importar métodos/funções dentro de módulos:

    -Arquivo 1 (modulo.js):
    function Soma() {
        console.log("Texto dentro da função Soma")
    }
    export {Soma}

    -Arquivo 2 (index.html):
    <html>
    <body>
        ....
        <script src="javascript.js" type="module"></ script>      
    </ body>
    </ html>

    -Arquivo 3 (javascript.js):
    import {Soma} from "./modulo.js"

    Soma()
    >>> Texto dentro da função Soma

    /////////

////    Para exportar e importar atributos de um objeto literal para serem usadas como variáveis:

    Arquivo 1 (modulo.js):
    const Soma = {
        x: 10,
        y: 15
    }
    export {Soma}
    

    Arquivo 2 (index.html):
    <html><body>
    <script type="module">
        import {Soma} from "./modulo.js"

        console.log(Soma.x + Soma.y)
    </ script> 
    </ body></ html>

    /////////

////    Para exportar como padrão (default):
    VIDEO: https://www.youtube.com/watch?v=HTsa9ZFiFS0

    ATENÇÃO!
    SÓ É POSSÍVEL TER 1 ELEMENTO NO MODO DEFAULT EM UM ARQUIVO

    ////

    -Arquivo 1 (modulo.js):
    const cores = ["vermelho", "azul", "verde", "amarelo"]
    const nomes = ["Carlos", "Maria", "Jesus", "Leandro"]

    export {cores}                 //*cores será exportado normalmente
    export default nomes           //*nomes será exportado no modo default

    -Arquivo 2 (index.html):
    <html>
    <body>
        ....
        <script src="javascript.js" type="module"></ script>     
    </ body>
    </ html>

    -Arquivo 3 (javascript.js):
    import {cores} from "./modulo.js"
    import nomes from "./modulo.js"        //*É importado sem as chaves pois foi exportado no modo default

    console.log(cores)
    console.log(nomes)

    Outra forma de importar seria:
    import nomes,{cores} from "./modulo.js"

    ////////

////    Ao importar um módulo no modo default, não é necessário usar o nome original, podendo renomeá-lo:

    -Arquivo 1 (modulo.js):
    const nomes = ["Carlos", "Maria", "Jesus", "Leandro"]

    export default nomes        

    -Arquivo 2 (index.html):
    <html><body>
        <script type="module">
                import pessoas from "./modulo.js"        //*nomes foi renomeado para pessoas

                console.log(pessoas)
        </ script>     
    </ body></ html>
    
    ///////

////    Para exportar um método/função como padrão (default):

    Forma 1:
    function Soma() {
        console.log(4 + 5)
    }

    export default Soma

    ///

    Forma 2:
    export default function Soma() {
        console.log(4 + 5)
    }

    ////

////    Para importar o método/função acima que foi exportado no modo default:

    import Soma from "./modulo.js"

    Soma()
    >>> 9

    /////////////////////////////

    Para renomear um módulo de um objeto ao exportar
    VIDEO: https://www.youtube.com/watch?v=uU_RsrO306A

////    -Arquivo 1 (cores.js):
    const nomeabsurdamentelongoedesnecessário = ["vermelho", "azul", "verde", "amarelo"]
    export {nomeabsurdamentelongoedesnecessário as cores}

    -Arquivo 2 (index.html):
    <html><body>
        <script type="module">
            import {cores} from "./cores.js"
            console.log(cores)
        </ script> 
    </ body></ html>

    ///////////////////////////

////    Para importar mais de um modulo com se fosse apenas um:
    VIDEO: https://www.youtube.com/watch?v=uU_RsrO306A

    Arquivo 1 (modulo.js):
    const america = ["Brasil", "EUA", "Argentina", "Cuba"]
    const europa = ["Inglaterra", "França", "Espanha", "Portugal"]
    const asia = ["Japão", "China", "Coréia", "Indonésia"]

    export {america,europa,asia}


    Arquivo 2 (index.html):
    <html><body>
        <script type="module">
            import * as paises from "./modulo.js"

            console.log(paises.america)       //*Será impresso ["Brasil", "EUA", "Argentina", "Cuba"]
        </ script> 
    </ body></ html>

    ///////////        

////    Para importar um modulo exportado no modo default junto com outros modulos:
    VIDEO: https://www.youtube.com/watch?v=uU_RsrO306A

    Arquivo 1 (modulo.js):
    const america = ["Brasil", "EUA", "Argentina", "Cuba"]
    const europa = ["Inglaterra", "França", "Espanha", "Portugal"]
    const asia = ["Japão", "China", "Coréia", "Indonésia"]

    export {america,europa}
    export default asia


    Arquivo 2 (index.html):
    <html><body>
        <script type="module">
            import * as paises from "./modulo.js"

            console.log(paises.default)       //*Será impresso ["Japão", "China", "Coréia", "Indonésia"]
        </ script> 
    </ body></ html>

    No exemplo acima:
    paises.asia (ERRADO - daria undefined)
    paises.default (CORRETO)
    
    ////////////////////////////////////////////////////////////////////////////////

////    Para exportar uma classe como módulo:
    VIDEO: https://www.youtube.com/watch?v=dfmP8SWttfU

    Arquivo 1 (modulo.js):
    class America {
        paises = ["Brasil", "EUA", "Argentina", "Cuba"]
    }

    export {America}

    Arquivo 2 (index.html):
    <html><body>
        <script type="module">
                import {America} from "./modulo.js"

                var objeto = new America()     //*instanciou o objeto a partir da classe America

                console.log(objeto.paises[0])    //*Será impresso Brasil
        </ script> 
    </ body></ html>

    /////

////    Para não precisar instanciar o objeto, pode-se usar o static na classe:

    Arquivo 1 (modulo.js):
    class America {
        static paises = ["Brasil", "EUA", "Argentina", "Cuba"]       //*Usou o static no atributo da classe
    }

    export {America}

    Arquivo 2 (index.html):
    <html><body>
        <script type="module">
                import {America} from "./modulo.js"

                console.log(America.paises[0])    //*Será impresso Brasil
        </ script> 
    </ body></ html>

    //////////////////////////////////////////////////

////    Para adicionar ou remover um valor à um atributo/propriedade de uma classe importada como módulo:

    Arquivo 1 (modulo.js):
    class America {
        static paises = ["Brasil", "EUA", "Argentina", "Cuba"]   
        
        static Adicionar = (novo) => {
            this.paises.push(novo)        //*para adicionar no final do array
        }

        static Remover = (novo) => {
            this.paises.pop()            //*para remover o último elemento do array
        }

        static Apagar = (novo) => {
            this.paises = []               //*para zerar o array
        }
    }
    export {America}

    Arquivo 2 (index.html):
    <html><body>
        <script type="module">
                import {America} from "./modulo.js"

                America.Adicionar("Canadá")

                console.log(America.paises)     //*Será impresso ['Brasil', 'EUA', 'Argentina', 'Cuba', 'Canadá']
        </ script> 
    </ body></ html>

    ////////////////////////////////////////////////////////////////////////////////////////// 

%%   */</script>

>>>>    <script>/* JAVASCRIPT MODERNO CFB CURSOS

        /////////////////////////////////////////////////////////////////////////////////////////

        PARA DETECTAR SE O USUÁRIO ESTÁ NO MOBILE
        VIDEO: https://www.youtube.com/watch?v=g4WYqh299Hw&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=8

    ////    <script>
            if (navigator.userAgent.match(/Android/i)
            || navigator.userAgent.match(/webOS/i)
            || navigator.userAgent.match(/iPhone|iPad|iPod/i)
            || navigator.userAgent.match(/BlackBerry/i)
            || navigator.userAgent.match(/Windows Phone/i)
            || navigator.userAgent.match(/Opera Mini/i)
            || navigator.userAgent.match(/IEMobile/i)
            ) {
                console.log("Celular")
            }
            else {
                console.log("PC")
            }
        </ script>

        /////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA CARREGAR O HTML EM PARALELO COM O JAVASCRIPT USANDO O DEFER 
        VIDEO: https://www.youtube.com/watch?v=g4WYqh299Hw&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=8

        <head>
            <script src="nomedoarquivo.js" defer> </ script>
        </head>

        ------

        OBS: É o mesmo que colocar o script do javascript antes do final do body do html. Por exemplo:

        <head>
            
        </head>

        <body>
            ....
            <script src="nomedoarquivo.js" defer></ script>
        </ body>

        -------

        Se o atributo defer for definido, ele especificará que o script será baixado em paralelo ao parsing da página e executado após a conclusão do parsing da página.

        OBS: O atributo defer é somente para scripts externos (só deve ser usado se o atributo src estiver presente).

        OBS2: há várias maneiras de executar um script externo:
            - Se o async estiver presente: O script é baixado em paralelo ao parsing da página e executado assim que estiver disponível (antes da conclusão do parsing)
            <script src="script.js" async> </script>

            - Se o defer estiver presente (e não o async): O script é baixado em paralelo ao parsing da página e executado após a conclusão do parsing da página.

            - Se o async ou o defer não estiver presente: O script é baixado e executado imediatamente, bloqueando o parsing até que o script seja concluído.

        *parsing = processo de análise e interpretação da estrutura gramatical de um texto ou sentença. No desenvolvimento web, parsing serve para interpretar e estruturar dados de uma maneira que possa ser compreendida por máquinas e humanos,  permitindo que um sistema converta uma sequência de caracteres em uma estrutura de dados mais organizada, como uma árvore sintática, que facilita a manipulação e a compreensão das informações.

        /////////////////////////////////////////////////////////////////////////////////////////

        PARA REALIZAR OPERAÇÕES COM BITS USANDO OPERADORES BITWISE

        & = e
        | = ou
        ^ = exclusivo

    ////    var x = 12     //* 1100 em bit
        var y = 10     //* 1010 em bit

        document.write(x & y)
        Será impresso: 8        //* 1000 em bit

        document.write(x | y)
        Será impresso: 14         //* 1110 em bit

        document.write(x ^ y)
        Será impresso: 6       //* 0110 em bit

        ////

        << = deslocar 1 bit para a esquerda
        >> = deslocar 1 bit para a direita

        Então:

        var x = 10      //* 1010 em bit
        var res = x << 1
        document.write(res)
        Será impresso: 20     //*10100 em bit

        Obs: Note que ao deslocar para esquerda, ele está dobrando o valor (na base 10). 
        Portanto é o mesmo que multiplicar por 2.
        Então ao deslocar para a direita (>>), será o mesmo que dividir por 2 o valor (na base 10).
        Ex: x >> 1

        O número à direita diz quantas vezes irá para a esquerda ou direita:
        x >> 3 = irá 3 digítos para a direita
        x << 2 = irá 2 digítos para a esquerda

        ////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA COPIAR ARRAYS USANDO O OPERADOR SPREAD 
        VIDEO: https://www.youtube.com/watch?v=_qgObfmqokw&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=13

        let x = [10, 20, 30]
        let y = [11, 22, 33, 44, 55]
        let z = [...x]

        console.log(z)
        >>> [10, 20, 30]

        ////

        let x = [10, 20, 30]
        let y = [11, 22, 33, 44, 55]
        let z = [...x, ...y]

        console.log(z)
        >>> [10, 20, 30, 11, 22, 33, 44, 55]

        ////

        const pessoa1 = {nome: "Maria", idade: 21, profissão: "advogada"}
        const pessoa2 = {nome: "José", idade: 32, cidade: "Rio de Janeiro"}
        const pessoa3 = {...pessoa1, ...pessoa2}

        console.log(pessoa3)
        >>> {
            cidade: "Rio de Janeiro",
            idade: 32,
            nome: "José",
            profissão: "advogada"
            }

        ////

    ////    Para somar valores de uma lista:

        const soma = (v1, v2, v3) => {
            return v1 + v2 + v3
        }

        let valores = [1, 3, 6]

        console.log(soma(...valores))
        >>> 10

        ////

        Para pegar elementos html e transformar em array:

        HTML:
        <div>Texto 1</div>
        <div>Texto 2</div>
        <div>Texto 3</div>

        JS:
        const objeto = [...document.getElementsByTagName("div")]

        console.log(objeto)

        Com isso, ele virou um html collection e é possível trabalhjar com ele. Por exemplo:

        console.log(objeto.length)

        ou 

        objeto.forEach( element => {
            console.log(element)
        })

        ou

        objeto.forEach( element => {
            element.innerHTML = "Texto modificado"
        })

        ////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////    BREAK E CONTINUE
        VIDEO: https://www.youtube.com/watch?v=KRojULEQx24&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=20

        Break:

        let n = 0

        while (n < 20) {
            console.log("Valor de n = " + n)
            if (n > 10) {
                break
            }
            n++
        }
        console.log("FIM")

        >>> "Valor de n = 0"
        >>> "Valor de n = 1"
        >>> "Valor de n = 2"
        >>> "Valor de n = 3"
        >>> "Valor de n = 4"
        >>> "Valor de n = 5"
        >>> "Valor de n = 6"
        >>> "Valor de n = 7"
        >>> "Valor de n = 8"
        >>> "Valor de n = 9"
        >>> "Valor de n = 10"
        >>> "Valor de n = 11"
        >>> "FIM"

        ////

        Continue:

        let n = 0
        let max = 20
        let pares = 0

        for (let i = n ; i < max ; i++) {
            if (i % 2 != 0) {
                continue
            }
            pares++
        }
        console.log(pares)
        >>> 10

        /////////////////////////////////////////////////////////////////////////////////////////////

        FUNÇÃO COM PARÂMETRO REST 
        VIDEO: https://www.youtube.com/watch?v=pZfH_UWg8Ro&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=24

    ////    Para criar uma função sem um número determinado de parâmetros usando o spread com o for:

        function soma(...valores) {
            let tamanho = valores.length
            let resultado = 0
            for (let i = 0 ; i < tamanho ; i++) {
                resultado += valores[i]
            }
            return resultado
        }

        var total = soma(10,5,3,6,8)
        console.log(total)
        >>> 32

        ////

    ////    Para criar uma função sem um número determinado de parâmetros usando o spread com o for/of:

        function soma(...valores) {
            let resultado = 0
            for (let x of valores) {
                resultado += x
            }
            return resultado
        }

        var total = soma(10,5,3,6,8)
        console.log(total)
        >>> 32

        ////

    ////    Usando uma função aninhada com arrow function e parâmetros REST e spread:
        VIDEO: https://www.youtube.com/watch?v=SNKIzr9JgtQ&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=28

        const soma = (...valores) => {
            const somar = val => {
                let resultado = 0
                for (let x of val) {
                    resultado += x
                }
                return resultado
            }
            return somar(valores)
        }

        let total = soma(10,5,3,6,8)
        console.log(total)
        >>> 32

        Obs: A função somar poderia ser colocada fora da função soma

        /////////////////////////////////////////////////////////////////////////////////////////////

        FUNÇÃO ANÔNIMA COM CONSTRUTOR
        VIDEO: https://www.youtube.com/watch?v=0HJU96mThMg&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=25

    ////    Para criar uma função anônima com um construtor:

        Sintaxe:
        var VARIAVEL = new Function ("parâmetro1" , "parâmetro2" , "instrução")

        Obs: Quando usar um construtor é necessário começar com new e a palavra Function tem que começar com F maiúsculo.

        Exemplo:
        var soma = new Function( "v1" , "v2" , "return v1 + v2" ) 

        console.log(soma(10,5))

        /////////////////////////////////////////////////////////////////////////////////////////////

        PARA CRIAR UMA FUNÇÃO GERADORA
        VIDEO: https://www.youtube.com/watch?v=3j9Ikmm2ieA&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=28

    ////    Sintaxe:
        function* FUNÇÃO() {
            yield "INSTRUÇÃO 1"
            yield "INSTRUÇÃO 2"
            yield "INSTRUÇÃO 3"
        }
        let VARIAVEL = FUNÇÃO()
        console.log(VARIAVEL.next().value)   
        console.log(VARIAVEL.next().value)  
        console.log(VARIAVEL.next().value)  

        ////

    ////    Exemplo 1:
        function* cores() {
            yield "vermelho"
            yield "verde"
            yield "azul"
        }
        let iterador = cores()
        console.log(iterador.next().value)   //* retorna "vermelho"
        console.log(iterador.next().value)   //* retorna "verde"
        console.log(iterador.next().value)   //* retorna "azul"

        ////

    ////    Exemplo 2:
        function* perguntas() {
            const nome = yield "Qual o seu nome?"
            const esporte = yield "Qual o seu esporte favorito?"
            return "Seu nome é " + nome + " e seu esporte favorito é " + esporte
        }
        const iterador = perguntas()
        console.log(iterador.next().value)   //* retorna "Qual o seu nome?"
        console.log(iterador.next("Bruno").value)   //* retorna "Qual o seu esporte favorito?"
        console.log(iterador.next("Natação").value)   //* retorna "Seu nome é Bruno e seu esporte favorito é Natação"  

        ////

    ////    Exemplo 3:
        function* contador() {
            let c = 0
            while (true) {
                yield c++
            }
        }
        const iterador = contador()
        for (let i = 0 ; i < 10 ; i++) {
            console.log(iterador.next().value)   //*retorna contagem de 0 a 9
        }

        /////////////////////////////////////////////////////////////////////////////////////////

        PARA USAR O OPERADOR THIS EM FUNÇÕES ANÕNIMAS
        VIDEO: https://www.youtube.com/watch?v=21U6gqefijo&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=30
        
    ////    Exemplo 1:
        function aluno(nome, nota) {
            this.nome = nome
            this.nota = nota

            console.log("nome")
            console.log("nota")
        }        

        aluno("Bruno", 7.5)
        >>> "Bruno"
        >>> "7.5"

        /////

    ////        É melhor utilizar o this com arrow function pois não teremos problemas de escopo ao utilizar setTimeout, setInterval, etc...

        Sem arrow function:

        function aluno(nome) {
            this.nome = nome

            this.dados = function() {
                setTimeout(function(){       //*sem arrow function
                    console.log(this.nome)
                },3000)
            }   
        }        

        const x = new aluno("Bruno")
        x.dados()
        >>> undefined

        ////

        Com arrow function:

        function aluno(nome) {
            this.nome = nome

            this.dados = function() {
                setTimeout( () => {         //*com arrow function
                    console.log(this.nome)
                },3000)
            }   
        }        

        const x = new aluno("Bruno")
        x.dados()
        >>> "Bruno"

        ///////////////////////////////////////////////////////////////////////////////////////////////

        CRIAR UM INTERVALO DE TEMPO COM SET TIME OUT e SET INTERVAL
        VIDEO: https://www.youtube.com/watch?v=21U6gqefijo&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=30

    ////    Sintaxe set timeout:
        setTimeout( () => {
            instrução
        }, intervalodetempo)

        Exemplo:

        function soma(x, y) {
            setTimeout( () => {
                console.log(x + y)
            }, 3000)                    //* Vai demorar 3 segundos (3000 milisegundos) para começar
        }

        soma(4, 5)

        ///

        Para parar o setTimeout:

        function soma(x, y) {
            var parada = setTimeout( () => {
                console.log(x + y)
            }, 3000)                    
        }

        function Parar() {
            clearTimeout(parada)
        }

        ////////////

    ////    Sintaxe set interval:
        setInterval( () => {
            instrução
        }, intervalodetempo)

        Exemplo:

        function soma(x, y) {
            setInterval( () => {
                console.log(x + y)
            }, 3000)                    //* Vai demorar 3 segundos (3000 milisegundos) para começar
        }

        soma(4, 5)

        ///

        Para parar o setInterval:

        function soma(x, y) {
            var parada = setInterval( () => {
                console.log(x + y)
            }, 3000)                    
        }

        function Parar() {
            clearInterval(parada)
        }

        //////////////////////////////////////////////////////////////////////////////////////////

        PARA MODIFICAR ELEMENTOS PAI, FILHO E IRMÃOS
        VIDEO: https://www.youtube.com/watch?v=HOLoqv3meTI&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=39
        VIDEO: https://www.youtube.com/watch?v=woT9kGbzJU4&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=42

    ////    Para modificar um elemento filho específico pela sua posição:

        <div id="pai">
            <div class="filho">TEXTO 1</div>
            <div class="filho">TEXTO 2</div>
            <div class="filho">TEXTO 3</div>
        </div>    

        JS:
        document.getElementById("pai").children[1].innerHTML = "TEXTO MODIFICADO"  
        
        ////

    ////    Para modificar todos os elementos filhos:

        <div id="pai">
            <div class="filho">TEXTO 1</div>
            <div class="filho">TEXTO 2</div>
            <div class="filho">TEXTO 3</div>
        </div>    

        JS:
        const FILHO = [...document.getElementById("pai").children]

        FILHO.map( (ELEMENTO) => {
            ELEMENTO.innerHTML = "TEXTO MODIFICADO"
        })
        
        ////

    ////    Para modificar o primeiro elemento filho:

        <div id="pai">
            <div class="filho">TEXTO 1</div>
            <div class="filho">TEXTO 2</div>
            <div class="filho">TEXTO 3</div>
        </div>    

        JS:
        document.getElementById("pai").firstElementChild.innerHTML = "TEXTO MODIFICADO"

        ////

    ////    Para modificar o último elemento filho:

        <div id="pai">
            <div class="filho">TEXTO 1</div>
            <div class="filho">TEXTO 2</div>
            <div class="filho">TEXTO 3</div>
        </div>    

        JS:
        document.getElementById("pai").lastElementChild.innerHTML = "TEXTO MODIFICADO"      
        
        ////

    ////    Para modificar o elemento pai, junto com seus filhos:

        <div id="pai"> TEXTO PAI
            <div class="filho">TEXTO FILHO 1</div>
            <div class="filho">TEXTO FILHO 2</div>
            <div class="filho">TEXTO FILHO 3</div>
        </div>    

        JS:
        document.querySelector(".filho").parentElement.innerHTML = "TEXTO MODIFICADO"    
        ou
        document.querySelector(".filho").parentNode.innerHTML = "TEXTO MODIFICADO"    

        Com isso, todos os textos serão substituídos por um único texto "TEXTO MODIFICADO"

        ////

    ////    Para modificar o elemento avô:

        <div id="avô"> TEXTO AVÔ
            <div id="pai"> TEXTO PAI
                <div class="filho">TEXTO FILHO 1</div>
                <div class="filho">TEXTO FILHO 2</div>
                <div class="filho">TEXTO FILHO 3</div>
            </div>     
        </div>

        document.querySelector(".filho").parentElement.parentElement.innerHTML = "TEXTO MODIFICADO"   
        ou
        document.querySelector(".filho").parentNode.parentNode.innerHTML = "TEXTO MODIFICADO"  

        ////

    ////   Para modificar os elementos irmãos:

        <div id="pai">
            <div id="filho1">TEXTO 1</div>
            <div id="filho2">TEXTO 2</div>
            <div id="filho3">TEXTO 3</div>
        </div>    

        JS:
        document.getElementById("filho2").nextElementSibling.innerHTML = "TEXTO MODIFICADO"      
        document.getElementById("filho2").previousElementSibling.innerHTML = "TEXTO MODIFICADO"   

        ////

    ////    Para descobrir se um elemento tem filhos:
        VIDEO: https://www.youtube.com/watch?v=woT9kGbzJU4&list=PLx4x_zx8csUg_AxxbVWHEyAJ6cBdsYc0T&index=42

        <div id="pai">
            <div id="filho1">TEXTO 1</div>
            <div id="filho2">TEXTO 2</div>
            <div id="filho3">TEXTO 3</div>
        </div>    

        JS:
        console.log(document.getElementById("pai").hasChildNodes())

        Será impresso True

        ////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA PEGAR O CONTEÚDO DE TEXTO DE UM ELEMENTO

        <div id="ID">   TEXTO DE EXEMPLO   </div>

        JS:
        var texto = document.getElementById("ID").innerHTML      //*retorna "   TEXTO DE EXEMPLO   "   (com os espaços)
        ou
        var texto = document.getElementById("ID").innerText      //*retorna "TEXTO DE EXEMPLO"    (sem os espaços)
        ou
        var texto = document.getElementById("ID").textContent     //*retorna "   TEXTO DE EXEMPLO   "    (com os espaços)

        console.log(texto)

        ////////////////////////////////////////////////////////////////////////////////////////

        INSERIR OU MOVER ELEMENTOS PARA ANTES OU DEPOIS COM INSERTBEFORE E AFTER

    ////    Para inserir antes:

        HTML:
        <div id="pai">
            <div id="filho1">TEXTO 1</div>
            <div id="filho2">TEXTO 2</div>
            <div id="filho3">TEXTO 3</div>
        </div>

        JS:
        var filho1 = document.getElementById("filho1")
        var filho3 = document.getElementById("filho3")

        document.getElementById("pai").insertBefore(filho3 , filho1)
        ou
        document.getElementById("pai").before(filho3 , filho1)

        Com isso, o filho3 passou a estar antes do filho1

        /////

    ////    Para inserir depois:     

        HTML:
        <div id="pai">
            <div id="filho1">TEXTO 1</div>
            <div id="filho2">TEXTO 2</div>
            <div id="filho3">TEXTO 3</div>
        </div>

        JS:
        var filho1 = document.getElementById("filho1")
        var filho3 = document.getElementById("filho3")

        document.getElementById("filho3").after(filho1)
        ou
        document.getElementById("pai").insertBefore(filho1 , filho3.nextSibling)
        ou
        document.getElementById("pai").appendChild(filho1)

        Com isso, o filho1 passou a estar depois do filho3

        //////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA ALTERNAR OU TROCAR DE CLASSES USANDO O TOGGLE NO JAVASCRIPT

        Exemplo 1 (para apenas 1 elemento):

        CSS:
        .vermelho {
            color: red;
        }

        .azul {
            color: blue;
        }

        HTML:
        <button id="btn" class="vermelho">CLIQUE AQUI</button>

        JS:
        document.getElementById("btn").addEventListener("click" , (EVENTO) => {
            EVENTO.target.classList.toggle("azul")
        })

        ////

        Exemplo 2 (para mais de um elemento):

        CSS:
        .selecionado {
            color: white;
            background-color: red;
            font-weight: bold;
        }

        HTML:
        <button class="btn">BOTÃO 1</button>
        <button class="btn">BOTÃO 2</button>
        <button class="btn">BOTÃO 3</button>

        JS:
        const BOTÕES = [...document.querySelectorAll(".btn")]

        BOTÕES.map( (ELEMENTO) => {
            ELEMENTO.addEventListener("click" , (EVENTO) => {
                EVENTO.target.classList.toggle("selecionado")
            })
        })

        ////

        Exemplo 3 (para que somente 1 elemento possa ser selecionado e ter sua classe mudada):

        CSS:
        .selecionado {
            color: white;
            background-color: red;
            font-weight: bold;
        }

        HTML:
        <button class="btn">BOTÃO 1</button>
        <button class="btn">BOTÃO 2</button>
        <button class="btn">BOTÃO 3</button>

        JS:
        const BOTÕES = [...document.querySelectorAll(".btn")]

        var tirarSeleção = () => {
            var REMOVER = [...document.querySelectorAll(".selecionado")]
            REMOVER.map( (ELEMENTO) => {
                    ELEMENTO.classList.remove("selecionado")
            })
        }

        BOTÕES.map( (ELEMENTO) => {
            ELEMENTO.addEventListener("click" , (EVENTO) => {
                tirarSeleção()
                EVENTO.target.classList.toggle("selecionado")
            })
        })

        ////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA ENCONTRAR UM ELEMENTO EM UM ARRAY USANDO FIND NO JAVASCRIPT
        VIDEO: https://www.youtube.com/watch?v=bEovepaalZA

        Sintaxe:
        array.find(função);

        ////

        Para encontrar o primeiro elemento de um array:

        FORMA 1:

        var lista = [3, 10, 15, 18, 20, 30]

        var pesquisa = lista.find( (elemento) => {
                return elemento > 17
        })

        console.log(pesquisa)
        >>> 18

        Com isso, foi retornado o primeiro elemento do array maior que 17, no caso o número 18.

        FORMA 2 - usando um função separada:

        var lista = [3, 10, 15, 18, 20, 30]

        function Pesquisar(elemento) {
            return elemento > 17
        } 

        var pesquisa = lista.find(Pesquisar)

        console.log(pesquisa)
        >>> 18

        ////////

        Para saber se um array possui um item e descobrir a sua posição:

        HTML:
        <input type="number" id="idade" /> <br>
        <button id="btn" onclick="Pesquisar()">PESQUISAR</button>
        <div id="resultado"></div>

        JS:
        var lista = [3, 10, 15, 18, 20, 30]
        
        function Pesquisar() {
            document.getElementById("resultado").innerHTML = "Não há este item na lista"
            lista.find( (elemento, posição) => {
                    var idade = document.getElementById("idade").value
                    if (elemento == idade) {
                            document.getElementById("resultado").innerHTML = "Este item tem na lista e está na posição: " + posição
                    } 
            })
        }

        //////

        Para procurar uma string de texto em um array:

        HTML:
        <input type="text" id="pais" /> <br>
        <button id="btn" onclick="Pesquisar()">PESQUISAR</button>
        <div id="resultado"></div>

        JS:
        var lista = ["Brasil", "Eua" , "França", "Japão"]

        function Pesquisar() {
            document.getElementById("resultado").innerHTML = "Não há este item na lista"
            lista.find( (elemento) => {
                    var pais = document.getElementById("pais").value
                    if (elemento == pais || elemento.toUpperCase() == pais || elemento.toLowerCase() == pais) {
                            document.getElementById("resultado").innerHTML = "Este item tem na lista" 
                    } 
            })
        }

    //////////////////////////////////////////////////////////////////////
    FIND INDEX (findIndex)
    Para achar o indice de um elemento de um array

    findIndex() returns the index of the first element that passes a test (provided by a function).

    const ages = [4, 10, 18, 20];

    ages.findIndex(checkAge);

    function checkAge(age) {
        return age > 18;
    }

    >>> 3         (3 é o indice de 20)

    ----------

    The findIndex() method executes a function for each array element.

    The findIndex() method returns the index (position) of the first element that passes a test.

    The findIndex() method returns -1 if no match is found.

    The findIndex() method does not execute the function for empty array elements.

    The findIndex() method does not change the original array.

    --------------

    const lista = ["item0", "item1", "item2", "item3", "item4", "item5"]

    const indice = lista.findIndex(i => i === "item2")

    alert(indice)

    >>> 2              (retorna o indice do elemento do array)


        ////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA SABER SE HÁ ELEMENTOS EQUIVALENTES EM UM ARRAY USANDO EVERY NO JAVASCRIPT
        VIDEO: https://www.youtube.com/watch?v=XzcOiyl40zk

        Para encontrar elementos de um array que estejam de acordo com uma condição:

        Exemplo 1:

        var lista = [13, 10, 15, 18, 20, 30]

        var pesquisa = lista.every( (elemento) => {
                return elemento > 7
        })

        console.log(pesquisa)
        >>> true

        Com isso, foi retornado true pois todos os itens da lista são maiores que 7.

        Exemplo 2:

        var lista = [3, 10, 15, 18, 20, 30]

        var pesquisa = lista.every( (elemento) => {
                return elemento > 7
        })

        console.log(pesquisa)
        >>> false

        Com isso, foi retornado false pois existem elementos menores que 7 (no caso o número 3).

        ////

        Para usar every com um função separada:

        var lista = [13, 10, 15, 18, 20, 30]

        function Pesquisar(elemento) {
            return elemento < 40
        } 

        var pesquisa = lista.every(Pesquisar)

        console.log(pesquisa)
        >>> true

        Deu true pois todos os itens da lista são menores que 40.

        //////

        Para descobrir o primeiro elemento que não está em conformidade com a condição:

        var lista = [3, 10, 15, 18, 20, 30]

        var pesquisa = lista.every( (elemento) => {
                if (elemento < 7) {
                    console.log(elemento)
                }
                return elemento >= 7
        })

        >>> 3

        //////

        Para descobrir a posição do primeiro elemento que não esteja em conformidade com uma condição:

        var lista = [11, 8, 5, 9, 13, 10]

        var pesquisa = lista.every( (elemento , posição) => {
                if (elemento < 7) {
                    console.log("Item não conforme na posição " + posição)
                }
                return (elemento >= 7)
        })

        >>> "Item não conforme na posição 2"

        ////////////////////////////////////////////////////////////////////////////////////////////////////////

        PARA SABER SE HÁ PELO MENOS 1 ELEMENTO EQUIVALENTE EM UM ARRAY USANDO O MÉTODO SOME NO JAVASCRIPT
        VIDEO: https://www.youtube.com/watch?v=TGHleqCYXF4

        Para encontrar pelo menos 1 elemento de um array que esteja de acordo com uma condição:

        Exemplo 1:

        var lista = [13, 10, 15, 18, 20, 30]

        var pesquisa = lista.some( (elemento) => {
                return elemento > 27
        })

        console.log(pesquisa)
        >>> true

        Com isso, foi retornado true pois há pelo menos 1 elemento na lista maior que 27 (no caso, o número 30)

        Exemplo 2:

        var lista = [13, 10, 15, 18, 20, 30]

        var pesquisa = lista.some( (elemento) => {
                return elemento > 37
        })

        console.log(pesquisa)
        >>> false

        Com isso, foi retornado false pois não há nenhum elemento da lista que seja maior que 37.

        ////

        Para descobrir quais elementos de um array estão em conformidade com uma condição:

        var lista = [13, 10, 15, 18, 20, 30]

        var pesquisa = lista.some( (elemento) => {
                if (elemento > 19) {
                    console.log(elemento)
                }                   
        })

        >>> 20
        >>> 30

        Os números 20 e 30 são maiores que 19.

        ////

        Para descobrir a posição dos elementos que estejam em conformidade com uma condição:

        var lista = [13, 10, 15, 18, 20, 30]

        var pesquisa = lista.some( (elemento , posição) => {
                if (elemento > 19) {
                    console.log(posição)
                }                   
        })

        >>> 4
        >>> 5

        Os números 20 e 30 são maiores que 19 e estão na posição 4 e 5 do array.

        /////////////////////////////////////////////////////////////////////////////////////////////////

        PARA ADICIONAR OU REMOVER O ATRIBUTO DISABLED DE UM CAMPO DE INPUT
        VIDEO: https://www.youtube.com/watch?v=-85DzYOfoRw

        FORMA 1:

        <label for="nome">Nome: </label>
        <input type="text" name="nome" id="nome" disabled />
        <button onclick="Toggle()">TROCAR</button>

        JS:
        function Toggle() {
            document.querySelector("#nome").toggleAttribute("disabled")
        }

        /////

        FORMA 2:

        <label for="nome">Nome: </label>
        <input type="text" name="nome" id="nome" disabled />
        <button onclick="Habilitar()">HABILITAR</button>
        <button onclick="Desabilitar()">DESABILITAR</button>

        JS:
        function Habilitar() {
            document.querySelector("#nome").removeAttribute("disabled")
        }
        function Desabilitar() {
            document.querySelector("#nome").setAttribute("disabled","disabled")
        }
        
        /////////////////////////////////////////////////////////////////////////////////////////////////////

        PARA COPIAR UM CONTEÚDO PARA A ÁREA DE TRANSFERÊNCIA DO WINDOWS
        VIDEO: https://www.youtube.com/watch?v=rGfwCknE-Q0

    ////    Para copiar um conteúdo de texto para a área de transferência:

        HTML:
        <div id="texto">TEXTO DE EXEMPLO</div>
        <button id="btn" onclick="Copiar()">COPIAR</button>

        JS:
        var CONTEUDO = document.querySelector("#texto").innerHTML

        function Copiar() {
            navigator.clipboard.writeText(CONTEUDO)
        }

        Ao clicar no botão, o texto da div será copiado para a área de transferência do windows, podendo ser colado.

        Obs: Para dispositivos mobile, talvez tenha problemas com este método. Por isso é preciso usar:

        var CONTEUDO = document.querySelector("#texto").innerHTML

        function Copiar() {
            CONTEUDO.select()
            CONTEUDO.setSelectionRange(0,99999)
            navigator.clipboard.writeText(CONTEUDO.value)
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////

        PARA MOSTRAR E ESCONDER UM CONTEUDO USANDO UMA ABA EM GAVETA (DROPDOWN)
        VIDEO: https://www.youtube.com/watch?v=IaZ6RF--r-E

    ////    Para mostrar/esconder verticalmente (cima - baixo):

        CSS:
        #conteudo {
            background-color: red;
            width: 200px;
            height: 200px;
            top: -200px;
            position: absolute;
            transition: all 0.2s;
        }

        #aba {
            top: 0px;
            position: absolute;
            transition: all 0.2s;
        }

        .mostrar_conteudo {
            top: 0px !important;
            transition: all 0.2s;
        }

        .mostrar_aba {
            top: 200px !important; 
            transition: all 0.2s;
        }

        HTML:
        <div id="conteudo"></div>
        <button id="aba" onclick="Toggle()">TOGGLE</button>

        JS:
        function Toggle() {
            document.querySelector("#conteudo").classList.toggle("mostrar_conteudo")
            document.querySelector("#aba").classList.toggle("mostrar_aba")
        }

        ///////

    ////    Para mostrar/esconder horizontalmente (esquerda - direita):

        CSS:
        #conteudo {
            background-color: red;
            width: 200px;
            height: 200px;
            left: -200px;
            position: absolute;
            transition: all 0.2s;
        }

        #aba {
            left: 0px;
            position: absolute;
            display: flex;
            flex-direction: column;
            transition: all 0.2s;
        }

        .mostrar_conteudo {
            left: 0px !important;
            transition: all 0.2s;
        }

        .mostrar_aba {
            left: 200px !important; 
            transition: all 0.2s;
        }

        HTML:
        <div id="conteudo"></div>
        <button id="aba" onclick="Toggle()">TOGGLE</button>

        JS:
        function Toggle() {
            document.querySelector("#conteudo").classList.toggle("mostrar_conteudo")
            document.querySelector("#aba").classList.toggle("mostrar_aba")
        }

        //////////////////////////////////////////////////////////////////////////////////////

    ////        PARA SABER SE UM ELEMENTO POSSUI UMA CLASSE
        VIDEO: https://www.youtube.com/watch?v=IaZ6RF--r-E

        CSS: 
        .vermelho {
            color: red;
        }

        HTML:
        <div id="texto" class="vermelho">TEXTO DE EXEMPLO</div>
        <button onclick="Checar()">CHECAR CLASSE</button>

        JS:
    function Checar() {
            if( document.querySelector("#texto").classList.contains("vermelho")) {
                document.querySelector("#texto").innerHTML = "A tag possui a classe vermelho"
            } 
        }

        /////

        Para saber a classe usando um EventListener:

        CSS: 
        .vermelho {
            color: red;
        }

        HTML:
        <div id="texto" class="vermelho">TEXTO DE EXEMPLO</div>
        <button id="btn">CHECAR CLASSE</button>

        JS:
        document.querySelector("#btn").addEventListener("click" , () => {
            if( document.querySelector("#texto").classList.contains("vermelho")) {
                document.querySelector("#texto").innerHTML = "A tag possui a classe vermelho"
            } 
        })

        ////////////////////////////////////////////////////////////////////////////////////////////////

    ////    PROMISE (SEM USAR FETCH, XMLHTTPREQUEST, AXIOS...)
        VIDEO: https://www.youtube.com/watch?v=1ZiDrKMZnws

        O Promise é nativo do Javascript.

        Sintaxe:
        var x = new Promise( (OK, ERRO) => função) 
        
        promise.then( (OK) => {
            instrução com OK
        }
        promise.catch( (ERRO) => {
            instrução com ERRO
        }


        /////

    ////    HTML: 
        <div id="texto"></div>

        JS:
        const texto = document.querySelector("#texto")

        let promise = new Promise( (resolve , reject) => {       
            let resultado = true
            setTimeout( () => {
                if(resultado) {
                    resolve("Deu tudo certo")
                } 
                else {
                    reject("Deu tudo errado")
                }
            }, 3000)     //*intervalo de 3 segundos
        })

        promise.then( (retorno) => {
            texto.innerHTML = retorno           //*retornará o resultado do resolve
        })
        promise.catch( (retorno) => {
            texto.innerHTML = retorno           //*retornará o resultado do reject
        })

        texto.innerHTML = "Aguardando os 3 segundos passar"

        ///////////////

    ////    Para executar a promise a hora que quiser:

        HTML: 
        <div id="texto"></div>
        <button id="btn" onclick="Clicar()">ATIVAR PROMISE</div>

        JS:
        const texto = document.querySelector("#texto")

        function Clicar() {
            texto.innerHTML = "Aguardando os 3 segundos passar"
            Promessa()
        }

        function Promessa() {
            let promise = new Promise( (resolve , reject) => {       
                let resultado = true
                setTimeout( () => {
                    if(resultado) {
                        resolve("Deu tudo certo")
                    } 
                    else {
                        reject("Deu tudo errado")
                    }
                }, 3000)     //*intervalo de 3 segundos
            })

            promise.then( (retorno) => {
                texto.innerHTML = retorno           
            })
            promise.catch( (retorno) => {
                texto.innerHTML = retorno           
            })
        }

        texto.innerHTML = "Aguardando clicar no botão"

        ///////////////

    ////    Para capturar o resultado da promise só depois que ela for chamada:

                HTML: 
        <div id="texto"></div>
        <button id="btn" onclick="Clicar()">ATIVAR PROMISE</div>

        JS:
        const texto = document.querySelector("#texto")

        function Clicar() {
            texto.innerHTML = "Aguardando os 3 segundos passar"
            Promessa()
                .then( (retorno) => {                 //*O then passa a ficar a associado à função Promessa()
                    texto.innerHTML = retorno           
                })
                .catch( (retorno) => {                //*O catch passa a ficar a associado à função Promessa()
                    texto.innerHTML = retorno           
                })
        }

        function Promessa() {
            let promise = new Promise( (resolve , reject) => {       
                let resultado = true
                setTimeout( () => {
                    if(resultado) {
                        resolve("Deu tudo certo")
                    } 
                    else {
                        reject("Deu tudo errado")
                    }
                }, 3000)     //*intervalo de 3 segundos
            })
            return promise      //*A função Promessa() passa a retornar a o objeto promise
        }

        texto.innerHTML = "Aguardando clicar no botão"

        /////////////////////////////////////////////////////////////////////////////////////////////

        PARA FAZER UM AUDIO TOCAR
        VIDEO: https://www.youtube.com/watch?v=HLZxacX8wyg

        const música = new Audio("nomedamusica.mp3")

        Para declarar quantas vezes o audio será tocado:

        música.loop = 3        //*A música tocará 3 vezes
        música.loop = -1        //*A música tocará sem parar (loop infinito)

        ///////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA CRIAR UMA CONTAGEM REGRESSIVA 
        VIDEO: https://www.youtube.com/watch?v=HLZxacX8wyg

        HTML:
        <button id="btn" onclick="Clicar()">Iniciar</button>
        <div id="countdown"></div>

        JS:
        var tempo = 10

        function Clicar() {
            if (tempo > 0) {
                document.getElementById('countdown').innerHTML = tempo
                tempo--
                setTimeout(Clicar, 1000)
            } 
            else {
                document.getElementById('countdown').innerHTML = "Tempo esgotado"
            }
        }

        /////////////

    ////    PARA CRIAR UMA CONTAGEM REGRESSIVA ATIVADA POR UM BOTÃO

        HTML:
        <input type="number" id="input" />
        <button id="btn" onclick="Clicar()">Iniciar</button>
        <div id="countdown"></div>  

        JS:
        function Clicar() {
            var tempo = Number(document.querySelector("#input").value)
            setInterval( () => {
                if (tempo > 0) {
                    document.querySelector("#countdown").innerHTML = tempo
                    tempo--
                } 
                else {
                    document.querySelector("#countdown").innerHTML = "Tempo esgotado" 
                }
            }, 1000)
        }

        ////

    ////    Para parar a contagem regressiva com um Botão

        HTML:
        <input type="number" id="input" />
        <button id="btn1" onclick="Clicar()">Iniciar</button>
        <button id="btn2">Parar</button>
        <div id="countdown"></div>  

        JS:
        function Clicar() {
            var tempo = Number(document.querySelector("#input").value)

            var intervalo = setInterval( () => {
                if (tempo > 0) {
                    document.querySelector("#countdown").innerHTML = tempo
                    tempo--
                } 
                else {
                    document.querySelector("#countdown").innerHTML = "Tempo esgotado" 
                }
            }, 1000)
            document.querySelector("#btn2").addEventListener("click" , () => {
                clearInterval(intervalo)
            }) 
        }

        ///////////////////////////////////////////////////////////////////////////////////////

        BIBLIOTECA MATH
        VIDEO: https://www.youtube.com/watch?v=oSXBD3g3TeM

    ////    PARA ACHAR A RAIZ QUADRADA DE UM NÚMERO

        var x = Math.sqrt(4)

        console.log(x)
        >>> 2

        ///////////////

    ////    PARA ARREDONDAR PARA CIMA UM NÚMERO DECIMAL

        var x = Math.ceil(4.7)
        
        console.log(x)
        >>> 5

        //////////////

    ////    PARA ARREDONDAR PARA BAIXO UM NÚMERO DECIMAL

        var x = Math.floor(4.7)
        
        console.log(x)
        >>> 4

        //////////////

    ////    PARA GERAR UM NÚMERO ALEATÓRIO        

        var x = parseInt(Math.random() * 10)

        console.log(x)
        
        Será gerado um número inteiro aleatório entre 0 e menor que 10 
        
        Caso queira que o 10 esteja incluído, é preciso adicionar 1:

        var x = Math.ceil(Math.random() * 11)

        console.log(x)

        ////

    ////    Pode-se usar também o Math.floor e o Math.ceil:

        var x = Math.ceil(Math.random() * 10)    //*O zero não é incluído  (Melhor opção)
        ou
        var x = Math.floor(Math.random() * 10)    //*O 10 não é incluído

        ////

    ////    Pode-se usar para gerar um número aleatório também o Math.round:

        var x = Math.round(Math.random() * 10)

        console.log(x)

        Desta forma, será gerado apenas números inteiros e os números 0 e 10 (max) serão incluídos.

        /////////////

        PARA ACHAR A POTÊNCIA DE UM NÚMERO (EXPONENCIAÇÃO)

        Sintaxe:
        Math.pow( base, potência)

        var x = Math.pow(2, 2)   //* 2 elevado a 2 => 2 ao quadrado
        console.log(x)
        >>> 4

        var x = Math.pow(2, 3)   //* 2 elevado a 3 => 2 ao cubo
        console.log(x)
        >>> 8

        /////////////////////////////////////////////////////////////////////////////////////////

        PARA OBTER A POSIÇÃO DO MOUSE
        VIDEO: https://www.youtube.com/watch?v=uXLXfU2qZ0E

        HTML:
        <div id="texto"></div>  

        JS:
        let posX = 0
        let posY = 0

        window.addEventListener( "mousemove" , (evento) => {
            posX = evento.clientX
            posY = evento.clientY
            document.querySelector("#texto").innerHTML = "Posição X: " + posX + " - Posição Y: " + posY 
        })

        /////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA UM OBJETO SEGUIR O CURSOR DO MOUSE
        VIDEO: https://www.youtube.com/watch?v=uXLXfU2qZ0E

        CSS:
        .olhos {
            display:flex;
            justify-content: right;
            align-items: right; 
            flex-direction: row;
            width: 200px;
            height: 200px;
            background-color: yellow;
            border-radius: 100%; 
            transform-origin: center center;  
        }

        .olho {
            width: 50px;
            height: 50px;
            margin: 25px;
            position: absolute;
            background-color: black;
            border-radius: 100%;
        }

        HTML:
        <div class="olhos">
            <div id="olho1" class="olho"></div>  
        </div>
        <div class="olhos">
            <div id="olho2" class="olho"></div>  
        </div>

        JS:
        const olhos = [...document.getElementsByClassName("olhos")]       //para mais de 1 elemento

        let posX = 0
        let posY = 0

        window.addEventListener( "mousemove" , (evento) => {
            posX = evento.clientX
            posY = evento.clientY

            const girar = Math.atan2(posY,posX) * 360 / Math.PI

            //document.querySelector(".olhos").style.transform = "rotate("+ girar + "deg)"   //para 1 elemento

            olhos.forEach( (elemento) => {                                    //para mais de 1 elemento
                elemento.style.transform = "rotate("+ girar + "deg)"
            })
        })

        //////////////////////////////////////////////////////////////////////////////////////////////////////

    ////   PARA SABER O TAMANHO DE TELA DE UM ELEMENTO
        VIDEO: https://www.youtube.com/watch?v=HrNZe2aA8oM

        HTML:
        <div id="ID" style="background-color: yellow; height: 200px;"></div>

        JS:
        let tamanhoX = document.getElementById("ID").offsetWidth
        let tamanhoY = document.getElementById("ID").offsetHeight

        console.log("Largura: " + tamanhoX + "px")
        console.log("Altura: " + tamanhoY + "px")

        Ao redimensionar o tamanho da tela, o valor da largura e altura do elemento mudará.

        //////////////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA REDIRECIONAR PARA OUTRA URL OU ARQUIVO
        VIDEO: https://www.youtube.com/watch?v=aAdw_U7uTyE

        Para redirecionar para outro arquivo:

        HTML:
        <button onclick="Redirecionar()">REDIRECIONAR</button>

        JS:
        function Redirecionar() {
            window.location="nomedoarquivo.html"
        }

        ////

        Para redirecionar para outra página URL:

        HTML:
        <button onclick="Redirecionar()">REDIRECIONAR</button>

        JS:
        function Redirecionar() {
            window.location="https://google.com"
        }

        Obs: É possivel usar também o assign:
        window.location.assign("https://google.com")

        /////

        Para redirecionar para outra página URL e remover a página anterior do histórico do browser:

        HTML:
        <button onclick="Redirecionar()">REDIRECIONAR</button>

        JS:
        function Redirecionar() {
            window.location.replace("https://google.com")
        }

        //////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA ATUALIZAR A PÁGINA ATUAL DO BROWSER (TECLA F5)
        VIDEO: https://www.youtube.com/watch?v=aAdw_U7uTyE

        HTML:
        <button onclick="Atualizar()">ATUALIZAR</button>

        JS:
        function Atualizar() {
            window.location.reload()
        }
        
        //////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA NAVEGAR PELO HISTÓRICO DO BROWSER
        VIDEO: https://www.youtube.com/watch?v=aAdw_U7uTyE
        
        Para ir para a URL anterior no histórico:

        HTML:
        <button onclick="Voltar()">VOLTAR</button>

        JS:
        function Voltar() {
            window.history.back()
        }

        Pode-se usar também:
        window.history.go(-1)  //*Para voltar 1 página
        window.history.go(-4)  //*Para voltar 4 páginas
        etc...

        ///

        Caso queira ir para a página seguinte no histórico:
        window.history.forward()
        
        Pode-se usar também:
        window.history.go(1)   //*Para ir 1 página à frente
        window.history.go(5)   //*Para ir 5 páginas à frente
        etc...

        //////

    ////    PARA SABER O NÚMERO DE PÁGINAS NO HISTÓRICO DO BROWSER
        VIDEO: https://www.youtube.com/watch?v=aAdw_U7uTyE         

        HTML:
        <button onclick="Tamanho()">TAMANHO</button>

        JS:
        function Tamanho() {
            console.log(window.history.length)
        }

        //////////////////////////////////////////////////////////////////////////////////

        PARA CANCELAR O SUBMIT DO FORMULÁRIO
        VIDEO: https://www.youtube.com/watch?v=aAdw_U7uTyE  

        <form onsubmit="event.preventDefault()">
            ....
            ....
        </form>

        //////////////////////////////////////////////////////////////////////////////////

        CAIXAS DE DIÁLOGO (MENSAGEM POP-UP) ALERT / CONFIRM / PROMPT

    ////    Para criar um alerta na tela:

        alert("Mensagem opcional")

        ////

    ////    Para mostrar uma mensagem na tela com os botões OK e Cancelar:

        confirm("Você está gostando?")

        Caso clique no botão OK, será retornado true.
        Caso clique no botão Cancelar, será retornado false.

        Para obter o resultado do botão clicado é só colocar em uma variável:

        var retorno = confirm("Você está gostando?")

        if (retorno == true) {
            console.log("Apertou o botão OK")
        }
        else {
            console.log("Apertou o botão cancelar")
        }

        /////

    ////   Para criar uma mensagem na tela com um campo de input/prompt de texto com os botões OK e Cancelar:

        var x = prompt("Digite algo aqui")

        console.log(x)

        Caso esteja trabalhando com números, é preciso converter a string para números com Number(), parseInt(), eval(), etc...

        var x = prompt("Digite um número")

        console.log(Number(x) + 10)
        ou
        console.log(eval(x) + 10)
        ou
        console.log(parseInt(x) + 10)

        ///

        Caso o botão Cancelar seja apertado, pode-se criar uma mensagem com essa condição:

        var numero = prompt("Digite um número")
        if (numero == null) {
            console.log("Apertou o botão cancelar")
        } else {
            console.log("O número digitado foi o " + numero)
        }

        /// 

        Para adicionar um placeholder no prompt:

        prompt("Digite um número", "Mensagem placeholder que fica no campo de texto")

        ////////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA ACIONAR A IMPRESSÃO UMA PÁGINA HTML (IMPRIMIR A TELA OU O CONTEÚDO)
        VIDEO: https://www.youtube.com/watch?v=z8CSuoFX7Ko

        Para imprimir a tela:

        window.print()

        Ao acionar este comando, a caixa de diálogo de impressão do browser será aberta.

        ///

        Para imprimir um conteúdo de um elemento em uma nova aba:

        HTML:
        <div id="tabela">
            <table>
                <tr>
                    <td>A1</td>
                    <td>B1</td>
                    <td>C1</td>
                    <td>D1</td>
                </tr>
                <tr>
                    <td>A2</td>
                    <td>B2</td>
                    <td>C2</td>
                    <td>D2</td>
                </tr>
                <tr>
                    <td>A3</td>
                    <td>B3</td>
                    <td>C3</td>
                    <td>D3</td>
                </tr>
            </table>
        </div>

        <button onclick="Imprimir()">IMPRIMIR</button>

        JS:
        function Imprimir() {
            let estilo = "<style>";
            estilo += "table {width: 100%; font: 25px Calibri; color: red;}";
            estilo += "table, th, td {border: solid 2px red; border-collapse: collapse; padding: 4px 8px; text-align: center;}";
            estilo += "</style>";

            const win = window.open('', '', 'height=700, width=700');    

            win.document.write("<html>");
            win.document.write("<head>");
            win.document.write("<title>Título da página de impressão</title>");
            win.document.write(estilo);
            win.document.write("</head>");
            win.document.write("<body>");
            win.document.write(document.querySelector("#tabela").innerHTML);
            win.document.write("</body>");
            win.document.write("</html>");

            win.print()
            win.close()   //*opcional para fechar a janela anterior
        }

        ////////////////////////////////////////////////////////////////////////////////////////////

        PARA CRIAR UMA FUNÇÂO SYMBOL
        VIDEO: https://www.youtube.com/watch?v=gQ-9GmXxBfk

        A função symbol gera um valor (símbolo de identificação) único que nunca irá se repetir.
        Ele é um identificador interno e portanto não pode ser usado no DOM.

    ////    Para gerar uma função Symbol:

        var teste = Symbol()

        /////

    ////    Para provar que os valores da função Symbol são únicos:

        var x = Symbol()
        var y = Symbol()

        console.log(x == y)
        >>> false

        /////

    ////    A função Symbol é do tipo symbol:

        var x = Symbol()

        console.log(typeof(x))
        >>> symbol

        ////

    ////    Para criar um identificador global do Symbol:

        var x = Symbol.for("identificador")

        //

        Pode-se criar Symbols com o mesmo identificador e eles passarão a ser iguais:

        var x = Symbol.for("teste")
        var y = Symbol.for("teste")

        console.log(x == y)
        >>> true

        //

    ////    Para imprimir a chave (identificador) do Symbol:

        var variavel = Symbol.for("teste")

        console.log(Symbol.keyFor(variavel))
        >>> teste

        Outra forma seria usar o description:

        console.log(variavel.description)
        >>> teste

        //////////

    ////    PARA CRIAR UMA CLASSE QUE CONTENHA UM ATRIBUTO COM A FUNÇÃO SYMBOL
        VIDEO: https://www.youtube.com/watch?v=9-DazZq-GBM

        class Pessoa {
            constructor(nome) {
                this.nome = nome
                this.id = Symbol()
            }
        }

        var objPessoa = new Pessoa("Maria")

        console.log(objPessoa)
        >>> Pessoa {nome: 'Maria', id: Symbol()}

        Com isso, foi criado um novo objeto com nome "Maria" e id único "Symbol()"

        ////

        Para diferenciar os Symbols:

        class Pessoa {
            constructor(nome) {
                this.nome = nome
                this.id = Symbol()
            }
        }

        var objPessoa = [new Pessoa("Maria"), new Pessoa("José"), new Pessoa("Jesus")]

        var filtro = objPessoa[1].id

        var p = objPessoa.filter ( (elemento) => {
            return elemento.id == filtro               //*retornará apenas o objeto igual a objPessoa[1].id
        })

        console.log(p[0].nome)
        >>> José

        Ao filtrar pelo id, foi retornado apenas o segundo objeto de nome José.
        Mesmo que todos os objetos tivessem o mesmo nome (ou outro atributo), ele possuíriam id únicos completamente diferentes um do outro.

        ///////////////////////////////////////////////////////////////////////////

    ////    PARA OCULTAR UM ATRIBUTO DE UM OBJETO LITERAL USANDO A FUNÇÃO SYMBOL
        VIDEO: https://www.youtube.com/watch?v=AieFDXRPQhw

        const nome = Symbol("nome do atributo quando está oculto")        //*É colocado entre parenteses o nome que será apresentado para o atributo oculto

        const Pessoa = {
            [nome] : "Bruno"      //*O atributo é colocado entre colchetes
        }

        console.log(Pessoa)
        >>> {Symbol(nome do atributo quando está oculto): 'Bruno'}

        Com isso, o atributo nome passa a ficar oculto, passando a ser chamado do que foi declarado dentro dos parenteses do Symbol.

        ////

        Caso seja solicitado para imprimir o valor do atributo, será apresentado como undefined:

        console.log(Pessoa.nome)
        >>> undefined

        ///

        Para ser impresso o atributo corretamente, é necessário colocar o atributo entre colchetes:

        console.log(Pessoa[nome])
        >>> Bruno

        /////////////////////////////////////////////////////////////////////////////////////////////////

    ////    DESESTRUTURAÇÃO DE UM ARRAY OU UM OBJETO
        VIDEO: https://www.youtube.com/watch?v=aEzzUqIU1IE
        VIDEO: https://www.youtube.com/watch?v=ZVxWYR2hR7M

        Exemplo 1:

        let a, b, c, d

        ({a,b,c,d} = {a: "Abelha", b: "Boi" , c: "Cachorro", d: "Dinossauro"})

        console.log(a)
        console.log(b)
        console.log(c)
        console.log(d)
        >>> Abelha
        >>> Boi
        >>> Cachorro
        >>> Dinossauro

        ////

    ////    Exemplo 2:

        let objeto = {nome:"Bruno", sexo:"Masculino"}

        let {nome , sexo} = objeto

        console.log(nome)
        console.log(sexo)
        >>> Bruno
        >>> Masculino

        ////

    ////    Exemplo 3:

        let numeros = [10, 20, 30, 40]

        let[a,b,c,d] = numeros

        console.log(a)
        console.log(b)
        console.log(c)
        console.log(d)
        >>> 10
        >>> 20
        >>> 30
        >>> 40

        /////

    ////    Exemplo 4:

        let a,b,c,d

        [a, b=0, c=0, d=0] = [10]

        console.log(a)
        console.log(b)
        console.log(c)
        console.log(d)
        >>> 10
        >>> 0
        >>> 0
        >>> 0

        /////

    ////    Exemplo 5:

        function numeros() {
            return [10, 20, 30, 40]
        } 

        let[a,b,c,d] = numeros()

        console.log(a)
        console.log(b)
        console.log(c)
        console.log(d)
        >>> 10
        >>> 20
        >>> 30
        >>> 40

        /////

    ////    Exemplo 6:

        function numeros() {
            return [10, 20, 30, 40]
        } 

        let[a , b , , c ] = numeros()     //*foi adicionado um espaço entre b e c para pular o valor 30

        console.log(a)
        console.log(b)
        console.log(c)
        >>> 10
        >>> 20
        >>> 40

        /////

        Exemplo 7:

        let frase = "Curso de Javascript"

        let[...texto] = frase.split(" ")     //*a variavel texto usou o spread e recebeu todos os elementos, criando um array

        console.log(texto)
        >>> ['Curso', 'de', 'Javascript']

        /////

        Exemplo 8:

        let frase = "Curso de Javascript"

        let[texto1, texto2, texto3] = frase.split(" ")     

        console.log(texto1)
        console.log(texto2)
        console.log(texto3)
        >>> Curso
        >>> de
        >>> Javascript

        ///////////

    ////    Utilizando o operador spread para receber o resto dos valores:

        let numeros = [1, 2, 3, 4, 5, 6, 7]

        let[a , b , c , ...d] = numeros         //*a variavel d usou o spread e herdará o resto dos valores

        console.log(a)
        console.log(b)
        console.log(c)
        console.log(d)
        >>> 1
        >>> 2
        >>> 3
        >>> [4, 5, 6, 7]

        /////////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA CRIAR UMA CLASSE STRING USANDO O STRING()
        VIDEO: https://www.youtube.com/watch?v=lv4hFkirhps

        var nome = new String("Bruno")      //*O método String() cria uma string de texto

        console.log(nome)
        >>> String {'Bruno'}
        >>>    0: "B"
        >>>    1: "r"
        >>>    2: "u"
        >>>    3: "n"
        >>>    4: "o"
        >>>    length: 5

        /////////////

    ////    PARA IMPRIMIR O VALOR DE UM OBJETO STRING USANDO O VALUEOF
        VIDEO: https://www.youtube.com/watch?v=j9-iadUDGkI

        var nome = new String("Bruno")

        console.log(nome.valueOf())
        >>> Bruno

        ////////////////////////////////////////

    ////    PARA OBTER INFORMAÇÕES DE UMA STRING USANDO O MATCH()
        VIDEO: https://www.youtube.com/watch?v=z0EnAoH09oU

        var animal = "girafa"

        var x = animal.match("f")

        console.log(x)
        >>> ['f', index: 4, input: 'girafa', groups: undefined]
                0: "f"
                groups: undefined
                index: 4
                input: "girafa"
                length: 1

        O índice que ele retorna é o primeiro caractere que ele encontrar na string.

        ///////////////////////////////////////////////////////////////

    ////    PARA CONVERTER ALGO PARA STRING USANDO O TOSTRING()
        VIDEO: https://www.youtube.com/watch?v=j9-iadUDGkI

        var numero = 132

        var x = numero.toString()

        console.log(x)
        >>> 132          
        
        O número 132 passou a ser uma string de texto e não um number:
        console.log(typeof(x))
        >>> string

        Exemplo usando um valor booleano:

        var boolean = true

        var x = boolean.toString()

        console.log(x)
        >>> true      

        O booleano true passou a ser uma string de texto.

        ////////////////////////////////////////

    ////    Para saber um caractere de uma string através de sua posição usando o charAt():

        var nome = "Bruno"

        console.log(nome.charAt(2))
        >>> u 

        O caractere u está na posição 2 da string Bruno

        /////////////////////////////////

    ////    Para saber a posição do primeiro caractere de uma string que aparecer usando o indexOf():

        var nome = "Macaca"

        console.log(nome.indexOf("a"))
        >>> 1

        O primeiro caractere "a" está na posição 1 da string Macaca

        ///////////

    ////    Para saber a posição do último caractere de uma string que aparecer usando o indexOf():

        var nome = "Macaca"

        console.log(nome.lastIndexOf("a"))
        >>> 5

        O último caractere "a" está na posição 5 da string Macaca

        ///        

    ////    Pode-se usar também sílabas:

        var animal = "macaco"

        console.log(animal.indexOf("co"))
        >>> 4

        A sílaba co começa com a letra c que está na posição 4

        ////

    ////    Caso não tenha nenhum caractere solicitado, será retorna -1:
        
        var animal = "macaco"

        console.log(animal.indexOf("e"))
        >>> -1

        ///////////////////////////////////////

    ////    Para mostrar o código ASCII de um caractere em uma string usando o charCodeAt():

        var nome = "Bruno"

        console.log(nome.charCodeAt(2))
        >>> 117

        O código ASCII do caractere u que está na posição 2 da string é o 117

        ///////////////////////////////////////

    ////    Para mostrar um caractere de acordo com o seu código ASCII usando o String.fromCodePoint():
        VIDEO: https://www.youtube.com/watch?v=D8e4ucbHFwA
        NOVO MÉTODO / MÉTODO RECENTE

        console.log(String.fromCodePoint(117))
        >>> u

        O caractere u possui o código ASCII número 117

        ///////////////////////////////////////

    ////    Para comparar duas strings e saber se são iguais
        Video: https://www.youtube.com/watch?v=lufkL0FnJy0

        Se tentar comparar duas strings da forma tradicional, dará certo:
        var x = "teste"
        var y = "teste"

        console.log(x == y)
        >>> true

        Porém, se tentar comparar dois objetos strings criados com String(), não dará certo:
        var x = new String("teste")
        var y = new String("teste")

        console.log(x == y)
        >>> false

        Portanto, para comparar dois objetos strings, é necessário usar localeCompare():
        var x = new String("teste")
        var y = new String("teste")

        console.log(x.localeCompare(y))
        >>> 0

        A comparação acima retornou o número 0, indicando que os dois objetos string são iguais.
        Caso fossem diferente, retornariam os número 1 e -1 (em alguns browsers pode retornar 2 e -2).
        Retornará -1 (ou -2) se a primeira string vier antes na ordem alfabética do que a segunda string.
        Retornará 1 (ou 2) se a primeira string vier depois na ordem alfabética do que a segunda string.

        var x = new String("a")
        var y = new String("c")

        console.log(x.localeCompare(y))
        >>> -1
        A letra a vem antes da letra c
        
        var x = new String("d")
        var y = new String("b")

        console.log(x.localeCompare(y))
        >>> 1
        A letra d vem depois da letra b

        ////

        É possível usar o localeCompare() diretamente, sem usar mais variáveis:

        var x = "gata".localeCompare("gato")

        console.log(x)
        >>> -1

        ////////////////////////////////////

    ////    PARA SUBSTITUIR UM CARACTERE DE UMA STRING POR OUTRO USANDO O REPLACE()
        VIDEO: https://www.youtube.com/watch?v=lufkL0FnJy0
        
        var animal = "gato"
        
        console.log(animal.replace("g","p"))
        >>> pato

        outro exemplo:

        var animal = "gato preto"

        console.log(animal.replace("gato","cachorro"))
        >>> cachorro preto

        /////////////////////////////////////

    ////    PARA PROCURAR ALGO EM UMA STRING USANDO O SEARCH()
        VIDEO: https://www.youtube.com/watch?v=lufkL0FnJy0

        var letras = "abcdefgh"

        console.log(letras.search("c"))
        >>> 3

        A letra c está na posição 2

        ////

        O search retorna a primeira ocorrência que achar:

        var animal = "macaco"

        console.log(animal.search("a"))
        >>> 1

        A primeira letra "a" na palavra "macaco" está na posição 1

        ////

        Caso não encontre nada ele retornará o valor -1:

        var animal = "macaco"

        console.log(animal.search("d"))
        >>> -1

        ////

        No caso de mais de uma palavra, tem que se levar em conta que o espaço conta como 1 caractere:

        var animal = "gato preto"

        console.log(animal.search("p"))
        >>> 5

        //////////////////////////////////////////////////////////////

    ////    PARA SEPARAR CARACTERES DE UMA STRING USANDO O SLICE()
        VIDEO: https://www.youtube.com/watch?v=lufkL0FnJy0

        sintaxe:
        variavel.slice(inicio , fim+1)


        var animal = "macaco"

        console.log(animal.slice(2,4))
        >>> ca

        posição 0 = m
        posição 1 = a
        posição 2 = c  inicio (2)
        posição 3 = a  fim + 1   (3 + 1 = 4)
        posição 4 = c
        posição 5 = o

        ///////////////////////////////////////////////////////////////

    ////    PARA SEPARAR CARACTERES DE UMA STRING USANDO O SUBSTRING()
        VIDEO: https://www.youtube.com/watch?v=j9-iadUDGkI

        sintaxe:
        variavel.substring(inicio , fim+1)

        var animal = "macaco"

        console.log(animal.substring(2,4))
        >>> ca

        posição 0 = m
        posição 1 = a
        posição 2 = c  inicio (2)
        posição 3 = a  fim + 1   (3 + 1 = 4)
        posição 4 = c
        posição 5 = o

        //////////////////////////////////////////////////////////////

    ////    PARA SEPARAR CARACTERES DE UMA STRING USANDO O SUBSTR()
        VIDEO: https://www.youtube.com/watch?v=j9-iadUDGkI

        sintaxe:
        variavel.substr(posiçãoinicial , tamanho)


        var animal = "gato marrom"

        var x = animal.substr(5 , 6)

        console.log(x)
        >>> marrom

        A letra m está na posição 5 e a palavra marrom possui 6 caracteres de tamanho

        ///////////////////////////////////////////////////////////////

    ////    PARA SEPARAR UMA STRING E CRIAR UM ARRAY USANDO O SPLIT
        VIDEO: https://www.youtube.com/watch?v=lufkL0FnJy0

        var nome = "Carlos Alberto Monteiro"

        var x = nome.split(" ")    //*Para separar onde houver um espaço
        console.log(x)
        >>> ['Carlos', 'Alberto', 'Monteiro']

        Com isso, a string foi separada onde havia um espaço e foi criado um array com 3 elementos.

        Note que o espaço foi removido e não aparece nos elementos do array:

        var fruta = "abacaxi"

        var x = fruta.split("c")
        console.log(x)
        >>> ['aba', 'axi']

        //////////////////////////////////////////////////////////////////

    ////    PARA TRANSFORMAR UMA STRING EM LETRA MAIÚSCULA USANDO O TOUPPERCASE()

        Sintaxe:
        VARIAVEL.toUpperCase()
        ou
        VARIAVEL.toLocaleUpperCase()


        var animal = "macaco"

        console.log(animal.toUpperCase())
        >>> MACACO

        //////////////////////////////////////////////////////////////
        
    ////    PARA TRANSFORMAR UMA STRING EM LETRA MINÚSCULA USANDO O TOLOWERCASE()

        Sintaxe:
        VARIAVEL.toLowerCase()
        ou
        VARIAVEL.toLocaleLowerCase()

        
        var animal = "MACACO"

        console.log(animal.toLowerCase())
        >>> macaco

        //////////////////////////////////////////////////////////////

    ////    PARA SABER SE UMA STRING COMEÇA COM UM OU MAIS CARACTERES USANDO O STARTSWITH()
        VIDEO: https://www.youtube.com/watch?v=D8e4ucbHFwA
        NOVO MÉTODO / MÉTODO RECENTE

        var nome = "Bruno"

        var x = nome.startsWith("B")

        console.log(x)
        >>> true

        Ele não diferencia letra maiúscula de minúscula:

        var nome = "Bruno"

        var x = nome.startsWith("b")

        console.log(x)
        >>> false

        Para isso é preciso usar uma condição if usando || (ou):

        var nome = "bruno"

        if (nome.startsWith("B") || nome.startsWith("b"))  {
            console.log("Verdadeiro")
        }     
        else {
            console.log("Falso")
        }
        >>> Verdadeiro

        ///

        Pode ser usado para mais de 1 caractere:

        var animal = "gato preto"

        var x = animal.startsWith("gato")

        console.log(x)
        >>> true

        //////////////////////////////////////////////////////////////

    ////    PARA SABER SE UMA STRING TERMINA COM UM OU MAIS CARACTERES USANDO O ENDSWITH()
        VIDEO: https://www.youtube.com/watch?v=D8e4ucbHFwA
        NOVO MÉTODO / MÉTODO RECENTE

        var nome = "Bruno"

        var x = nome.endsWith("o")

        console.log(x)
        >>> true

        As mesmas regras do método .startsWith() se aplicam ao .endsWith()

        //////////////////////////////////////////////////////////

    ////    PARA SABER SE EXISTE UM CARACTERE DENTRO DE UMA STRING USANDO O INCLUDES()
        VIDEO: https://www.youtube.com/watch?v=D8e4ucbHFwA
        NOVO MÉTODO / MÉTODO RECENTE
        
        var nome = "Bruno"

        var x = nome.includes("u")

        console.log(x)
        >>> true

        Ele não diferencia letra maiúscula de minúscula:

        var nome = "Bruno"

        var x = nome.includes("U")

        console.log(x)
        >>> false

        Para isso é preciso usar uma condição if usando || (ou):

        var nome = "Bruno"

        if (nome.includes("U") || nome.includes("u"))  {
            console.log("Verdadeiro")
        }     
        else {
            console.log("Falso")
        }
        >>> Verdadeiro

        ///

        Pode ser usado para mais de 1 caractere:

        var animal = "gato preto"

        var x = animal.includes("pre")

        console.log(x)
        >>> true

        ////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA REPETIR UMA STRING VÁRIAS VEZES USANDO O REPEAT()
        VIDEO: https://www.youtube.com/watch?v=D8e4ucbHFwA
        NOVO MÉTODO / MÉTODO RECENTE

        var nome = "Bruno"

        var x = nome.repeat(4)

        console.log(x)
        >>> BrunoBrunoBrunoBruno

        ////

        É preciso usar junto com um espaço:

        var nome = "Bruno "    //*adicionou um espaço no final

        var x = nome.repeat(4)

        console.log(x)
        >>> Bruno Bruno Bruno Bruno

        ////

        Caso queira usar com uma quebra de linha no console.log:
        var nome = "Bruno\n"    //*adicionou uma quebra 

        var x = nome.repeat(4)

        console.log(x)
        >>> Bruno
        >>> Bruno 
        >>> Bruno 
        >>> Bruno

        ////

        Caso queira usar com uma quebra de linha no DOM do HTML:
        var nome = "Bruno<br/>"    //*adicionou uma quebra 

        var x = nome.repeat(4)

        document.write(x)
        >>> Bruno
        >>> Bruno 
        >>> Bruno 
        >>> Bruno

        ////////////////////////////////////////////////////////////////////////////////////////////

        ANIMAÇÕES COM JAVASCRIPT
        VIDEO: https://www.youtube.com/watch?v=EmJqGg-PiZI
        
    ////    Para movimentar um elemento para a direita:
        
        CSS:
        .caixa {
            background-color: red;
            width: 100px;
            height: 100px;
            position: absolute;
        }

        HTML:
        <button onclick="Mover()">MOVER</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        function Mover() {
            caixa.style.left = "150px"
        }

        ////

    ////    Para movimentar um elemento para a esquerda:
        
        CSS:
        .caixa {
            background-color: red;
            width: 100px;
            height: 100px;
            position: absolute;
            left: 150px;
        }

        HTML:
        <button onclick="Mover()">MOVER</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        function Mover() {
            caixa.style.left = "0px"
        }        

        ///////////

    ////    Para movimentar um elemento de pouco em pouco:
        
        CSS:
        .caixa {
            background-color: red;
            width: 100px;
            height: 100px;
        }

        HTML:
        <button onclick="Mover()">MOVER</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        const init = () => {
            caixa.style="position: relative; left: 0px;"
        }

        function Mover() {
            let pos = parseInt(caixa.style.left)
            pos += 10
            caixa.style = `position:relative; left: ${pos}px`
        }

        window.onload=init
        ou 
        window.addEventListener("load", init())

        ///

        Forma resumida da função Mover() no Javascript:

        function Mover() {
            caixa.style.left = parseInt(caixa.style.left) + 10 + "px"
        }

        Para ir para esquerda é só subtrair o valor:

        function Mover() {
            caixa.style.left = parseInt(caixa.style.left) - 10 + "px"
        }

        ///////////

    ////    Para mover um elemento automaticamente de tempos em tempos (intervalo):
        VIDEO: https://www.youtube.com/watch?v=sTE06Gcaut0

        CSS:
        .caixa {
            background-color: red;
            width: 100px;
            height: 100px;
        }

        HTML:
        <button onclick="Esquerda()">ESQUERDA</button>
        <button onclick="Direita()">DIREITA</button>
        <button onclick="Parar()">PARAR</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        let parada = null

        const init = () => {
            caixa.style="position: relative; left: 0px;"
        }

        function Direita() {
            clearInterval(parada)
            parada = setInterval( () => {
                caixa.style.left = parseInt(caixa.style.left) + 10 + "px"
            },50)
        }

        function Esquerda() {
            clearInterval(parada)
            parada = setInterval( () => {
                caixa.style.left = parseInt(caixa.style.left) - 10 + "px"
            },50)
        }

        function Parar() {
            clearInterval(parada)
        }

        window.onload=init
        ou 
        window.addEventListener("load", init())

        //////////

    ////    Outra forma de mover em um intervalo seria usando recursividade com o setTimeout:
        VIDEO: https://www.youtube.com/watch?v=McPSJ1UdGoc

        CSS:
        .caixa {
            background-color: red;
            width: 100px;
            height: 100px;
        }

        HTML:
        <button onclick="Esquerda()">ESQUERDA</button>
        <button onclick="Direita()">DIREITA</button>
        <button onclick="Parar()">PARAR</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        let parada = null

        const init = () => {
            caixa.style="position: relative; left: 0px;"
        }

        function move(dir) {
            caixa.style.left = parseInt(caixa.style.left) + (10 * dir) + "px"
            parada = setTimeout(move,50,dir)
        }


        function Direita() {
            clearTimeout(parada)
            move(1)
        }

        function Esquerda() {
            clearTimeout(parada)
            move(-1)
        }

        function Parar() {
            clearTimeout(parada)
        }

        window.onload=init
        ou 
        window.addEventListener("load", init())


        /////////////////////////////////////////////////////

        PARA MOVER UM ELEMENTO PUXANDO COM O MOUSE

        HTML:
        <div id="draggable"></div>

        CSS:
        #draggable {
            position: absolute;
            width: 100px;
            height: 100px;
            background-color: #3498db;
            cursor: move;
            user-select: none;
        }

        JS:
        // JavaScript implementation
        let isDragging = false;
        let currentX;
        let currentY;
        let initialX;
        let initialY;
        let xOffset = 0;
        let yOffset = 0;

        const draggable = document.getElementById("draggable");

        // When the mouse button is pressed
        function dragStart(e) {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;

            if (e.target === draggable) {
                isDragging = true;
            }
        }

        // While dragging
        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                
                currentX = e.clientX - initialX;
                currentY = e.clientY - initialY;

                xOffset = currentX;
                yOffset = currentY;

                setTranslate(currentX, currentY, draggable);
            }
        }

        // When the mouse button is released
        function dragEnd(e) {
            initialX = currentX;
            initialY = currentY;
            isDragging = false;
        }

        // Update element position
        function setTranslate(xPos, yPos, el) {
            el.style.transform = `translate(${xPos}px, ${yPos}px)`;
        }

        // Add event listeners
        document.addEventListener("mousedown", dragStart);
        document.addEventListener("mousemove", drag);
        document.addEventListener("mouseup", dragEnd);

        /////////////////////////////////////////////////////

    ////    PARA LIMITAR A ÁREA DE ATUAÇÃO DE UMA ANIMAÇÃO
        VIDEO: https://www.youtube.com/watch?v=30ikUIS1Wg4

        CSS:
        *{
            padding: 0px;
            margin: 0px;
        } 

        .caixa {
            background-color: red;
            height: 100px;
            width: 100px;
        }

        HTML:
        <button onclick="Direita()">DIREITA</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        let tamanhomaximo = window.innerWidth - caixa.offsetWidth

        const init = () => {
            caixa.style="position: relative; left: 0px; "
        }

        function Direita() {
            if(parseInt(caixa.style.left) <= tamanhomaximo) {
                caixa.style.left = parseInt(caixa.style.left) + 10 + "px"
            } 
        }

        window.onload=init

        window.addEventListener("resize", () => {
            tamanhomaximo = window.innerWidth - caixa.offsetWidth
        })

        ///////

        CSS:
        .caixa {
            background-color: red;
            height: 100px;
            width: 100px;
        }

        HTML:
        <button onclick="Esquerda()">ESQUERDA</button>
        <button onclick="Direita()">DIREITA</button>
        <button onclick="Parar()">PARAR</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        let tamanhomaximo = window.innerWidth - caixa.offsetWidth         //*ou window.innerWidth - caixa.style.width
        let parada = null

        const init = () => {
            caixa.style="position: relative; left: 0px;"
        }

        function Direita() {
            clearInterval(parada)
            parada = setInterval( () => {
                if(parseInt(caixa.style.left) <= tamanhomaximo) {
                    caixa.style.left = parseInt(caixa.style.left) + 1 + "px"
                } 
                else {
                    clearInterval(parada)
                }
            },3)
        }

        function Esquerda() {
            clearInterval(parada)
            parada = setInterval( () => {
                if(parseInt(caixa.style.left) >= 0) {
                    caixa.style.left = parseInt(caixa.style.left) - 1 + "px"
                } 
                else {
                    clearInterval(parada)
                }
            },3)
        }

        function Parar() {
            clearInterval(parada)
        }

        window.onload=init

        window.addEventListener("resize", () => {
            tamanhomaximo = window.innerWidth - caixa.offsetWidth         //*ou window.innerWidth - caixa.style.width
        })

        //////////////////////////////////////////////////////////////

    ////    Para mover para a esquerda e para a direita automaticamente:
        VIDEO: https://www.youtube.com/watch?v=z59dAeCMv2I

        
        CSS:
        *{
            padding: 0px;
            margin: 0px;
        } 

        .caixa {
            background-color: red;
        }

        HTML:
        <button onclick="Mover()">MOVER</button>
        <button onclick="Parar()">PARAR</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        const init = () => {
            caixa.style="position: relative; left: 0px; width: 100px; height: 100px;"
            tamanhomaximo = window.innerWidth - caixa.offsetWidth
        }

        let tamanhomaximo = null
        let parada = null
        let dir = 0

        function Direction() {
                if(parseInt(caixa.style.left) >= tamanhomaximo) {
                    dir = -1
                } 
                else if(parseInt(caixa.style.left) <= 0) {
                    dir = 1
                }
                caixa.style.left = parseInt(caixa.style.left) + (10 * dir) + "px"
                parada = setTimeout(Direction,20)
            
        }

        function Mover() {
            Direction()
        }

        function Parar() {
            clearInterval(parada)
        }

        window.onload=init

        window.addEventListener("resize", () => {
            tamanhomaximo = window.innerWidth - caixa.offsetWidth
        })

        ////////////////////////////////////////////////////////////////

    ////    PARA AUMENTAR OU DIMINUIR O TAMANHO DE UM ELEMENTO COM UM BOTÃO
        VIDEO: https://www.youtube.com/watch?v=z59dAeCMv2I

        CSS:
        .caixa {
            background-color: red;
        }

        HTML:
        <button onclick="Aumentar()">AUMENTAR</button>
        <button onclick="Diminuir()">DIMINUIR</button>
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        function init() {
            caixa.style = "position: relative; left: 0px; width: 100px; height: 100px;"
        }

        function Aumentar() {
            caixa.style.width = parseInt(caixa.style.width) + 10 + "px"
            caixa.style.height = parseInt(caixa.style.height) + 10 + "px"
        }

        function Diminuir() {
            caixa.style.width = parseInt(caixa.style.width) - 10 + "px"
            caixa.style.height = parseInt(caixa.style.height) - 10 + "px"
        }

        window.onload = init

        //////////////////////////////////////////////////////////////////////////

        PARA ANIMAR UM ELEMENTO USANDO AS TECLAS DO TECLADO
        VIDEO: https://www.youtube.com/watch?v=z59dAeCMv2I

        CSS:
        .caixa {
            background-color: red;
        }

        HTML:
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        function init() {
            caixa.style = "position: relative; left: 0px; width: 100px; height: 100px;"
        }

        window.onload = init

        window.addEventListener("keydown",(evento) => {
            if(evento.code === "ArrowUp") {
                caixa.style.width = parseInt(caixa.style.width) + 10 + "px"
                caixa.style.height = parseInt(caixa.style.height) + 10 + "px"
            }
            if(evento.code === "ArrowDown") {
                caixa.style.width = parseInt(caixa.style.width) - 10 + "px"
                caixa.style.height = parseInt(caixa.style.height) - 10 + "px"
            }
        })

        ///////
        
        CSS:
        .caixa {
            background-color: red;
        }

        HTML:
        <div class="caixa"></div>

        JS:
        const caixa = document.querySelector(".caixa")

        function init() {
            caixa.style = "position: relative; left: 0px; top: 0px; width: 100px; height: 100px;"
        }

        window.onload = init

        window.addEventListener("keydown",(evento) => {
            if(evento.code === "ArrowLeft") {
                caixa.style.left = parseInt(caixa.style.left) - 10 + "px"
            }
            if(evento.code === "ArrowRight") {
                caixa.style.left = parseInt(caixa.style.left) + 10 + "px"
            }
            if(evento.code === "ArrowUp") {
                caixa.style.top = parseInt(caixa.style.top) - 10 + "px"
            }
            if(evento.code === "ArrowDown") {
                caixa.style.top = parseInt(caixa.style.top) + 10 + "px"
            }
        })

        ////

        Obs: Pode-se colocar limites para evitar que o elemento ultrapasse o tamanho da tela:

        const caixa = document.querySelector(".caixa")

        function init() {
            caixa.style = "position: relative; left: 0px; top: 0px; width: 100px; height: 100px;"
            larguramaxima = window.innerWidth - caixa.offsetWidth
        }

        let larguramaxima = null
        let alturamaxima = 500

        window.addEventListener("keydown",(evento) => {
            if(evento.code === "ArrowLeft") {
                if (parseInt(caixa.style.left) <= 0) {
                    caixa.style.left = 0 + "px"
                }
                else if (parseInt(caixa.style.left) > 0){
                    caixa.style.left = parseInt(caixa.style.left) - 10 + "px"
                }
            }
            if(evento.code === "ArrowRight") {
                if (parseInt(caixa.style.left) >= larguramaxima) {
                    caixa.style.left = larguramaxima + "px"
                }
                else if (parseInt(caixa.style.left) < larguramaxima){
                    caixa.style.left = parseInt(caixa.style.left) + 10 + "px"
                }
            }
            if(evento.code === "ArrowUp") {
                if (parseInt(caixa.style.top) <= 0) {
                    caixa.style.top = 0 + "px"
                }
                else if (parseInt(caixa.style.top) > 0){
                    caixa.style.top = parseInt(caixa.style.top) - 10 + "px"
                } 
            }
            if(evento.code === "ArrowDown") {
                if (parseInt(caixa.style.top) >= larguramaxima) {
                    caixa.style.top = larguramaxima + "px"
                }
                else if (parseInt(caixa.style.top) < alturamaxima){
                    caixa.style.top = parseInt(caixa.style.top) + 10 + "px"
                }
            }
        })

        window.onload = init

        window.addEventListener("resize", () => {
            larguramaxima = window.innerWidth - caixa.offsetWidth
        })

        ////////////////////////////////////////////////////////////////

    ////    PARA MOVER E PARAR UM ELEMENTO COM BOTÕES USANDO O REQUESTANIMATIONFRAME
        VIDEO: https://www.youtube.com/watch?v=gMmDeyPiyKU

        CSS:
        *{
            padding: 0px;
            margin: 0px;
        }  

        .caixa {
            background-color: red;
            position: relative;
            top: 0px;
            left: 0px;
            width: 100px;
            height: 100px;
        }

        HTML:
        <button onclick="Mover()">MOVER</button> 
        <button onclick="Parar()">PARAR</button> 
        <div class="caixa"></div>

        JS:
        var caixa = document.querySelector(".caixa")
        var vel = 5
        var dx = 1
        var posX = 0
        var anima = null      
        larguramaxima = window.innerWidth - caixa.offsetWidth

        function Mover() {
            posX += dx * vel
            caixa.style.left = posX + "px"
            if (posX > larguramaxima) {
                dx = -1
            }
            else if (posX < 0){
                dx = 1
            }
            anima = requestAnimationFrame(Mover);
        }

        function Parar() {
            cancelAnimationFrame(anima)
        }

        window.addEventListener("resize", () => {
            larguramaxima = window.innerWidth - caixa.offsetWidth
        })
        

        ///////////////////////////////////////////////////////////////

    ////    PARA MOVER UM ELEMENTO AUTOMATICAMENTE USANDO O REQUESTANIMATIONFRAME
        VIDEO: https://www.youtube.com/watch?v=gMmDeyPiyKU

        Para mover horizontalmente (esquerda / direita):

        CSS:
        *{
            padding: 0px;
            margin: 0px;
        }  

        .caixa {
            background-color: red;
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100px;
            height: 100px;
        }

        HTML:
        <div class="caixa"></div>

        JS:
        var caixa = document.querySelector(".caixa")
        var vel = 5
        var dx = 1           //*direção no eixo x
        var dy = 0           //*direção no eixo y
        var posX = 0
        var posY = 0
        var anima = null

        function inicia() {
            caixa.addEventListener("click", () => {        //*ao clicar no objeto, ele para a animação
                cancelAnimationFrame(anima)
            })
            caixa.addEventListener("dblclick", Mover)      //*ao clicar 2 vezes, ele inicia a animação
            Mover()                                        //*para chamar a função
        }

        function Mover() {
            posX += dx * vel
            posY += dy * vel
            caixa.style.left = posX + "px"
            caixa.style.top = posY + "px"
            if (posX > 800) {
                dx = -1
            }
            else if (posX < 0){
                dx = 1
            }
            anima = requestAnimationFrame(Mover);
        }

        window.addEventListener("load", inicia)

        ////

        Para mover verticalmente (cima / baixo):

        CSS:
        *{
            padding: 0px;
            margin: 0px;
        }  

        .caixa {
            background-color: red;
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100px;
            height: 100px;
        }

        HTML:
        <div class="caixa"></div>

        JS:
        var caixa = document.querySelector(".caixa")
        var vel = 5
        var dx = 0           //*direção no eixo x
        var dy = 1           //*direção no eixo y
        var posX = 0
        var posY = 0
        var anima = null

        function inicia() {
            caixa.addEventListener("click", () => {        //*ao clicar no objeto, ele para a animação
                cancelAnimationFrame(anima)
            })
            caixa.addEventListener("dblclick", Mover)      //*ao clicar 2 vezes, ele inicia a animação
            Mover()                                        //*para chamar a função
        }

        function Mover() {
            posX += dx * vel
            posY += dy * vel
            caixa.style.left = posX + "px"
            caixa.style.top = posY + "px"
            if (posY > 500) {
                dy = -1
            }
            else if (posY < 0){
                dy = 1
            }
            anima = requestAnimationFrame(Mover);
        }

        window.addEventListener("load", inicia)

        //////////////////////////////////////////////////////////////////////////////////////

    ////    PARA PEGAR VÁRIAS INFORMAÇÕES DE UM ELEMENTO (TAG) USANDO O GETBOUNDINGCLIENTRECT()      
        VIDEO: https://www.youtube.com/watch?v=UiBgtXG8IvA

        HTML:
        <div id="caixa" style="background-color: red; width: 100px; height: 100px;"></div>

        JS:
        const caixa = document.getElementById("caixa")

        console.log(caixa.getBoundingClientRect())
        >>> DOMRect {x: 0, y: 0, width: 100, height: 100, top: 0, …}
                bottom: 100
                height: 100
                left: 0
                right: 100
                top: 0
                width: 100
                x: 0
                y: 0

        Para pegar uma informação específica:
        console.log(caixa.getBoundingClientRect().width)
        >>> 100

        Obs: Não é possível alterar os valores usando este método. Exemplo:
        caixa.getBoundingClientRect().width = 200     //*Não funciona

        //////////////////////////////////////////////////////////////////////////////////////

    ////    PARA DECLARAR UMA TECLA DE ATALHO PARA UMA FUNÇÃO OU EVENTO USANDO O ACCESSKEY
        VIDEO: https://www.youtube.com/watch?v=mCgwSukm9cU

        Adicionando uma tecla de atalho para um botão:

        HTML:
        <div id="texto">TEXTO ORIGINAL</div>
        <button onclick="Mudar()" accesskey="x">APERTE ALT + X</button> 

        JS:
        function Mudar() {
            document.querySelector("#texto").innerHTML = "TEXTO MODIFICADO"
        }

        /////

        Adicionando uma tecla de atalho para um evento de click:

        HTML:
        <div id="texto">APERTE ALT + X</div>

        JS:
        document.getElementById("texto").accessKey="x"

        document.getElementById("texto").addEventListener("click", () => {
            document.getElementById("texto").innerHTML = "TEXTO MODIFICADO"
        })

        Obs: Aparentemente só funciona com o evento de click.

        /////

        Obs: Outros navegadores podem ter atalhos diferentes. No Chrome é Alt + Tecla.
        https://developer.mozilla.org/pt-BR/docs/Web/HTML/Global_attributes/accesskey

        //////////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA OBTER A GEOLOCALIZAÇÃO (LATITUDE E LONGITUDE)
        VIDEO: https://www.youtube.com/watch?v=gf_jkyHipPA

        HTML:
        <div id="latitude"></div>
        <div id="longitude"></div>

        JS:
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(LOCAL , ERRO)
        }
        else {
            console.log("Geolocalização não suportada")
        }

        function LOCAL(position) {
            document.getElementById("latitude").innerHTML = "Latitude: " + position.coords.latitude
            document.getElementById("longitude").innerHTML = "Longitude: " + position.coords.longitude
        }

        function ERRO() {
            console.log("Erro ao obter a localização")
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////

        VALIDAÇÃO NATIVA DE FORMULÁRIOS PELO JAVASCRIPT
        VIDEO: https://www.youtube.com/watch?v=Ijz0SwbYxWk

    ////    Para evitar que um botão não execute o submit:    

        HTML:
        <form action="./nomedoarquivo.php">
            <label for="nome">Nome:</label><br>
            <input type="text" id="nome" name="nome"><br>
            <button id="btn">ENVIAR</button>
        </form>

        JS:
        document.getElementById("btn").addEventListener("click", (evento) => {
            evento.preventDefault()
        })

        Com isso, ao apertar o botão de enviar (submit), não acontecerá nada, evitando que os dados sejam validados e enviados
        para o diretório ou url do action do form.

        //////////////////////////

    ////    Para mostrar uma mensagem de validação que deu errado:

        HTML:
        <form>
            <label for="numero">Número:</label><br>
            <input type="number" id="numero" name="numero" min="0" max="10" required/><br>
            <button id="btn">ENVIAR</button>
            <div id="mensagem"></div>
        </form>

        JS:
        document.getElementById("btn").addEventListener("click", (evento) => {
            let msg = null
            if(!document.getElementById("numero").checkValidity()) {
                msg = document.getElementById("numero").validationMessage
            }
            document.getElementById("mensagem").innerHTML = msg
            evento.preventDefault()
        })

        ////

    ////    Caso queira alguma mensagem de erro personalizada:

        JS:
        document.getElementById("btn").addEventListener("click", (evento) => {
            let msg = null
            if(!document.getElementById("numero").checkValidity()) {
                msg = "Campo Inválido"
            }
            document.getElementById("mensagem").innerHTML = msg
            evento.preventDefault()
        })

        ///////

    ////    Outro exemplo de mensagem:

        HTML:
        <form>
            <label for="nome">Nome:</label><br>
            <input type="text" id="nome" name="nome" minlength="5" maxlength="10" required/><br>
            <button id="btn">ENVIAR</button>
            <div id="mensagem"></div>
        </form>

        JS:
        document.getElementById("btn").addEventListener("click", (evento) => {
            let msg = null
            if(!document.getElementById("nome").checkValidity()) {
                msg = document.getElementById("nome").validationMessage
            }
            document.getElementById("mensagem").innerHTML = msg
            evento.preventDefault()
        })

        ////////////////////////////

    ////    Para personalizar a mensagem de validação:        
        VIDEO: https://www.youtube.com/watch?v=VHfKlJGMyGw 

        HTML:
        <form>
            <label for="nome">Nome:</label><br>
            <input type="text" id="nome" name="nome" minlength="5" maxlength="10" required/><br>
            <button id="btn">ENVIAR</button>
            <div id="mensagem"></div>
        </form>

        JS:
        var nome = document.getElementById("nome")

        document.getElementById("btn").addEventListener("click", (evento) => {
            let estadoValidacao = nome.validity
            let msg = null
            if(estadoValidacao.valueMissing) {                       
                nome.setCustomValidity("Este campo é obrigatório")
            }
            else if (estadoValidacao.tooShort) {
                nome.setCustomValidity("Precisa ter no mínimo 5 caracteres")
            }

            nome.reportValidity()        //*opcional     
            document.getElementById("mensagem").innerHTML = nome.validationMessage
            evento.preventDefault()               
        })

        ////

    ////    -Tipos de mensagem:
        .validationMessage = Para mostrar a mensagem de requerimentos de validação
        .reportValidity = Para mostrar a mensagem de validação em um pop-up

        -Tipos de validação:
        .valueMissing = true, se um elemento (com um atributo obrigatório) não tiver valor (estiver vazio)
        .rangeOverflow = true, se o valor de um elemento for maior que seu atributo max 
        .rangeUnderflow = true, se o valor de um elemento for menor que seu atributo min
        .customError = true, se uma mensagem de validação personalizada for definida
        .patternMismatch = true, se o valor de um elemento não corresponder ao seu atributo padrão
        .stepMismatch = true, se o valor de um elemento for inválido por seu atributo step
        .tooLong = true, se o valor de um elemento exceder seu atributo maxLength
        .tooShort = true, se o valor de um elemento for menor que seu atributo minLength
        .typeMismatch = true, se o valor de um elemento for inválido por seu atributo type
        .valid = true, se o valor de um elemento for válido 

        -Outros:
        .preventDefault = Para evitar que o formulário seja enviado/submetido

        //////////////////////////////////////////////////////////////////////////////////////////

    ////    PARA ARMAZENAR INFORMAÇÕES EM UMA PÁGINA USANDO LOCALSTORAGE:
        VIDEO: https://www.youtube.com/watch?v=uXC2zXaa5_E

        Para armazenar uma informação no armazenamento local:

        Sintaxe:
        localStorage.setItem("Chave", "Valor")

        let variavel = "Girafa"
        localStorage.setItem("animal", variavel)

        ou

        localStorage.setItem("animal", "Girafa")            

        ////

        Para obter a informação:

        localStorage.setItem("animal", "Girafa")

        console.log(localStorage.getItem("animal"))
        >>> Girafa

        ///

        Para obter uma chave específica armazenada pela posição:

        localStorage.setItem("A", "Girafa")
        localStorage.setItem("B", "Macaco")
        localStorage.setItem("C", "Gato")

        console.log(localStorage.key(0))
        >>> Girafa

        Obs: Ao armazenar, as chaves são colocadas em ordem alfabética, modificando então a sua posição final:

        localStorage.setItem("animal", "Girafa")
        localStorage.setItem("transporte", "Carro")
        localStorage.setItem("cor", "Azul")

        console.log(localStorage.key(1))
        >>> cor

        Note que foi retornado cor e não transporte, pois as 3 chaves foram colocadas em ordem alfabética.

        ///

        Para limpar todas as informações armazenadas:
        localStorage.clear()

        ///

        Para saber a quantidade de item armazenados:

        localStorage.setItem("A", "Girafa")
        localStorage.setItem("B", "Macaco")
        localStorage.setItem("C", "Gato")

        console.log(localStorage.length)
        >>> 3

        ///

        Para armazenar as informações apenas na sessão atual do usuário:

        sessionStorage.setItem("animal", "Girafa")

        As regras e sintaxes do sessionStorage são idênticas às do localStorage.

        A diferença entre o localStorage e o sessionStorage é que as informações armazenadas no sessioStorage
        são perdidas ao fechar o navegador.

        ////////////////////////////////////////////////////////////////////////////////////////

////    COOKIES PELO JAVASCRIPT
        https://www.w3schools.com/js/js_cookies.asp

        Cookies possuem o seguinte padrão:
        atributo = valor ; validade

        Exemplo:
        nome = Bruno ; expires= Tue, 01 Jan 2115 12:00:00 UTC

        -Para criar e deletar um cookie:

        HTML:
            <button id="btn" onclick="criarCookie()">CRIAR</button>
            <button id="btn" onclick="limparCookie()">LIMPAR</button>
            <div id="ID"></div>

        JS:
            document.querySelector("#ID").innerHTML = document.cookie;
            var atributo = "Nome";
            var valor = "Bruno";

            function criarCookie() {
                var dtExpira = "expires= Tue, 01 Jan 2115 12:00:00 UTC ";
                document.cookie = atributo + "=" + valor + "; " + dtExpira;    
                window.location.reload()       //*Opcional para atualizar a página
            }

            function limparCookie() {
                document.cookie = nome + "=; expires= Thu, 01 Jan 1970 00:00:01 GMT;"; 
                window.location.reload()       //*Opcional para atualizar a página
            }

        //////////////
        VIDEO: https://www.youtube.com/watch?v=d83c44JnNG4

        HTML:
            <form>
                <label for="nome">Nome: </label>
                <input type="text" id="idnome" name="nome" required><br>
                <label for="sobrenome">Sobrenome: </label>
                <input type="text" id="idsobrenome" name="sobrenome" required><br>
                <label for="email">Nome: </label>
                <input type="email" id="idemail" name="email" required><br>
                <button id="btn" onclick="criarCookie()">CRIAR</button>
                <button id="btn" onclick="limparCookie()">LIMPAR</button>
            </form>

            <div id="cookies">Todos os cookies: </div>
            <div id="nome">Nome: </div>
            <div id="sobrenome">Sobrenome: </div>
            <div id="email">Email: </div>

        JS:
            document.querySelector("#cookies").innerHTML += document.cookie;

            let[...texto] = document.cookie.split(";")   

            let[titulonome, nomevalor] = texto[0].split("=")
            let[titulosobrenome, sobrenomevalor] = texto[1].split("=")
            let[tituloemail, emailvalor] = texto[2].split("=") 
            
            document.querySelector("#nome").innerHTML += nomevalor;
            document.querySelector("#sobrenome").innerHTML += sobrenomevalor;
            document.querySelector("#email").innerHTML += emailvalor;
      
            function criarCookie() {
                var dtExpira = "expires= Tue, 01 Jan 2115 12:00:00 UTC ";
                var nome = document.getElementById("idnome").value;
                var sobrenome = document.getElementById("idsobrenome").value
                var email = document.getElementById("idemail").value
                document.cookie = "nome" + "=" + nome + "; " + dtExpira;    
                document.cookie = "sobrenome" + "=" + sobrenome + "; " + dtExpira;   
                document.cookie = "email" + "=" + email + "; " + dtExpira;   
                window.location.reload()       //*Opcional para atualizar a página
            }

            function limparCookie() {
                document.cookie = "nome" + "=; expires= Thu, 01 Jan 1970 00:00:01 GMT;"; 
                document.cookie = "sobrenome" + "=; expires= Thu, 01 Jan 1970 00:00:01 GMT;"; 
                document.cookie = "email" + "=; expires= Thu, 01 Jan 1970 00:00:01 GMT;"; 
                window.location.reload()       //*Opcional para atualizar a página
            }

        ////////////////////////////////////////
        VIDEO: https://www.youtube.com/watch?v=FOM5mk-N8NI

        <head>
          <script>

            function criarCookie(nome, valor, expira) {
                var dtExpira = "expires= Tue, 01 Jan 2115 12:00:00 UTC ";
                document.cookie = nome + "=" + valor + "; " + dtExpira;    //*cookie precisa de um nome, valor e data de validade
            }

            function lerCookie(nome) {
                var vnome = nome + "=";
                var ca = document.cookie.split(';');
                for(var i=0; i<ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0)==' '){
                        c = c.substring(1);
                    }
                    if (c.indexOf(vnome) == 0) return c.substring(vnome.length,c.length);
                }
                return "";
            }

            function verificarCookie() {
                var username = lerCookie("username");
                if (username!="") {
                    alert("Bem vindo novamente " + username);
                } 
                else {
                    username = prompt("Digite seu nome:", "");
                    if (username != "" && username != null) {
                        criarCookie("username", username, 365);
                    }
                }
            }
          </ script>
        </head>

        <body onload="verificarCookie()">

        ////////////////////////////////////////////////////////////////////

        PARA ALTERAR UM ELEMENTO AUTOMATICAMENTE AO OCORRER UMA MUDANÇA:
        (Função onChange)

        HTML:
        <input id="form" type="text" onchange="Mudar()">
        <p id="txt">Texto Original</p>

        JS:
        function Mudar(){
            let x = document.getElementById("form").value
            document.getElementById("txt").innerHTML = x
        }

        Ao digitar algo e apertar ENTER ou se clicar fora da caixa de formulario, o texto novo substituirá o texto original

        ------

        OUTRA VERSÃO:

        HTML:

        <input type="text" onchange="Mudar(this.value)">
        <p id="txt">Texto Original</p>


        JS:
        function Mudar(novotexto){
            document.getElementById("txt").innerHTML = novotexto
        }

        --------------

        Caso quisesse que a mudança fosse feita instantaneamente na hora sem precisar apertar Enter ou sair,
        é necessário usar a função onkeyup:

        HTML:
        <input id="form" type="text" onkeyup="Mudar()">
        <p id="txt">Texto Original</p>

        JS:
        function Mudar(){
            let x = document.getElementById("form").value
            document.getElementById("txt").innerHTML = x
        }
        
        
        --------------

        Exemplo 2:

        HTML:
        <input type="text" id="txt" onchange="Mudar()" />

        JS:
        function Mudar() {
            let x = document.getElementById("txt");
            x.value = x.value.toUpperCase();
        }

        Transformará o que foi digitado em letra maiuscula


        OBS: Caso queira usar um EventListener:

        HTML:
        <input type="text" id="fname">
        
        JS:
        document.getElementById("txt").addEventListener("change", Mudar);

        function Mudar() {
            let x = document.getElementById("txt");
            x.value = x.value.toUpperCase();
        }
        

        -----------------

        Exemplo 3:

        HTML:
        <input type="text" id="txt" onchange="Mudar()" />

        JS:
        function Mudar() {
            alert("Algo foi digitado")
        }

        OU

        HTML:
        <input type="text" id="txt" onchange="Mudar(this.value)" />

        JS:
        function Mudar(x) {
            alert("Foi digitado: " + x)
        }

        -------------------

        Exemplo 4:

        HTML:
        <select id="carros" onchange="Selecionado()">
            <option value="Audi">Audi</option>
            <option value="BMW">BMW</option>
            <option value="Mercedes">Mercedes</option>
            <option value="Volvo">Volvo</option>
        </select>

         <p id="txt">Carro selecionado: Audi</p>

        JS:
        function Selecionado() {
            var x = document.getElementById("carros").value;
            document.getElementById("txt").innerHTML = "Carro selecionado: " + x;
        }   

        -------------------

        Caso quisesse




%%     */</script>













































>>>>    <script>/* REGEX - Expressões regulares

    PARA UTILIZAR O REGEX COM O SEARCH()
    VIDEO: https://www.youtube.com/watch?v=z0EnAoH09oU

    ////    Para encontrar um ou mais caracteres de uma string desconsiderando letra maiúscula ou minúscula (Case sensitive): 

    var animal = "Gato Preto"

    var x = animal.search(/preto/i)

    console.log(x)
    >>> 5

    Obs: O modificador i no REGEX significa o não uso de case sensitive.

    ////////////////////////////////////////////

    ////    PARA ENCONTRAR A QUANTIDADE TOTAL DE UM CARACTERE ESPECÍFICO DE UMA STRING
    VIDEO: https://www.youtube.com/watch?v=z0EnAoH09oU

    var fruta = "banana"

    var x = fruta.match(/a/g)

    console.log(x)
    >>> ['a', 'a', 'a']
            0: "a"
            1: "a"
            2: "a"
            length: 3

    Obs: O modificador g no REGEX indica a pesquisa por uma quantidade de caracteres na string

    Ele é case sensitive e não diferencia letra maiúscula de minúscula. Para isso é preciso usar o i no REGEX:

    var fruta = "banAna"

    var x = fruta.match(/a/gi)

    console.log(x)
    >>> ['a', 'A', 'a']
            0: "a"
            1: "A"
            2: "a"
            length: 3

    Obs: O match com o REGEX procura a variavel globalmente

    /////

    ////    Para transformar o resultado em uma string:

    var ano = "2023"

    var x = ano.match(/2/g)

    console.log(x.toString())
    ou
    console.log(x.toLocaleString())
    >>> 2, 2

    /////

    ////    Para obter somente a quantidade:

    var ano = "2011"

    var x = ano.match(/1/g)

    console.log(x.length)
    >>> 2

    /////

    ////    Pode-se procurar sílabas, palavras ou mais de um caractere usando o match() com o REGEX:

    var fruta = "banana"

    var x = fruta.match(/an/g)     //*procurando os dois caracteres "an" juntos

    console.log(x)
    >>> ['an', 'an']
            0: "an"
            1: "an"
            length: 2

    ////

    ////    Caso queira procurar a quantidade de mais de um caracter específico, é preciso colocar entre colchetes:

    var animal = "girafa"

    var x = animal.match(/[rfg]/g)    //*procurando os caracteres r, f e g

    console.log(x)
    >>> ['g', 'r', 'f']
            0: "g"
            1: "r"
            2: "f"
            length: 3

    ////////////////////////

    ////    Para procurar caracteres em um intervalo:

    var nome = "Jesus de Nazaré"

    var x = nome.match(/[a-m]/gi)      //*procurando os caracteres de "a" até "m"

    console.log(x)
    >>>  ['J', 'e', 'd', 'e', 'a', 'a']
            0: "J"
            1: "e"
            2: "d"
            3: "e"
            4: "a"
            5: "a"
            length: 6

    Obs: Note que ele não obteve o último caractere (é) pois ele possui acento.

    ////

    var cpf = "143.265.376-32"

    var x = cpf.match(/[5-9]/g)      //*procurando os números de 5 até 9

    console.log(x)
    >>> ['6', '5', '7', '6']
            0: "6"
            1: "5"
            2: "7"
            3: "6"
            length: 4

    /////

    ////    Para procurar a quantidade de mais de um intervalo de caracteres:

    var email = "bruno2873@hotmail.com"

    var x = email.match(/[n-z|0-4]/ig)      //*procurando de "n" até "z" e de "0" até "4"

    console.log(x)
    >>> ['r', 'u', 'n', 'o', '2', '3', 'o', 't', 'o']

    Obs: As condições entre colchetes são separadas por |
    variavel.match(/[ condição1 | condição2 | condição3 ]/gi)

    ////////////////////////////////////////////////////

    METACARACTERES:
    VIDEO: https://www.youtube.com/watch?v=k-zjSh5W-Io 

    ////    Para encontrar somente numerais usando o metacaractere \d :

    var ano = "Ano de 2023"

    var x = ano.match(/\d/g)

    console.log(x)
    >>> ['2', '0', '2', '3']

    ////////

    ////    Para encontrar somente espaços usando o metacaractere \s :

    var ano = "Ano de 2023"

    var x = ano.match(/\s/g)

    console.log(x)
    >>> [' ', ' ']
        0: " "
        1: " "      
        length: 2

    Há 2 espaços em branco na string

    ////////

    ////    Para encontrar somente letras usando o metacaractere \b :

    var animal = "zebra"

    var x = animal.match(/\bz/gi)      //*Procurando o caractere "z"

    console.log(x)
    >>> ['z']

    Obs: O caractere escolhido é colocado após o \b

    /////////////////////////////////////////////////////////////

    QUANTIFICADORES
    VIDEO: https://www.youtube.com/watch?v=k-zjSh5W-Io

    ////    Para considerar caracteres repetidos na mesma palavra come se fossem 1 só coisa usando o quantificador + :

    var nome = "Brunooooooo Campos"

    var x = nome.match(/o+/ig)      //*Procurando o caractere "o", incluindo os repetidos

    console.log(x)
    >>> ['ooooooo', 'o']
            0: "ooooooo"
            1: "o"
            length: 2

    ///

    var numeros = "1 , 10, 100, 1000"

    var x = numeros.match(/10+/g)

    console.log(x)
    >>> ['10', '100', '1000']
        0: "10"
        1: "100"
        2: "1000"
        length: 3

    ///

    Outro exemplo usando mais de uma condição:

    var nome = "Brunooooooo Silvaaaaa"

    var x = nome.match(/o+|a+/ig)      //*Procurando os caracteres "o" e "a", incluindo os repetidos

    console.log(x)
    >>> ['ooooooo', 'aaaaa']

    ////

    var fruta = "Banana nova"

    var x = fruta.match(/na+/ig)     //*Procurando o grupo de caracteres "na", , incluindo os repetidos

    console.log(x)
    >>> ['na', 'na']

    ///////////////

    ////    Para procurar 1 ou mais caracteres (grupos de caracteres + caracteres únicos) usando o quantificador * :  
    Obs: Ele procura um grupo de caracteres, toda a sequência que tenha esse grupo, além do primeiro caractere do grupo

    var nome = "Bruno Campos"

    var x = nome.match(/os*|amp/gi)      //* Procurando os caracteres "o", "os" e "amp"

    console.log(x)
    >>> ['o', 'amp', 'os']

    ////

    var numeros = "1 , 10, 100, 1000, 2000"

    var x = numeros.match(/10*|2/g)     //* Procurando os caracteres "1", "0", "10" e "2"

    console.log(x)
    >>> ['1', '10', '100', '1000', '2']

    ////

    var numeros = "1 , 13, 107, 180, 2030"

    var x = numeros.match(/10*|2/g)     //* Procurando os caracteres "1", "0", "10" e "2"

    console.log(x)
    >>> ['1', '1', '10', '1', '20']

    ////

    var fruta = "Banana nova"

    var x = fruta.match(/na*|va/ig)     //*Procurando o grupo de caracteres "na" e "va", além do caractere "n"

    console.log(x)
    >>> ['na', 'na', 'n', 'va']

    ////////////////////

    ////    Para procurar grupos de caracteres específicos usando o quantificador ? : 
    Obs: Diferenetemente do quantificador *, o ? não retorna toda a sequência do grupo

    var fruta = "Banana nova"

    var x = fruta.match(/na?/ig)     //*Procurando o grupo de caracteres "na" e o "n"

    console.log(x)
    >>> ['na', 'na', 'n']

    ////

    var numeros = "1 , 10, 100, 1000"

    var x = numeros.match(/10?/ig)     //*Procurando o grupo de caracteres "10" e o "1"

    console.log(x)
    >>> ['1', '10', '10', '10']

    Obs: O quantificador "?" mostra que o caracter pode ou não ser usado, sendo muito útil para números de telefone, 
    pois existem estados em que os números tem 9 digitos e outros que tem 8 digitos

    /////////////////////////////////////////////////////////////

    ////    PARA SUBSTITUIR CARACTERES EM UMA STRING IGNORANDO O CASE SENSITIVE:
    VIDEO: https://www.youtube.com/watch?v=z0EnAoH09oU

    var nome = "Bruno"

    var x = nome.replace( /bruno/i , "Rafael")

    console.log(x)
    >>> Rafael

    //////////////////////////////////////////////////////////////

    ///     PARA PROCURAR ELEMENTOS QUE COMECEM COM CERTOS CARACTERES OU PALAVRAS
    LINK: https://www.alura.com.br/artigos/principais-casos-uso-regex-para-tratamento-dados

    SELECT * FROM filmes WHERE titulo REGEXP '^[era uma vez]';

    O acento circunflexo [^] significa que a correspondência de padrão deve ser aplicada no início. 
    Já a lista [era uma vez] sugere que apenas títulos de filmes que começam com era, uma ou vez são retornados 
    em nosso conjunto de resultados.

    /^[0-9]{3}\-?[0-9]{2}\n-?[0-9]{4}$/

    ///////////////////////////////////////////////////////////

    ////    PARA INDICAR QUE DEVE COMEÇAR COM ALGO

    Utiliza-se o ^ no começo:

    /^[0-9]{3}\-?[0-9]{2}\n-?[0-9]{4}$/

    Indicando que deve começar com 3 números de 0 a 9

    ////////////////////////////////////////////////////////////







%%     */</script>

>>>>    <script>/* DARK MODE JAVASCRIPT

    CSS:
    body {
        background-color: white;
        color: black;
    }

    .dark-mode {
        background-color: black;
        color: white;
    }
    
    HTML:
    <button id="btn_toggle" onclick="CLICAR()">CLIQUE AQUI</button>

    JAVASCRIPT:
    function CLICAR() {
        var element = document.body;
          element.classList.toggle("dark-mode");
    }







%%     */</script>

>>>>    <script>/* JSON 1
    VIDEO: https://www.youtube.com/watch?v=BWPUSXzSWA8

    ////////////////////////////

    ARQUIVO .JSON (OBRIGATÓRIO O USO DE ASPAS DUPLAS POIS JSON TRABALHA COM STRINGS)

    FORMA SIMPLES:
    {
        "nome": "Matheus",
        "idade": 30,
        "esta_trabalhando": true,
        "hobbies": ["Programar", "Correr", "Ler"]
    }

    FORMA ANINHADA:
    [
        {
            "nome": "Matheus",
            "idade": 30,
            "esta_trabalhando": true,
            "detalhes_profissao": {
                "profissao": "Programador",
                "empresa": "Empresa X"
            },
            "hobbies": ["Programar", "Correr", "Ler"]
        }
    ]

    //////////////////////////////////////

    ARQUIVO JAVASCRIPT (TRABALHA COM OBJETOS)

    FORMA SIMPLES:
    {
        nome: 'Matheus',
        idade: 30,
        esta_trabalhando: true,
        hobbies: ['Programar', 'Correr', 'Ler']
    }

    FORMA ANINHADA:
    const objs = [
        {
            nome: 'Matheus',
            idade: 30,
            esta_trabalhando: true,
            detalhes_profissao: {
                profissao: 'Programador',
                empresa: null       (null é usado quando não se tem os dados = dados em branco)
            },
            hobbies: ['Programar', 'Correr', 'Ler']
        }
    ]

    //////////////////////////////////////////

    PARA CONVERTER OBJETO (.js) PARA JSON (.json)

    const jsonData = JSON.stringify(objs)

    document.write(jsonData)

    //////////////////////////////////////////

    PARA CONVERTER JSON (.json) PARA OBJETO (.js)

    const objData = JSON.parse(jsonData)

    document.write(objData)

    Ao converter Json para objeto, o Javascript pode então tratar os dados. Exemplo:

    objData.map( (pessoa) => {
        document.write(pessoa.nome);
    });
    




%%     */</script>

>>>>    <script>/* JSON 2
    VIDEO: https://www.youtube.com/watch?v=zjfA_C08XmA
    /////////////////////////////////////////////////

    -JSON É BASICAMENTE UM FORMA DE CONVERTER UM OBJETO EM TEXTO (E VICE-VERSA)

    -ELE É USADO PRINCIPALMENTE PARA TRANSMITIR DADOS ENTRE SISTEMAS DE FORMA SIMPLES,
    JÁ QUE O FORMATO DE TEXTO É LIDO POR PRATICAMENTE TODA LINGUAGEM DE PROGRAMAÇÃO.

    //////////////////////////////////////////////////

    ARQUIVO HTML:

    <div id="ID"></div>

    ////////////

    ARQUIVO JAVASCRIPT:

    -Objeto carro:

    const CARRO = {
        marca: "Fiat",
        modelo: "Uno",
        ano: [2001 , 2002 , 2003, 2004]
    }

    Caso queira imprimir um dos objetos:

    document.getElementById("ID").innerHTML = CARRO.marca
    >>> Fiat

    document.getElementById("ID").innerHTML = CARRO.ano[2]
    >>> 2003

    ////////////

    -Convertendo o objeto carro para JSON (string de texto):

    let TEXTO = JSON.stringify(CARRO)   *Converteu para texto

    document.getElementById("ID").innerHTML = TEXTO
    >>> {"marca": "Fiat","modelo":"Uno","ano":2001}

    OBS: JSON trabalha obrigatoriamente com aspas duplas

    /////////////

    -Convertendo novamente o JSON (string de texto) para objeto:

    let OBJETO = JSON.parse(TEXTO);    *Converteu para objeto

    document.getElementById("ID").innerHTML = OBJETO.marca

    /////////////

    PARA FAZER UMA SOLICITAÇÃO PARA UM SITE E PEGAR SEU CONTEÚDO QUE ESTÁ EM JSON

    URL DO SITE: https://URLdoSite.com.br/json/

    -Conteúdo em JSON que está no site :
    {
        "cep": "22723-170",
        "bairro": "Taquara"
        "cidade": "Rio de Janeiro"
        "estado": "RJ"
        "país": "Brasil"
    }

    -Para pegar as informações do site:

    const variavel = new XMLHttpRequest();
    variavel.open('GET' , 'https://URLdoSite.com.br/json/');   *para pegar as informações do site
    variavel.send();     *para enviar para mim essas informações

    variavel.onload = function() {
        document.getElementById("ID").innerHTML = this.responseText;
    }

    -Com isso será impresso os dados em JSON do site:
    {
        "cep": "22723-170",
        "bairro": "Taquara"
        "cidade": "Rio de Janeiro"
        "estado": "RJ"
        "país": "Brasil"
    }

    -Caso queira pegar apenas uma informação específica:

    let OBJETO = JSON.parse(this.responseText);
    document.getElementById("ID").innerHTML = OBJETO.bairro;
    >>> Taquara


    Observações:
    - XMLHTTPRequest() = para fazer uma requisição a um site sem precisar acessar o site pelo navegador
    - O nome da variável usada no video foi ajax












%%     */</script>

>>>>    <script>/* CALLBACK
    VIDEO: https://www.youtube.com/watch?v=jFfg_IdZAc8
    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    CALLBACK SÍNCRONO (quando não precisa aguardar)

    CALLBACKS FUNCTIONS - PARTE 1

    Obs: callback também pode ser chamado de cb
    callback = cb

    Exemplo:

    function exibir(num) {
        console.log("A operação resultou em ", + num);
    }

    function soma(a, b, callback){
        var resultado = a + b;
        callback(resultado);
    }

    function multiplicacao(a , b , callback) {
        var resultado = a * b;
        callback(resultado);
    }

    soma(2 , 2, exibir);

    multiplicacao(4, 3 , exibir);

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=7CWh3oU05NQ

    CALLBACK FUNCTIONS - PARTE 2

    Exemplo 1:

    const saudacao = (nome) => alert("Olá " + nome)

    const Login = (callback) => {
        const nome = prompt("Digite seu nome: ");
        callback(nome);
    }

    Login(saudacao)

    ///////////////////////

    Exemplo 2:

    const callback = e => alert("Aconteceu um evento " + e.type)

    window.addEventListener("click" , callback)

    ///////////////////////

    Exemplo 3:

    const somar = (x , y) => x + y;

    const calcular = (x , y , computar) => computar(x , y)

    const resultado = calcular(20, 30, somar);

    document.write(resultado)
    >>> 50

    No exemplo acima, o parametro "computar" é o callback.

    //////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=8o-9nQ3DQEA

    CALLBACK FUNCTION - PARTE 3

    const myFunc = callback => {
        const value = 78
        callback(value)
    }

    myFunc( number => {
        document.write(number)
    })

    >>> 78

    //////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=YFRWmkvc8Hs

    CALLBACK FUNCTION - PARTE 4

    -Exemplo sem callback:

    function Exibir(resultado) {
        document.write("O resultado é " + resultado);
    }

    function calcular(calculo) {
        let resultado = eval(calculo);
        document.write(resultado);
    }

    calcular(prompt("Informe um cálculo"))

    ///////

    -Exemplo com callback:

    function Exibir(resultado) {
        document.write("O resultado é " + resultado);
    }

    function calcular(calculo, callback) {
        let resultado = eval(calculo);
        callback(resultado);
    }

    calcular(
        prompt("Informe um cálculo"),
        Exibir
    )

    ////////////////////////
    VIDEO: https://www.youtube.com/watch?v=YFRWmkvc8Hs

    CALLBACK ASSÍNCRONO

    Sem callback:

    fetch("https://jsonplaceholder.typicode.com/todos/1")
    .then(response => response.json)
    .then(json => console.log(json))

    //////

    Com callback:

    function tratarRespostaAPI(resposta) {
        sessionStorage.setItem("RespostaAPI",
        JSON.stringify(resposta)
        );
    }

    fetch("https://jsonplaceholder.typicode.com/todos/1")
    .then(response => response.json)
    .then(json => tratarRespostaAPI(json))

    ////////////////////////////////////////////////////////////////////////////////////////











%%     */</script>

>>>>    <script>/* FUNÇÃO ANONIMA
    VIDEO: https://www.youtube.com/watch?v=0HJU96mThMg

    Função anonima:
    -Não precisa de um nome
    -Não é instanciada, portanto só será criada no momento da execução

    //////

    -Função com nome:

    function Soma(x , y) {
        return x + y
    }

    var resultado = Soma(10, 5)
    document.write(resultado)
    >>> 15

    ///////

    -Função sem nome (anônima) (função lambda):

    let Soma = function (x , y) {
        return x + y
    }

    var resultado = Soma(10, 5)
    document.write(resultado)
    >>> 15

    Obs: A função não está na memória. Ela só será executada no tempo de execução.

    ////////

    -Função com arrow function (função lambda):

    let Soma = (x , y) => {
        return x + y
    }

    var resultado = Soma(10, 5)
    document.write(resultado)
    >>> 15

    /////////

    -Função construtor anônima:

    let Soma = new Function ("x" , "y", "return x + y")

    var resultado = Soma(10, 5)
    document.write(resultado)
    >>> 15

    Obs:
    -Function tem que começar com maiúscula
    -Os parâmetros e a instrução tem que estar entre aspas












%%     */</script>

>>>>    <script>/* XMLHttpRequest
    VIDEO 1: https://www.youtube.com/watch?v=LeNsDyLkMO4
    ///////////////////////////////////////////////////////

    XMLHttpRequest também pode ser chamado de XHR 

    https://jsonplaceholder.typicode.com/

////    Forma simples (sem tratamento de if):

    var HTTP = new XMLHttpRequest();
    var URL = "https://jsonplaceholder.typicode.com/posts";
    var METHOD = "get";   //*ou GET

    HTTP.open(METHOD, URL);      //*Para abrir o arquivo

    HTTP.onreadystatechange = function() {      //*Pode-se usar arrow function também
        document.write(HTTP.responseText)
    }

    HTTP.send();    //*Para enviar o arquivo para mim


    Obs: As variaveis METHOD e URL podem não serem criadas, se quiser. Pode-se colocar o método e a url diretamente no .open():
    Exemplo: 
    HTTP.open("get", "https://jsonplaceholder.typicode.com/posts");

    Obs: responseText também pode ser escrito apenas como response:
    Exemplo:
        document.write(HTTP.response)

    ////////////////////////////////

////    Forma correta (tratando os estados com if):


    var HTTP = new XMLHttpRequest();
    var URL = "https://jsonplaceholder.typicode.com/posts";
    var METHOD = "get";

    HTTP.open(METHOD, URL);

    HTTP.onreadystatechange = () => {        //*Forma com arrow function
        if (HTTP.readyState === XMLHttpRequest.DONE && HTTP.status === 200) {
            console.log(HTTP.responseText);
        }
        else if (HTTP.readyState === XMLHttpRequest.Done && HTTP.status !== 200) {
            console.log("Error");
        }
    }

    HTTP.send();

    ///////////////////

////    -O arquivo JSON virá como string de texto. Para transformar em objeto, é preciso usar o JSON.parse():

    HTTP.onreadystatechange = () => {        
        if (HTTP.readyState === XMLHttpRequest.DONE && HTTP.status === 200) {
            console.log(JSON.parse(HTTP.responseText));
        }
        else if (HTTP.readyState === XMLHttpRequest.Done && HTTP.status !== 200) {
            console.log("Error");
        }
    }

    /////////////////

////    -Caso queira pegar um elemento específico do objeto, é preciso usar a posição no array e o nome do atributo/propriedade:
    Por exemplo: console.log(JSON.parse(HTTP.responseText)[0].userID);

    
    HTTP.onreadystatechange = () => {        
        if (HTTP.readyState === XMLHttpRequest.DONE && HTTP.status === 200) {
            console.log(JSON.parse(HTTP.responseText)[2].title);
        }
        else if (HTTP.readyState === XMLHttpRequest.Done && HTTP.status !== 200) {
            console.log("Error");
        }
    }


    //////////////////

////    -O readyState possui alguns números referentes aos estados da requisição:

    0 = UNSENT	
    open() não foi chamado ainda.
    (Requisição não incializada)

    1 = OPENED	
    send() não foi chamado ainda.
    (Estabeleceu requisição com o servidor)

    2 = HEADERS_RECEIVED	
    send() foi chamado, e cabeçalhos e status estão disponíveis.
    (Pedido recebido)

    3 = LOADING	
    Download; responseText contém dados parciais.
    (Processando pedido)

    4 = DONE	
    A operação está concluída.
    (Solicitação concluída e resposta pronta)

    -Então o if utilizará um ou mais desses números para simbolizar condições.
    Exemplo: 

    if (HTTP.readyState === 3)
    ou
    if (HTTP.readyState === XMLHttpRequest.Loading)

    ////////////////////

////    -O responseText é a resposta à request, em formato texto, retornando null se a solicitação não teve êxito ou que ainda não foi enviada.

    Exemplo: 
    console.log(HTTP.responseText);

    Obs: responseText também pode ser escrito apenas como response:
    Exemplo:
    console.log(HTTP.response)

    ///////////////////

////    -O "status" é o status de resposta da requisição. (HTTP STATUS CODES)
    Este é o retorno do codigo da requisição HTTP (por exemplo, status é 200 quando a solicitação for bem-sucedida).

    Exemplo: 
    if (HTTP.status === 200) {
      ....
    }

    O código 200 siginifica OK.
    O código 404 é o status de erro.
    O código 201 significa Created (criado = quando se inseriu alguma informação com sucesso, enviando pelo método POST, por exemplo)
    O código 400 significa Bad Request (requisição faltando algum parâmetro ou com algum outro erro)


    ////////////////////////

////    O método open pode esclarecer se será síncrono ou assincrono utilizando true e false.
    Por padrão, ele já estpa configurado como true (assíncrono):

    HTTP.open(METHOD, URL);  *assíncrono
    HTTP.open(METHOD, URL, true);  *assíncrono
    HTTP.open(METHOD, URL, false);  *síncrono


    ///////////////////////////////////////////////////////////////////////////////////////////////////////

    VIDEO 2: https://www.youtube.com/watch?v=4K33w-0-p2c

    ///////////////////

////    RECEBER DADOS COM O MÉTODO GET NO XMLHTTPREQUEST AO CLICAR UM BOTÃO

    HTML:
    <input type="button" value="CLIQUE AQUI" onclick="CLICAR()"></input>
    <div id="ID"></div>

    JS: (versão resumida sem if)
    function CLICAR() {
        var HTTP = new XMLHttpRequest();

        HTTP.open("get", "https://jsonplaceholder.typicode.com/posts");

        HTTP.onload = () => {        
            document.getElementById("ID").innerHTML = JSON.parse(HTTP.responseText);
        }
    
        HTTP.send();
    }

    -Caso queira algum elemento específico do objeto:

    document.getElementById("ID").innerHTML = JSON.parse(HTTP.responseText)[posição].atributo;
    ou
    document.getElementById("ID").innerHTML = JSON.parse(HTTP.response)[posição].atributo;

    Obs: Neste exemplo está sendo usado o evento onload ao invés do onreadystatechange.
    O evento onload executa o Javascript imediatamente após a página carregar.

    object.onload = function(){myScript};
    ou
    object.addEventListener("load", myScript);


    ////////

    Obs: É possível converter o JSON em objeto Javascript antes usando responseType = "json" :
    Não funciona com responseText, apenas response.
    Exemplo:

    function CLICAR() {
        var HTTP = new XMLHttpRequest();

        HTTP.open("get", "https://jsonplaceholder.typicode.com/posts");

        HTTP.responseType = "json";

        HTTP.onload = () => {        
            document.getElementById("ID").innerHTML = HTTP.response;
        }
    
        HTTP.send();
    }

    -Caso queira algum elemento específico do objeto:

    document.getElementById("ID").innerHTML = HTTP.response[posição].atributo;

    ///////////////////////////////////////////////////////////////////////////////////////

////    ENVIAR DADOS COM O MÉTODO GET NO XMLHTTPREQUEST 
    VIDEO: https://www.youtube.com/watch?v=bpx0r_PLLBo

    var HTTP = new XMLHttpRequest();

    var arquivojson = {
        "userId": 203,
        "id": 21,
        "title": "título de exemplo",
        "body": "texto de exemplo"
    }

    HTTP.onreadystatechange = function() {        
        if(HTTP.readystate == 4) {
            console.log(HTTP)
            document.write("Enviado")
        }
    }

    HTTP.open("POST", "https://jsonplaceholder.typicode.com/posts/1");

    HTTP.send(arquivojson);

%%     */</script>
    
















>>>>    <script>/* FETCH
    VIDEO: https://www.youtube.com/watch?v=U-z4Al6gSH4
    ////////////////////////////

////    PARA RECEBER OU REQUISITAR DADOS USANDO O MÉTODO GET DO FETCH

    Forma básica (início):

    var URL = "https://...." 
    var resultado = fetch(URL)
    console.log(resultado)

    ou para resumir:
    
    var URL = "https://...." 
    console.log(fetch(URL))

    ou para resumir mais:

    console.log(fetch("https://...."))

    -Com isso será retornado uma promise, que quer dizer que a requisição feita será enviada apenas quando ela estiver pronta.

    Obs: Por padrão, o fetch usa o método get:
    fetch(URL , {method:"get"})

    ///////////

////    Para trabalhar com os dados da promise obtidos pelo fetch, é preciso usar o .then:

    var URL = "https://...." 
    fetch(URL)
    .then( promise => console.log(resultado))

    Obs: Com isso será retornado uma response.

    ///////////

////    Para trabalhar com a response, é preciso especificar como se quer trabalhar com essa resposta.
    Caso queira transformar os dados em JSON para um objeto Javascript, é preciso usar .JSON():

    var URL = "https://...." 
    fetch(URL)
    .then( response => response.json() )    //*Para converter a response em JSON para objeto
    .then( objeto => {
        console.log(objeto)      //*Para imprimir no terminal o objeto
    })

    -Para pegar um elemento específico do objeto:
    document.write(variavel[posição].atributo)
    ou 
    console.log(variavel[posição].atributo)

    Exemplo:
    var URL = "https://jsonplaceholder.typicode.com/posts" 
    fetch(URL)
    .then( response => response.json() )    
    .then( dados => {
        document.write(dados[2].title)
    })

    ///////

    Obs: Caso queira transformar em texto e não em objeto, é preciso usar .text() :
    .then( response => response.text() )  

    //////

////   -Para capturar um possível erro é preciso usar o .catch:

    var URL = "https://jsonplaceholder.typicode.com/posts" 
    fetch(URL)
    .then( response => response.json() )    
    .then( dados => {
        console.log(dados)
    })
    .catch( error => {
        console.log(error)
    })


    //////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=85vJXFpXLQw

////    FORMAS DE USO DA FETCH API USANDO GET

    FORMA SEM ARROW FUNCTION:

    fetch("https://........")
    .then( function(response) { 
        return response.json() 
    })    
    .then( function(objeto) {
        console.log(objeto[posição].atributo)
        ...... (instrução opcional)
    })    

    ////

    FORMA COM ARROW FUNCTION:
    fetch("https://........")
    .then( response => response.json() )    
    .then( objeto => {
        console.log(objeto[posição].atributo)
        ....... (instrução opcional)
    })    

    //////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=xc4rM68DsWU

////    PARA ENVIAR DADOS USANDO O MÉTODO POST DO FETCH
    (envio é feito através do clique de um botão)

    HTML:
    <input type="button" value="ENVIAR" onclick="enviarDados()">

    JS:
    let dados = {            //*Dados que serão enviados
        nome: "Bruno",
        idade: 23,
        sexo: "Masculino"
    }

    let cabecalho = {
        method: "POST",                                                 
        body: JSON.stringify(dados)     //*Transformou o objeto em string 
    }

    const enviarDados = () => {
        const URL = "https://........"      //*URL para onde serão enviados os dados
        fetch(URL, cabecalho)
        .then( res => res.json() )        //*Converteu os dados JSON em objeto
        .then( ret => {
            console.log(ret)
        })
    }

    Os valores colocados na variavel cabecalho poderiam ser colocados diretamente no fetch:
    fetch( URL , {method: "POST" , body: JSON.stringify(dados)} )

    O mesmo vale para a URL sendo colocada diretamente no fetch.

    ///////

    Exemplo prático com um formulário:

    HTML:
    <form id="form">
        <input type="text" id="title" placeholder="Title"><br>
        <input type="text" id="body" placeholder="Body"><br>
        <input type="text" id="userId" placeholder="UserId"><br>
        <input type="button" value="ENVIAR" id="btn" onclick="enviarDados()"></input>
    </form>

    JAVASCRIPT:
    let dados = {            
        title: document.getElementById("title").value ,
        body: document.getElementById("body").value ,
        userId: document.getElementById("userId").value
    }

    let cabecalho = {
        method: "POST",                                             
        body: JSON.stringify(dados)     
    }

    const enviarDados = () => {
        const URL = "https://jsonplaceholder.typicode.com/posts"      
        fetch(URL, cabecalho)
        .then( res => res.json() )        
        .then( res => {
            console.log("Formulário enviado")
        })
    }

    //////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=il0Dog9Y4xs

////    PARA ENVIAR DADOS DE UM FORMULÁRIO USANDO O MÉTODO POST DO FETCH 
    (usando eventListener)

    HTML:
    <form id="form">
        <input type="text" id="title" placeholder="Title"><br>
        <input type="text" id="body" placeholder="Body"><br>
        <input type="text" id="userId" placeholder="UserId"><br>
        <button>ENVIAR</button>
    </form>

    JAVASCRIPT:
    
    let form = document.querySelector("#form");

    form.addEventListener("submit" , function(event) {
        event.preventDefault();       //*para prevenir a ação default do formulário de atualizar a página após enviar os dados

        let dados = {
            title: document.getElementById("title").value ,
            body: document.getElementById("body").value,
            userId: document.getElementById("userId").value
        };

        fetch("https://jsonplaceholder.typicode.com/posts" , {   
            method: "POST",
            body: JSON.stringify(dados)    //*para transformar em string
        })

        .then(function(response) {
            return response.json()      //*para transformar em JSON
        })
        .then(function(response) {
            alert("O formulário foi enviado com sucesso.")
        })
    })


    /////////////////////////////////////////////
    SITE: https://jsonplaceholder.typicode.com/guide/

    PARA ENVIAR UM FORMULÁRIO USANDO POST NO FETCH

    HTML:
    <form id="form" name="form">
        <input type="text" id="title" placeholder="Title"><br>
        <input type="text" id="body" placeholder="Body"><br>
        <input type="text" id="userId" placeholder="UserId"><br>
        <input type="button" onclick="CLICAR()" value="ENVIAR"></b>
    </form>

    JAVASCRIPT:
    function CLICAR() {
        fetch('https://jsonplaceholder.typicode.com/posts', {    //*URL foi colocada diretamente dentro do fetch
        method: 'POST',
        body: JSON.stringify({        //*Neste exemplo, os dados foram criados dentro do stringify e não em uma variável
            title: document.getElementById("title").value ,
            body: document.getElementById("body").value,
            userId: document.getElementById("userId").value
        }),
        headers: {                                                 //*Opcional
            'Content-type': 'application/json; charset=UTF-8',     //*Opcional
        },
        })
        .then( response => response.json())
        .then( json => console.log(json));
    }        

%%     */</script>


















>>>>    <script>/* AXIOS
    VIDEO: https://www.youtube.com/watch?v=e9w8GIV0Yq4

    -Pegar o link do CDN do axios no site https://cdnjs.com/libraries/axios

    -Colocar a url na tag head do html:
    <script 
        src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.1/axios.min.js" 
        integrity="sha512-m9S8W3a9hhBHPFAbEIaG7J9P92dzcAWwM42VvJp5n1/M599ldK6Z2st2SfJGsX0QR4LfCVr681vyU5vW8d218w==" 
        crossorigin="anonymous" 
        referrerpolicy="no-referrer">
    </ script>
    

////    -AXIOS x FETCH (MÉTODO GET):

    fetch("https://jsonplaceholder.typicode.com/todos")
    .then( response => response.json())
    .then( data => {
        console.log(data)
    })
    .catch( error => {
        console.log(error)
    })

    //////

    axios.get("https://jsonplaceholder.typicode.com/todos")
    .then( response => {
        console.log(response.data)
    })
    .catch( error => {         
        console.log(error)
    })

////    -Para pegar um elemento específico do objeto:

    axios.get("https://jsonplaceholder.typicode.com/todos")
    .then( response => {
        console.log(response.data[1].title)      //* Ou console.log(response.data.title) dependendo do tipo de objeto
    })
    .catch( error => {
        console.log(error)
    })

////    -Pode-se adicionar um .finally após e que sempre será executado:

    axios.get("https://jsonplaceholder.typicode.com/todos")
    .then( response => {
        console.log(response.data)
    })
    .catch( error => {
        console.log(error)
    })
    .finally( () => {
        instrução que sempre será executada
    });

    ////////

////    -Para atualizar os dados obtidos pela API de tempos em tempos (durante um intervalo) com o setInterval():

    -Exemplo com uma API de bitcoin:

    setInterval( () => {
        axios.get("https://api.binance.com/api/v3/avgPrice?symbol=BTCUSDT")
        .then( response => {
            console.log(response.data.price)
        })
        .catch( error => {
            console.log(error)
        })
    }, 1000)

    Foi especificado o valor de 1000 para o setInterval(), portanto de 1 em 1 segundo é atualizado o valor atual do bitcoin.

    -Exemplo com uma API de cotação de dolar e euro:
    https://docs.awesomeapi.com.br/api-de-moedas

    setInterval( () => {
        axios.get("https://economia.awesomeapi.com.br/json/USD-BRL/1")
        .then( response => {
            console.log(response.data[0].name)
            console.log("Low: " + response.data[0].low)
            console.log("High: " + response.data[0].high)
        })
        .catch( error => {
            console.log(error)
        })
    }, 5000)

    ////////////////////////////////////////////////////////////////////////////

////    -AXIOS x FETCH (MÉTODO POST):  
    
    const dados = {
        title: "Título",
        content: "Conteúdo",
        userId: 1
    }

    fetch("https://jsonplaceholder.typicode.com/todos", {
        method:"POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(dados)
    })
    .then( response => response.json())    
    .then( data => {
        console.log(data);
    })
    .catch( error => {
        console.log(error)
    })

    /////

    axios.post("https://jsonplaceholder.typicode.com/todos" , dados)
    .then( response => {
        console.log(response.data)
    })
    .catch( error => {
        console.log(error)
    })


%%     */</script>











>>>>    <script>/* FORMULARIO
    //VIDEO: https://www.youtube.com/watch?v=0oKKt4775ow

    //TIPOS DE FORMULARIO

    <form action="https://....." method="POST">   //*por padrão é o método GET

      <fieldset> //*Para criar seções no formulário (Opcional)
        <legend>NOME DO FORMULÁRIO</legend>      //*Serve para dar um título para uma seção fieldset de um formulário.

        <div>
            <label for="idtexto">Texto: </label>
            <input type="text" id="idtexto" name="idtexto" minlength="3" maxlegth="10" size="10" placeholder="Texto" required />
        </div>

        <div>
            <label for="idpassword">Senha: </label>
            <input type="password" id="idpassword" name="idpassword" placeholder="Digite sua senha" minlength="8" required inputmode="numeric" autocomplete="off"/>
        </div>
        // pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" => At least one  number and one uppercase and lowercase letter, and at least 8 or more characters
        //pattern=".{8,}" => At least eight or more characters

        <div>
            <label for="idcpf">CPF: </label>
            <input type="cpf" id="idcpf" name="idcpf" pattern="\d{3}\.\d{3}\.\d{3}-\d{2}" title="Digite um CPF no formato: xxx.xxx.xxx-xx" minlength="11" required />
        </div>
        //torne os pontos e traço opcionais aceitando a entrada só de números como válida também \d{3}\.?\d{3}\.?\d{3}-?\d{2}
        //É possível aceitar CPF e CNPJ no mesmo campo usando pattern="(\d{3}\.?\d{3}\.?\d{3}-?\d{2})|(\d{2}\.?\d{3}\.?\d{3}/?\d{4}-?\d{2})" 
        //<input type="text" name="cpf"  pattern="(\d{3}\.?\d{3}\.?\d{3}-?\d{2})|(\d{2}\.?\d{3}\.?\d{3}/?\d{4}-?\d{2})">

        <div>
            <label for="iddate">Data: </label>       //*Serve para inserir data sem fuso horário a partir de um calendário.
            <input type="date" id="iddate" name="iddate" min="2023-01-01" max="2023-12-31" />   //*min e max são opcionais
        </div>

        <div>
            <label for="iddatetime">Hora e data: </label>       
            <input type="datetime-local" id="iddatetime" name="iddatetime" />
        </div>

        <div>
            <label for="idtime">Hora: </label>      
            <input type="time" id="idtime" name="idtime" min="09:00" max="18:00" />
        </div>

        <div>
            <label for="idfile">Arquivo: </label>
            <input type="file" id="idfile" name="idfile" />
        </div>
        //*é necessário adicionar na tag <form>: enctype="multipart/form-data"

        <div>
            <label for="idemail">Email: </label>
            <input type="email" id="idemail" name="idemail" placeholder="Digite o seu email" minlength="5" maxlegth="30" required />
        </div>
        //pattern="[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,}$" => characters@characters.domain (characters followed by an @ sign, followed by more characters, and then a "."

        <div> 
            <label for="idtel">Telefone: </label> 
            <input type="tel" id="idtel" name="idtel" placeholder="(99) 9999-9999" pattern="(\([0-9]{2}\))\s([9]{1})?([0-9]{4})-([0-9]{4})" title="Número de telefone precisa ser no formato (99) 9999-9999" required />
        </div>  

        <div>
            <label for="idtextarea">Caixa de texto: </label>
            <textarea id="idtextarea" name="idtextarea" rows="5" cols="50"></textarea>
        </div>

        <div>
            <label for="idcolor">Escolha uma cor: </label>
            <input type="color" id="idcolor" name="idcolor" />
        </div>

        <div>
            <label for="idnumber">Escolha um número: </label>
            <input type="number" id="idnumber" name="idnumber" min="10" max="100" />
        </div>

        <div>
            <label for="idurl">Digite a URL: </label>
            <input type="url" id="idurl" name="idurl" />
        </div>

        <div> //*Pode escolher mais de uma opção
            <label for="idcheckbox">Opções: </label> <br>
            <label for="idcheck1">Opção 1: </label>
            <input type="checkbox" id="idcheck1" name="idcheckbox" value="Opção 1" checked/> <br>   //*checked é opcional
            <label for="idcheck2">Opção 2: </label>
            <input type="checkbox" id="idcheck2" name="idcheckbox" value="Opção 2" /> <br>
            <label for="idcheck3">Opção 3: </label>
            <input type="checkbox" id="idcheck3" name="idcheckbox" value="Opção 3" /> <br>
        </div>

        <div> //*Só pode escolher 1 opção
            <label for="idradio">Opções: </label> <br>
            <label for="idradio1">Opção 1 </label>
            <input type="radio" id="idradio1" name="idradio" value="Opção 1" /> <br>
            <label for="idradio2">Opção 2 </label>
            <input type="radio" id="idradio2" name="idradio" value="Opção 2" /> <br>
            <label for="idradio3">Opção 3 </label>
            <input type="radio" id="idradio3" name="idradio" value="Opção 3" /> <br>
        </div>

        <div> //*Só pode escolher 1 opção. Pode-se colocar o atributo multiple para escolher mais de uma opção.
            <select id="idselect" name="idselect">
                <option value="option1" selected>Opção 1</option>    //*selected é opcional
                <option value="option2">Opção 2</option>
                <option value="option3">Opção 3</option>
            </select>
        </div>


        <div>
            <input type="range" id="idrange" name="idrange" min="-10" max="10" step="1" />
        </div>

        <input type="submit" value="ENVIAR" />

        <input type="reset" value="LIMPAR" />
    
    </form>

        Obs: É melhor enviar o form através de javascript no form:
        <form onsubmit="return ENVIAR(this)">
            .....
        </form>
        ou usando onclick no botão (ou um addEventListener também):
        <input type="button" onclick="FunçãoJavascript()" value="Botão" />

        Obs: É possível inserir o atributo title em um campo de input, e ele será mostrado quando não atender algum requisito:
        <input id="example" type="text" name="text" title="Faltam requisitos" pattern="[0-9]{5}" required/>

     ///////////////////////////////////////////////////////////////////////////////////////////////

     VIDEO: https://www.youtube.com/watch?v=PQs8mwWmP6E

////     PARA COLETAR OS DADOS DE UM FORMULÁRIO

    -Coletando os dados de type="text":

    HTML:
    <label for="idnome">Nome: </label>
    <input type="text" id="idnome" name="idnome" placeholder="Digite o seu nome" minlength="3" maxlegth="15" required />
    <input type="button" onclick="ENVIAR()" value="Enviar" />

    JS:
    function ENVIAR() {
        let nome = document.getElementById("idnome").value
        console.log(nome)
    }

    //////////////////

    -Coletando os dados de type="email":

    HTML:
    <label for="idemail">Email: </label>
    <input type="email" id="idemail" name="idemail" placeholder="Digite o seu email" minlength="5" maxlegth="30" required />
    <input type="button" onclick="ENVIAR()" value="Enviar" />

    JS:
    function ENVIAR() {
        let email = document.getElementById("idemail").value
        console.log(email)
    }

    /////////////////////

    -Coletando os dados de type="select":

    HTML:
    <select id="idselect" name="idselect">
        <option value="Opção 1">Opção 1</option>   
        <option value="Opção 2">Opção 2</option>
        <option value="Opção 3">Opção 3</option>
    </select>
    <input type="button" onclick="ENVIAR()" value="Enviar" />

    JS:
    function ENVIAR() {
        let select = document.getElementById("idselect").value
        console.log(select)
    }

    ////////////////////

    -Coletando os dados de type="radio":

    HTML:
    <label for="idradio">Opções: </label> <br>
    <label for="idradio1">Opção 1 </label>
    <input type="radio" id="idradio1" name="idradio" value="Opção 1" /> <br>
    <label for="idradio2">Opção 2 </label>
    <input type="radio" id="idradio2" name="idradio" value="Opção 2" /> <br>
    <label for="idradio3">Opção 3 </label>
    <input type="radio" id="idradio3" name="idradio" value="Opção 3" /> <br>
    <input type="button" onclick="ENVIAR()" value="Enviar" />

    JS:
    function ENVIAR() {
        const radio = document.querySelector("input[name=idradio]:checked").value;
        console.log(radio);
    }

    /////////////////////

    -Coletando os dados de type="checkbox":

    HTML:
    <label for="idcheckbox">Opções: </label> <br>
    <label for="idcheck1">Check 1: </label>
    <input type="checkbox" id="idcheck1" name="idcheckbox" value="Opção 1" /> <br>
    <label for="idcheck2">Check 2: </label>
    <input type="checkbox" id="idcheck2" name="idcheckbox" value="Opção 2" /> <br>
    <label for="idcheck3">Check 3: </label>
    <input type="checkbox" id="idcheck3" name="idcheckbox" value="Opção 3" /> <br>
    <input type="button" onclick="ENVIAR()" value="Enviar" />

    JS: (FORMA 1 COM QUERY SELECTOR ALL)
    function ENVIAR() {
        let options = [];
        let checkbox = document.querySelectorAll("[name=idcheckbox]:checked");
        for (let i = 0 ; i < checkbox.length ; i++) {
            options.push(checkbox[i].value);
        }
        console.log(options);
    }

    JS: (FORMA 2 COM GET ELEMENTS BY NAME)
    function ENVIAR() {
        let options = [];
        let checkbox = document.getElementsByName("idcheckbox");
        for (let i = 0 ; i < checkbox.length ; i++) {
          if(checkbox[i].checked) {
            options.push(checkbox[i].value);
          }
        }
        console.log(options);
    }

////    ////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=3bGQ7s0mnHY

    PARA CRIAR MASCARA DE INPUT DE CPF COM JAVASCRIPT PURO

    HTML:
    <form>
        <div>
            <label for="idcpf">CPF: </label>
            <input type="text" id="idcpf" name="idcpf" placeholder="Digite seu CPF" maxlength="14" autocomplete="off" oninput="this.value = this.value.replace(/[^0-9.-]/g, '')" required />
        </div>
    </form>

    JS:
    const cpf = document.getElementById("idcpf")

    cpf.addEventListener("keypress" , () => {
        let cpflength = cpf.value.length

        if (cpflength === 3 || cpflength === 7) {
            cpf.value += "."
        }
        else if (cpflength === 11) {
            cpf.value += "-"
        }
    })
    

    ///////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=LT8eZdodA_0

////    PARA CRIAR MASCARA DE INPUT DE CPF, TEL, EMAIL, ETC... COM JQUERY

    -Fazer o download do jquery no site: https://jquery.com/download/   (pegar a url de Download the compressed, production jQuery ...)
    -Instalar o jquery no html, antes do fim do < body >:
    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script >

    -Fazer o download do jquery mask plugin no site: https://cdnjs.com/libraries/jquery.mask
    -Instalar o jquery mask plugin no html, antes do fim do < body >: 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script >

    -Utilizar uma das máscaras disponíveis no site: https://igorescobar.github.io/jQuery-Mask-Plugin/docs.html
    -Adicionar a máscara em um <script> antes do fim do < body > e APÓS OS SCRIPTS ACIMA:
    
    Exemplo:
    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>
        $('#date').mask('00/00/0000');
        $('#time').mask('00:00:00');
        $('#date_time').mask('00/00/0000 00:00:00');
        $('#cep').mask('00000-000');
        $('#phone').mask('0000-0000');
        $('#phone_with_ddd').mask('(00) 0000-0000');
        $('#phone_with_ddd').mask('(00) 00000-0000');    //*celular no brasil
        $('#mixed').mask('AAA 000-S0S');
        $('#cpf').mask('000.000.000-00', {reverse: true});
        $('#cnpj').mask('00.000.000/0000-00', {reverse: true});
        $('#money').mask('000.000.000.000.000,00', {reverse: true});
        $('#money2').mask("#.##0,00", {reverse: true});
        $('#percent').mask('##0,00%', {reverse: true});
        $('#clear-if-not-match').mask("00/00/0000", {clearIfNotMatch: true});
        $('#placeholder').mask("00/00/0000", {placeholder: "__/__/____"});
        $('#selectonfocus').mask("00/00/0000", {selectOnFocus: true});
    < /script>

////    JQUERY MASK PARA CPF:

    <label for="idcpf">CPF: </label>
    <input type="cpf" id="idcpf" name="idcpf" placeholder="Digite o seu CPF" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        $('#idcpf').mask('000.000.000-00', {reverse: true});
    </ script>

    ////////////////////

////    JQUERY MASK PARA CNPJ:

    <label for="idcnpj">CNPJ: </label>
    <input type="cpf" id="idcnpj" name="idcnpj" placeholder="Digite o seu CNPJ" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        $('#idcnpj').mask('00.000.000/0000-00', {reverse: true});
    </ script>

    ////////////////////

////    JQUERY MASK PARA CPF E CNPJ JUNTOS:

    <label for="idcpfcnpj">CPF/CNPJ: </label>
    <input type="cpf" id="idcpfcnpj" name="idcpfcnpj" placeholder="Digite o seu CPF ou CNPJ" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        var options = {
                onKeyPress : function(cpfcnpj, e, field, options) {
                    var masks = ['000.000.000-009', '00.000.000/0000-00'];
                    var mask = (cpfcnpj.length > 14) ? masks[1] : masks[0];
                    $('#idcpfcnpj').mask(mask, options);
                }
        };

        $('#idcpfcnpj').mask('000.000.000-009', options);
    </ script>

    ///////

    Outra forma (mais trabalhosa):

    <label>CPF/CNPJ</label>
    <input type="text" name="cpfCnpj" class="form-control" />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></ script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js"></ script>
    <script>
        var CpfCnpjMaskBehavior = function (val) {
            return val.replace(/\D/g, '').length <= 11 ? '000.000.000-009' : '00.000.000/0000-00';
        },
        cpfCnpjpOptions = {
            onKeyPress: function(val, e, field, options) {
                field.mask(CpfCnpjMaskBehavior.apply({}, arguments), options);
            }
        };

        $(function() {
            $(':input[name=cpfCnpj]').mask(CpfCnpjMaskBehavior, cpfCnpjpOptions);
        })
    </ script>

    ////////////////////

////    JQUERY MASK PARA CEP:
    
    <label for="idcep">CEP: </label>
    <input type="text" id="idcep" name="idcep" placeholder="Digite o seu CEP" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        $('#idcep').mask('00000-000');
    </ script>

    ////////////////////

////    JQUERY MASK PARA TELEFONE:
    
    <label for="idtel">TELEFONE: </label>
    <input type="tel" id="idtel" name="idtel" placeholder="(99) 9999-9999" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        $('#idtel').mask('(00) 0000-0000');
    </ script>

    ////////////////////

////    JQUERY MASK PARA CELULAR:
    
    <label for="idcel">CELULAR: </label>
    <input type="tel" id="idcel" name="idcel" placeholder="(99) 99999-9999" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        $('#idcel').mask('(00) 00000-0000');
    </ script>

    ////////////////////

////    JQUERY MASK PARA VALOR EM REAL (R$):
    
    <label for="idvalor">VALOR: </label>
    <input type="text" id="idvalor" name="idvalor" placeholder="R$ 0,00" maxlength="20" required />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js">< /script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.js">< /script>
    <script>  
        $('#idvalor').mask("#.##0,00", {reverse: true});
    </ script>
    
    ////////////////////////////////////////////////////////////

    PATTERNS
    link: https://www.html5pattern.com/

////    Caracteres:

    -   =   -
    .   =   \.
    (   =   \(
    )   =   \)

    ////

////    Dicionário:

    [0-9]{3}  =  Significa 3 números de 0 a 9
    [a-z]{2}  =  Significa 2 letras de "a" a "z"
    [A-Z]{4}  =  Significa 4 letras de "A" a "Z"
    [0-9]{3,}  =  Significa no mínimo 3 números de 0 a 9
    \([0-9]{2}\)   =  Significa 2 números de 0 a 9 entre parenteses. Exemplo: (21)
    [0-9a-zA-z]{5} = Significa 5 caracteres que podem ser: 0 a 9  ou  a até z  ou  A até Z
    [0-9]{1,10} = Significa entre 1 e 20 caracteres de 0 a 9
    [a-zA-Z]{10} [a-zA-Z]{10} = Significa 2 palavras com 10 caracteres de "A" até "Z" ou "a" até "z" com um espaço entre as duas palavras
    ^[a-zA-Z]{2}[0-9]{2}$  = Significa que deve começar com 2 letras e terminar com 2 números
    \w{5} = Significa 5 caracteres que pode ser: A-Z ou a-z ou 0-9 ou _
    \d{5} = Significa 5 números
    \d+ = Significa para 1 ou ou mais números
    [,.] = Significa que pode usar , ou .

    ////

////    Tipos:

    Alfanumérico com 1 ou mais caracteres = [a-zA-Z0-9]+
    Username com 1 a 20 caracteres = ^[a-zA-Z]{1,20}$    ou    ^[a-zA-Z0-9_.]{1,20}$
    Password (precisa ter maiúsculas, minúsculas e número) = ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).*$
    Senha com 6 digitos: [a-zA-Z0-9]{6}
    Password com no mínimo 8 caracteres (precisa ter maiúsculas, minúsculas e número/caractere especial) = (?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$
    Número de cartão de crédito = [0-9]{13,16}
    Número de cartão de crédito AMEX = [0-9]{4} *[0-9]{6} *[0-9]{5}
    CEP = [0-9]{5}[\-]?[0-9]{3}
    Data (DD.MM.AAAA) = (0[1-9]|1[0-9]|2[0-9]|3[01]).(0[1-9]|1[012]).[0-9]{4}
    Validação completa de data (DD-MM-AAAA)= (?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))-(?:(?:0[1-9]|1[0-2])-(?:19|20)[0-9]{2}
    Hora (hh:mm:ss) : (0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}
    Telefone (+99(99)9999-9999) = [\+]\d{2}[\(]\d{2}[\)]\d{4}[\-]\d{4} 
    Celular ((99)99999-9999) = \([0-9]{2}\)[9]{1}[0-9]{4}-[0-9]{4}
    CPF (999.999.999-99) = [0-9]{3}[\.?][0-9]{3}[\.?][0-9]{3}[\-?][0-9]{2} 
    Email (não use pattern) = <input type="email" name="" value="" required />
    Número com ou sem decimal (Ex: 9 ou 9.9 ou 9,9) = [-+]?[0-9]*[.,]?[0-9]+
    Preço (1.00) = \d+(\.\d{2})?
    Preço (1,00) = \d+(,\d{2})?

    /////

%%     */</script>    














>>>>    <script>/* JQUERY
    VIDEO: https://www.youtube.com/watch?v=i0wey6VkLf0&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn

    Colocar o CDN antes do fim do body no html: (ou dentro da head)

    -Versão comprimida do site https://jquery.com/download/ :
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></ script>

    ou

    -Versão não comprimida do site https://releases.jquery.com/ :
    <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></ script> 

    -Para usar um arquivo do Jquery ao invés do link do CDN, é preciso colocar dentro da tag head:
    <script src="./jquery-3.7.1.min.js">< /script>

    ////////////////////////////////////////////////////////////////////////////////
    
////    PARA MANIPULAR UMA TAG, CLASSE OU ID NO JQUERY
    VIDEO: https://www.youtube.com/watch?v=i0wey6VkLf0&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn

    <p> tag </p>
    <div class="CLASSE"> Classe </div>
    <div id="ID"> Identificador </div>
    
    <script>   //após o body
        $("p").css("color","#fff")   //manipulando uma tag
        $(".CLASSE").css("color","#fff")   //manipulando uma classe
        $("#ID").css("color","#fff")   //manipulando uma ID
    </ script>

    Obs: O $ pode ser substituído por jQuery:
    jQuery("p").css("color","#fff")

    ///////////////////////////////////////////////////////////////////////////////

////    PARA PEGAR O VALOR DE UM INPUT (.value):
    VIDEO: https://www.youtube.com/watch?v=4-Zs_qKqSYM&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3
    
    <label for="idvalor"> Valor 1 </label>
    <input type="text" id="idvalor" value="0" />

    <script>
        var v1 = $("#idvalor").val()
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA PEGAR O CLICK DO MOUSE (onclick):
    VIDEO: https://www.youtube.com/watch?v=4-Zs_qKqSYM&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <input type="button" id="idbutton" value="Botão" />

    <script>
        $("#idbutton").click( () => {
            instrução a ser realizada ao clicar o mouse
        })
    </ script>

    //////

////    -Caso queira um clique duplo do mouse, é preciso usar o evento .dblclick:

    <input type="button" id="idbutton" value="Botão" />

    <script>
        $("#idbutton").dblclick( () => {
            instrução a ser realizada ao clicar duas vezes no mouse
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA INSERIR OU ALTERAR UM TEXTO EM UMA TAG (.innerHTML):
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <div id="ID"></div>

    <script>
        $("#ID").text("Texto de exemplo")
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA USAR O JQUERY NA TAG HEAD (ao invés de antes do fim do body):
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    < head>
        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></ script>
        <script>
            $(document).ready( () => {
                $("#ID").text("Texto de exemplo")
            })
        </ script>
    </ head>

    < body>
        <div id="ID"></div>
    < /body>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA ALTERAR UM TEXTO EM UMA TAG COM CLICK DO MOUSE:
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <div id="ID"></div>
    <input type="button" id="idbutton" value="Botão" />

    <script>
        $("#ID").text("Texto original")
        $("#idbutton").click( () => {
            $("#ID").text("Texto modificado")
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA ALTERAR UM CONTEÚDO DE UMA TAG AO PASSAR O MOUSE POR CIMA (onmouseover):
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <div id="ID">Texto original</div>

    <script>
        $("#ID").mouseenter( () => {
            $("#ID").text("Texto modificado")
        })
    </ script>

////    -O mesmo efeito pode ser obtido com o .hover:
    
    <div id="ID">Texto original</div>

    <script>
        $("#ID").hover( () => {
            $("#ID").text("Texto modificado")
        })
    </ script>


    ///////////////////////////////////////////////////////////////////////////////

////    PARA ALTERAR UM CONTEÚDO DE UMA TAG AO RETIRAR O MOUSE DE CIMA (onmouseout):
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <div id="ID">Texto original</div>

    <script>
        $("#ID").mouseleave( () => {
            $("#ID").text("Texto modificado")
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA ALTERAR UM CONTEÚDO DE UMA TAG AO MOVER O MOUSE EM CIMA DO CONTEÚDO:
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <div id="ID">Texto original</div>

    <script>
        $("#ID").mousemove( () => {
            $("#ID").text("Texto modificado")
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA ALTERAR UM CONTEÚDO DE UMA TAG AO DIGITAR OU PRESSIONAR UMA TECLA DO TECLADO:
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <input type="text" id="ID" />
    <div id="idtexto"></div>

    <script>
        $("#ID").keydown( () => {
            $("#texto").text("Apertou a tecla")
        })
        $("#ID").keyup( () => {
            $("#idtexto").text("Soltou a tecla")
        })
    </ script>

    Info:
    keydown = quando a tecla for baixada (descer)
    keyup = quando a tecla for liberada (subir)
    keypress = quando a tecla for pressionada

    <input type="text" id="ID" />
    <div id="idtexto"></div>

    <script>
        $("#ID").keypress( () => {
            $("#idtexto").text("Pressionou a tecla")
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA PEGAR O CONTEÚDO DIGITADO EM UM INPUT E COLOCAR AO VIVO EM OUTRA TAG:
    VIDEO: https://www.youtube.com/watch?v=Q4qSTLRM5wU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=3

    <input type="text" id="ID" />
    <div id="idtexto"></div>

    <script>
        $("#ID").keyup( () => {
            $("#idtexto").text($("#ID").val())
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////

////    PARA FAZER ALGO APARECER OU DESAPARECER COM UM FADEIN OU FADEOUT COM TEMPO:

    <div id="ID"> Texto que desaparecerá </div>
    <input type="button" value="Botão" id="idbutton">

    <script>
        $("#idbutton").click (() => {
            $("#ID").fadeOut( 1000 );
        })
    </ script>

    No exemplo acima, o fadeOut está com 1000 milisegundos = 1 segundo

    Outro exemplo:
    
    <p>
        <input type="text" /> 
        <span>Texto que desaparecerá</span> 
    </p>

    $( "input" ).on( "focus", function() {
        $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );
    } );
    </ script>

    ////

////    -Para fazer aparecer texto que desapereceu, é possível usar o .fadeIn():

    <div id="ID"> Texto que aparecerá </div>
    <input type="button" value="Botão" id="idbuttonshow">

    <script>
        $("#idbuttonshow").click (() => {
            $("#ID").fadeIn( 1000 );
        })
    </ script>

    ////

////    -É possível usar o .show ao invés do .fadeIn():

    <div id="ID"> Texto que aparecerá </div>
    <input type="button" value="Botão" id="idbuttonshow">

    <script>
        $("#idbuttonshow").click (() => {
            $("#ID").show( 1000 );   //*O intervalo de tempo de fadeIn é opcional = $("#ID").show();
        })
    </ script>

    //////////////////////////////////////////////////////////////////////////////

////    PARA USAR A FUNÇÃO ON PARA MANIPULAR OU ADICIONAR VÁRIOS EVENTOS
    VIDEO: https://www.youtube.com/watch?v=j7fRYDO4yYI&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=5

    -Para usar diferentes eventos realizando a mesma instrução:

    <div id="ID">Texto original</div>

    <script>
        $("#ID").on( "click dblclick" , () => {
            $("#ID").text("Texto modificado")
        })
    </ script>

    No exemplo acima, foram atribuídos os dois eventos click e dblclick, separados por um espaço.

    //////////////

    -Para usar diferentes eventos realizando diferentes instruções:

    <div id="ID">Texto original</div>

    <script>
        $("#ID").on({
            click: () => {$("#ID").text("Texto 1")},    //*Não esqueça da virgula após fechar as chaves
            dblclick: () => {$("#ID").text("Texto 2")},
            mouseenter: () => {$("#ID").text("Texto 3")},
            mouseleave: () => {$("#ID").text("Texto 4")}   
        })
    </ script>

    //////////////////////////////////////////////////////////////////////////////////

////    PARA CHAMAR UM EVENTO SEM QUE ELE TENHA SIDO CHAMADO COM TRIGGER
    VIDEO: https://www.youtube.com/watch?v=RReTCVFifEM&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=7

    <div id="ID"></div>

    <script>
        $("#ID").on({
            click: () => {$("#ID").text("Texto de exemplo")}   
        })

        $("#ID").trigger("click")
    </ script>

    No exemplo acima, o evento click foi iniciado sem precisar clicar no alvo.

    ///////

    -Para disparar um evento através de outro elemento:

    <div id="ID1">Texto 1</div>
    <div id="ID2">Texto 2</div>
    <p id="texto"></p> 

    <script>
        $("#ID1").on({
            click: () => {$("#texto").text("Texto 3")}  
        })

        $("#ID2").click( () => {
            $("#ID1").trigger("click")
        })
    </ script>

    No exemplo acima, o evento click da ID1 foi disparado pela ID2

    //////////////////////////////////////////////////////////////////////////////////////////
    
////    PARA PEGAR OS VALORES DO EIXO X E Y AO MOVER O MOUSE
    VIDEO: https://www.youtube.com/watch?v=kddo7DU7e64&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=7

    <div id="ID"></div>

    <script>
        $(document).mousemove( (event) => {
            $("#ID").text("Mouse X: " + event.pageX + ", Mouse Y: " + event.pageY)
        })
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////


////    PARA USAR O EVENT
    VIDEO: https://www.youtube.com/watch?v=Uvdu9fldy0s&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=9

    <div id="ID1">CLIQUE AQUI</div>
    <div id="ID2"></div>

    <script>
        $("#ID1").click ( (event) => {
            $("#ID2").text("Mouse X: " + event.pageX)
        })
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////

////    PARA MOSTRAR O ALVO SELECIONADO AO CLICAR USANDO O EVENT.TARGET
    VIDEO: https://www.youtube.com/watch?v=Uvdu9fldy0s&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=9

    -Para mostrar o tipo de tag:

    <div id="ID1">CLIQUE AQUI</div>
    <div id="ID2"></div>

    <script>
        $("#ID1").click ( (event) => {
            $("#ID2").text("Objeto que foi clicado: " + event.target.nodeName)
        })
    </ script>

    Ao clicar, será impresso:
    >>> Objeto que foi clicado: DIV

    /////

////    -Caso queira aplicar o target em todo o documento para saber a tag:

        <h1 id="h1">Tag h1</h1>
        <p id="p">Tag P</p>
        <div id="div">Tag div</div>
        <div id="ID"></div>

    <script>
        $(document).click ( (event) => {
            $("#ID").text("Objeto que foi clicado: " + event.target.TagName)    //*ou nodeName
        })
    </ script>

    /////

////    -Caso queira aplicar o target para saber o id:

    <script>
        $(document).click ( (event) => {
            $("#ID").text("Objeto que foi clicado: " + event.target.id)    
        })
    </ script>

    /////

////    -Caso queira aplicar o target para saber a classe:

    <script>
        $(document).click ( (event) => {
            $("#ID").text("Objeto que foi clicado: " + event.target.className)    
        })
    </ script>

    ///////

////   Ao identificar o tipo de objeto clicado, é possível utilizar em conjunto com o if para realizar instruções:

    <h1 id="id-H1">Tag h1</h1>
    <p id="id-P">Tag p</p>
    <div id="id-DIV">Tag div</div>            

    <script>
        $(document).click ( (event) => {
            if (event.target.id === "id-DIV") {
                alert("Você clicou no id da DIV")
            }
        })
    </ script>

    //////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA SABER QUE TIPO DE EVENTO FOI DISPARADO

    <div id="ID"></div> 

    <script>
        $(document).on({
            click: () => {$("#ID").text("Evento: " + event.type + " = " + event.which)}
        })
    </ script>

    Caso seja clicado o botão esquerdo do mouse, será impresso:
    >>> Evento: click = 1

    O número 1 corresponde ao botao esquerdo do mouse

    /////

////    -Para saber qual tecla do teclado foi pressionada:

    <div id="ID"></div> 

    <script>
        $(document).on({
            keydown: () => {$("#ID").text("Evento: " + event.type + " = " + event.which)}
        });
    </ script>

    Caso seja digitada a tecla SHIFT, será impresso:
    >>> Evento: keydown = 16

    Caso seja digitada a tecla CTRL, será impresso:
    >>> Evento: keydown = 17

    Caso seja digitada a tecla ENTER, será impresso:
    >>> Evento: keydown = 13

    Caso seja digitada a tecla BARRA DE ESPAÇO, será impresso:
    >>> Evento: keydown = 32

    Caso seja digitada a tecla ESC, será impresso:
    >>> Evento: keydown = 27

    Caso seja digitada a tecla CIMA, será impresso:
    >>> Evento: keydown = 38

    Caso seja digitada a tecla BAIXO, será impresso:
    >>> Evento: keydown = 40

    Caso seja digitada a tecla ESQUERDA, será impresso:
    >>> Evento: keydown = 37

    Caso seja digitada a tecla DIREITA, será impresso:
    >>> Evento: keydown = 39

    /////

////    Com isso pode-se utilizar em conjunto com o if para realizar certas instruções:

    <script>
        $(document).on({
            keydown: () => {
                if (event.which === 32) {
                    alert("Você digitou a barra de espaço");
                }
            }
        })
    </ script>

    ////////////////////////////////////////////////////////////////////////////////////////////

////    COMO PARAR A PROPAGAÇÂO DE UM EVENTO 
    VIDEO: https://www.youtube.com/watch?v=Z1qyJ8NQ6Wo&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=10       

    <div>Texto da DIV
        <p> Texto do P <br><br>
            <span>Texto do SPAN</span>
        </p>
    </div>

    <script>
        $("div").click( () => {alert("Evento disparado na DIV")});
        $("p").click( () => {alert("Evento disparado no P")});
        $("span").click( () => {event.stopPropagation();alert("Evento disparado no SPAN")});
    </ script>

    Caso não tivesse sido colocado o stopPropagation(), o alerta apareceria para todas as tags acima do span (DIV e P).

    Para que não ocorra o mesmo com a tag p, é preciso colocar o stopPropagation() também:
        $("p").click( () => {event.stopPropagation();alert("Evento disparado no P")})

    -Código também poderia ter sido escrito com o parâmetro event dentro dos parenteses:
    
    <script>
        $("div").click( (event) => {alert("Evento disparado na DIV")});
        $("p").click( (event) => {event.stopPropagation();alert("Evento disparado no P")});
        $("span").click( (event) => {event.stopPropagation();alert("Evento disparado no SPAN")});
    </ script>

    ////////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA APLICAR ALGO EM UM ELEMENTO PAI ATRAVÉS DO ELEMENTO FILHO
    VIDEO: https://www.youtube.com/watch?v=hw18CuNklnw&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=11
    
    <ul>
        <li>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("p").parent().css({"border":"1px solid red"});
    </ script>

    No exemplo acima, a borda vermelha foi aplicada no elemento pai da tag <p>, no caso a tag <li>

    ////

////    Caso queira aplicar em todos os elementos pais acima, é preciso usar o parents():

    <ul>
        <li>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("p").parents().css({"border":"1px solid red"});
    </ script>

    No exemplo acima, a borda vermelha foi aplicada nos elemento pais da tag <p>, no caso as tags <li>, <ul>, <body> e <html>

    ////

////    Caso queira aplicar em todos os elementos pais acima até um certo ponto, é preciso usar o parentsUntil("..."):

    <ul>
        <li>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("p").parentsUntil("ul").css({"border":"1px solid red"});
    </ script>        

    No exemplo acima, a borda vermelha foi aplicada até a tag li.
    O parentsUntil também pode ser aplicado com outras coisas além de tags, como id e classe:

    $("p").parentsUntil("#ID").css({"border":"1px solid red"});
    ou
    $("p").parentsUntil(".CLASSE").css({"border":"1px solid red"});

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA APLICAR ALGO EM UM ELEMENTO FILHO ATRAVÉS DO ELEMENTO PAI
    VIDEO: https://www.youtube.com/watch?v=ZbFMkH_1qrg&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=12

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("li").children().css({"border":"1px solid red"});
    </ script>    

    No exemplo acima, a borda vermelha foi aplicada em todas as tags filho da tag <li> (h3, span e p)

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA ENCONTRAR E APLICAR ALGO EM UM ELEMENTO FILHO
    VIDEO: https://www.youtube.com/watch?v=ZbFMkH_1qrg&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=12

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("li").find("span").css({"border":"1px solid red"});
    </ script>    

    No exemplo acima, a borda vermelha foi aplicada apenas na tag <span>

    /////

////    -Caso queira especificar pela posição (primeiro ou último):

    Para aplicar somente no primeiro elemento:

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("ul").find("li.first").css({"border":"1px solid red"});
    </ script>   

    No exemplo acima, a borda vermelha foi aplicada apenas na primeira lista <li>

    /////

    Para aplicar somente no último elemento:

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("ul").find("li.last").css({"border":"1px solid red"});
    </ script>   

    No exemplo acima, a borda vermelha foi aplicada apenas na última lista <li>

    //////

    Para aplicar em todos os elementos filhos:

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("ul").find("*").css({"border":"1px solid red"});
    </ script>   

    No exemplo acima, a borda vermelha foi aplicada em todos os elementos da tag <ul>

    ////////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA APLICAR ALGO EM UM ELEMENTO IRMÃO

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("h3").siblings().css({"border":"1px solid red"});
    </ script> 

    No exemplo acima, a borda vermelha foi aplicada em todos os elementos irmãos da tag h3 (span e p). A tag h3 não recebe nada.

    //////

////    Caso queira especificar qual irmão será escolhido:

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("h3").siblings("p").css({"border":"1px solid red"});
    </ script> 

    No exemplo acima, a borda vermelha foi aplicada apenas na tag irmã <p>. 

    //////

////    Caso queira aplicar no irmão a seguir:

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("h3").next().css({"border":"1px solid red"});
    </ script> 

    No exemplo acima, a borda vermelha foi aplicada apenas no irmão seguinte da tag <h3>, no caso a tag <span>. 

////    -Há também o nextAll(), que seleciona todos os irmãos após:
        $("h3").nextAll().css({"border":"1px solid red"});

////    -E também o nextUntil("..."), que seleciona todos os irmãos a seguir, até um certo ponto:
        $("h3").nextUntil("p").css({"border":"1px solid red"});

    //////

////    Caso queira aplicar no irmão anterior:

    <ul>
        <li>
            <h3>Titulo h3</h3>
            <span>Texto span</span>
            <p>Texto p</p>
        </li>
    </ul>

    <script>
        $("p").prev().css({"border":"1px solid red"});
    </ script> 

    No exemplo acima, a borda vermelha foi aplicada apenas no irmão anterior da tag <p>, no caso a tag <span>. 

////    -Há também o prevAll(), que seleciona todos os irmãos anteriores:
        $("p").prevAll().css({"border":"1px solid red"})

    
////    -E também o prevUntil("..."), que seleciona todos os irmãos anteriores, até um certo ponto:
        $("p").prevUntil("h3").css({"border":"1px solid red"});

    /////////////////////////////////////////////////////////////////////////////////////////////////

////    PARA FILTRAR ELEMENTOS COM FIRST, LAST E EQ
    VIDEO: https://www.youtube.com/watch?v=Ol639zuvoes&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=14

////    -Para filtrar e selecionar apenas o primeiro elemento:

    <p>Texto 1</p>    
    <p>Texto 2</p> 
    <p>Texto 3</p> 
    <p>Texto 4</p>  

    <script>
        $("p").first().css({"color":"red"});
    </ script>

    /////

////    -Para filtrar e selecionar apenas o último elemento:

    <p>Texto 1</p>    
    <p>Texto 2</p> 
    <p>Texto 3</p> 
    <p>Texto 4</p>  

    <script>
        $("p").last().css({"color":"red"});
    </ script>

    /////

////   -Para filtrar mais de um elemento:

    <p>Texto p 1</p>    
    <h3>Texto h3 1</h3> 
    <p>Texto p 2</p> 
    <h3>Texto h3 2</h3>  

    <script>
        $("p h3").first().css({"color":"red"});
    </ script>

    Não funciona?????

    /////

////    -Para filtrar e selecionar um elemento através da sua posição:

    <p>Texto na posição 0</p>    
    <p>Texto na posição 1</p> 
    <p>Texto na posição 2</p> 
    <p>Texto na posição 3</p>  

    <script>
        $("p").eq("2").css({"color":"red"});
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////////

////    PARA FILTRAR E SELECIONAR ELEMENTOS E APLICAR MUDANÇAS USANDO O FILTER E O NOT   
    VIDEO: https://www.youtube.com/watch?v=KC8K2r-b39o&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=16
    
    -Para filtrar pelo ID:

    <p id="ID1">Texto 1</p>    
    <p id="ID2">Texto 2</p>  
    <p id="ID3">Texto 3</p>   
    <p id="ID4">Texto 4</p>  

    <script>
        $("p").filter("#ID3").css({"color":"red"})
    </ script>

    ///////////

////   -Para filtrar pela classe:

    <p class="classe1">Texto 1</p>    
    <p class="classe2">Texto 2</p>    
    <p class="classe3">Texto 3</p>     
    <p class="classe4">Texto 4</p>    

    <script>
        $("p").filter(".classe3").css({"color":"red"});
    </ script>

    ///////////

////   -Para fazer o contrário que o filter faz e selecionar o resto com o NOT():

    <p class="classe1">Texto 1</p>    
    <p class="classe2">Texto 2</p>    
    <p class="classe3">Texto 3</p>     
    <p class="classe4">Texto 4</p>    

    <script>
        $("p").not(".classe3").css({"color":"red"});
    </ script>

    No exemplo acima, todas as tags <p> que não possuem a classe "classe3" ficarão com a cor vermelha.

    ////////////////////////////////////////////////////////////////////////////////////////////

////    PARA MOSTRAR O CONTEÚDO DE UMA TAG AO CLICAR
    VIDEO: https://www.youtube.com/watch?v=ak5GQK5SfCs&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=16

    <p id="ID1">Texto 1</p>    
    <p id="ID2">Texto 2</p>    
    <p id="ID3">Texto 3</p>     
    <p id="ID4">Texto 4</p>   

    <script>
        $("p").click(
            function() {
                alert("Texto: " + $(this).text());
            }
        )
    </ script>

    /////

    -Caso queira selecionar pelo ID ao invés da tag:

    <script>
        $("#ID3").click(
            function() {
                alert("Texto: " + $(this).text());
            }
        )
    </ script>

    ///// 

////    -Pode-se pegar o conteúdo de texto dentro de uma div ou container:

    <div id="ID">
        <h3>Título</h3>
        <p>Parágrafo</p>
    </div>

    <script>
        $("#ID").click(
            function() {
                alert("Texto: " + $(this).text());
            }
        )
    </ script>

    Ao clicar nas tags dentro da div será impresso:
    Texto:
            Título
            Parágrafo

    ///////////////

/////  -Para pegar o valor ou conteúdo de um campo de input (de formulário):

    <input type="text" id="ID" />

    <script>
        $("#ID").click(
            function() {
                alert("Texto: " + $(this).val());
            }
        )
    </ script>

    No exmeplo acima, foi usado o ID, mas poderia ter sido usado a tag ou classe.

    ///////

////    -Para pegar o conteúdo HTML de dentro da tag, inclusive a própria tag:

    <p id="ID">
        <span>Texto de exemplo</span>
    </p>    

    <script>
        $("#ID").click(
            function() {
                alert($(this).html());
            }
        )
    </ script>

    Ao clicar na tag p, aparecerá um alerta contendo "<span>Texto de exemplo</span>"

    ///////////////////////////////////////////////////////////////////////////////////////

    PARA OBTER E MODIFICAR VALORES DOS ATRIBUTOS DOS ELEMENTOS HTML COM ATTR()
    VIDEO: https://www.youtube.com/watch?v=owgYF9WeKU4&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=17
    
////    -Para pegar ou descobrir a classe ou Id de um elemento ao clicar nele:

    <p id="ID">Texto de exemplo</p>    

    <script>
        $("#ID").click(
            function() {
                alert("Atributo: " + $(this).attr("id"));
            }
        )
    </ script>
    
    No exemplo acima, ao clicar na tag <p>, surgirá um alerta contendo "Atributo: ID"

    ////

////    -Para pegar ou descobrir o style de um elemento ao clicar nele:

    <p id="ID" style="border: 1px solid red; color: blue">Texto de exemplo</p>    

    <script>
        $("#ID").click(
            function() {
                alert("Atributo: " + $(this).attr("style"));
            }
        )
    </ script>

    ////////////////

////    -Para modificar ou trocar o style de um elemento ao clicar nele mesmo:

    <style type="text/css">
        .vermelho {
            border: 1px solid red;
            color: red;
        }

        .azul {
            border: 1px solid blue;
            color: blue;
        }
    </style>

    <p id="ID" class="vermelho">Texto de exemplo</p>    

    <script type="text/javascript">
        $("#ID").click(
            function() {
                $(this).attr("class" , "azul");
            }
        )
    </ script>

    ////////

////    -Para trocar o style de outro elemento ao clicar em algo:

    <style type="text/css">
        .vermelho {
            border: 1px solid red;
            color: red;
        }

        .azul {
            border: 1px solid blue;
            color: blue;
        }
    </style>

    <p id="ID1">CLIQUE AQUI</p>    
    <p id="ID2" class="vermelho">Texto de exemplo</p>  

    <script type="text/javascript">
        $("#ID1").click(
            function() {
                $("#ID2").attr("class" , "azul");
            }
        )
    </ script>

    ///////////

////    -Utilizando botões para modificar o style de algo:

    <style type="text/css">
        .vermelho {
            border: 1px solid red;
            color: red;
        }

        .azul {
            border: 1px solid blue;
            color: blue;
        }
    </style>
       
    <p id="ID">Texto de exemplo</p>  
    <button id="btn_vermelho">VERMELHO</button>
    <button id="btn_azul">AZUL</button>

    <script type="text/javascript">
        $("#btn_vermelho").click(
            function() {
                $("#ID").attr("class" , "vermelho");
            }
        )
        $("#btn_azul").click(
            function() {
                $("#ID").attr("class" , "azul");
            }
        )
    </ script>

    ////////////////////////////////////////////////////////////////////////////

////    PARA ESCONDER OU MOSTRAR ALGO COM HIDE OU SHOW
    VIDEO: https://www.youtube.com/watch?v=WiKsK0kmzlU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=18

    <p id="ID">Texto de exemplo</p>  
    <button id="btn_mostrar">MOSTRAR</button>
    <button id="btn_esconder">ESCONDER</button>

    <script>
        $("#btn_mostrar").click(
            function() {
                $("#ID").show();
            }
        )
        $("#btn_esconder").click(
            function() {
                $("#ID").hide();
            }
        )
    </ script>

    ////////////////////////////////////////////////////////////////////////////

////    PARA CONTROLAR A VISIBILIDADE DE UM ELEMENTO COM TOGGLE (ALTERNAR ENTRE MOSTRAR E OCULTAR)
    VIDEO: https://www.youtube.com/watch?v=sFo_0fgGVc4&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=19

    <p id="ID">Texto de exemplo</p>  
    <button id="btn_mostrarocultar">MOSTRAR / OCULTAR</button>

    <script>
        $("#btn_mostrarocultar").click(
            function() {
                $("#ID").toggle();
            }
        )
    </ script>

////    -Caso queira alternar o texto exibido no botão dependendo se está mostrando ou escondendo o conteúdo

    <p id="ID">Texto de exemplo</p>  
    <button id="btn_toggle">OCULTAR</button>

    <script>
        $("#btn_toggle").click(
            function() {
                $("#ID").toggle()
                if ($("#ID").is(":visible")){
                    $("#btn_toggle").text("OCULTAR");
                }
                else{
                    $("#btn_toggle").text("MOSTRAR");
                }
            }
        )
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA MUDAR O TAMANHO OU ANIMAR UM ELEMENTO USANDO O ANIMATE
    VIDEO: https://www.youtube.com/watch?v=jSm-kIOnTvE&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=21

////    Para aumentar:

    <button id="btn_aumentar">AUMENTAR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").animate({width:"400px" , height:"400px"});
            }
        )
    </ script>

    Obs: Caso não seja especificado o tamanho em pixels (px), não é necessário colocar entre aspas:
    $("#ID").animate({width: 400 , height: 400});

    /////

////    Para diminuir:
    
    <button id="btn_diminuir">DIMINUIR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_diminuir").click(
            function() {
                $("#ID").animate({width:"100px" , height:"100px"});
            }
        )
    </ script>

    /////

////    Para fazer por etapas (primeiro aumentar a largura e depois a altura):
    
    <button id="btn_aumentar">AUMENTAR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").animate({width:"400px"}).animate({height:"400px"});
            }
        )
    </ script>

    /////

////    Para animar um elemento com uma duração ou tempo para ser executado:

    <button id="btn_aumentar">AUMENTAR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").animate({width:"400px" , height:"400px"},{duration:3000});
            }
        )
    </ script>

    //////

////    Para ir para a direita:

    <button id="btn_direita">DIREITA</button>
    <div id="ID" style="background-color:red; width:200px; height:200px; position:absolute"></div>
    
    <script>
        $("#btn_direita").click(
            function() {
                $("#ID").animate({left:"400px"});
            }
        )
    </ script>

    Obs: O elemento não se moverá se não estiver com o atributo position:absolute

    /////

////    Para realizar alguma instrução ao terminar:

    <button id="btn_direita">DIREITA</button>
    <div id="ID" style="background-color:red; width:200px; height:200px; position:absolute;"></div>

    <script>
    $("#btn_direita").click(
        function() {
            $("#ID").animate({left:"400px"} , {duration:1000 , complete: () => {
                    alert("ACABOU");
            }})							
        }
    )
    </ script>

    /////

////    Para realizar a movimentação em etapas (primeiro para a direita e depois para a esquerda):

    <button id="btn_direitaesquerda">DIREITA E ESQUERDA</button>
    <div id="ID" style="background-color:red; width:200px; height:200px; position:absolute;"></div>
    
    <script>
        $("#btn_direitaesquerda").click(
            function() {
                $("#ID").animate({left:"200px"} , {duration:1000 , complete: () => {
                        $("#ID").animate({left:"0px"} , {duration:1000});
                }})							
            }
        )
    </ script>

    //////////////////////////////////////////////////////////////////////////////////

    PARA ANIMAR UM ELEMENTO COM ANIMATE E TOGGLE
    VIDEO: https://www.youtube.com/watch?v=b-C75toFAxU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=21        

////    Para aumentar e diminuir o tamanho (até o mínimo e desaparecer):

    <button id="btn_toggle">TOGGLE</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>

    <script>
        $("#btn_toggle").click(
            function() {
                $("#ID").animate({width:"toggle" , height:"toggle"});						
            }
        )
    </ script>

    Obs: O toggle alternar entre o mínimo e o valor padrão.
    No exemplo acima, ao apertar o botão toggle, o elemento div diminui a largura e altura até o mínimo (0px).
    Ao apertar novamente o botão, ele retorna até a largura e altura padrões (200px).

    /////

////    Para mostrar ou desaparecer usando opacity:

    <button id="btn_toggle">TOGGLE</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>

    <script>
        $("#btn_toggle").click(
            function() {
                $("#ID").animate({opacity:"toggle"});					
            }
        )
    </ script>

    No exemplo acima, o toggle alternou entre opacidade 100% e 0%.

    /////

////    Caso queira adicionar uma duração à animação:

    <button id="btn_toggle">TOGGLE</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>

    <script>
        $("#btn_toggle").click(
            function() {
                $("#ID").animate({opacity:"toggle"} , {duration:1000});						
            }
        )
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////

    PARA ADICIONAR DELAY À ANIMAÇÂO:
    VIDEO: https://www.youtube.com/watch?v=-bAah9L1fGA&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=22

////    Para adicionar delay (tempo de espera antes de realizar a animação):

    <button id="btn_aumentar">AUMENTAR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").delay(1000).animate({width:"400px" , height:"400px"});
            }
        )
    </ script>

    No exemplo acima, a animação demorou 1 segundo (1000 milisegundos) para começar.

    /////

////    Caso queria adicionar delay em duas animações:

    button id="btn_aumentar">AUMENTAR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").delay(1000).animate({width:"400px"}).delay(1000).animate({height:"400px"});
            }
        )
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////

    PARA APLICAR FADEIN E FADEOUT EM UMA ANIMAÇÃO
    VIDEO: https://www.youtube.com/watch?v=JZ7lxgkMsTU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=23

////    Para desaparecer com fadeOut e mostrar com fadeIn usando dois botões:
    
    <button id="btn_ocultar">DESAPARECER</button>
    <button id="btn_mostrar">APARECER</button>
    <div id="ID">Texto de exemplo</div>
    
    <script>
        $("#btn_ocultar").click(
            function() {
                $("#ID").fadeOut();
            }
        )

        $("#btn_mostrar").click(
            function() {
                $("#ID").fadeIn();
            }
        )
    </ script>

    /////

////    Para desaparecer com fadeOut e mostrar com fadeIn usando apenas um botão:
    
    <button id="btn_ocultarmostrar">Ocultar / Mostrar</button>
    <div id="ID">Texto de exemplo</div>
    
    <script>
        $("#btn_ocultarmostrar").click(
            function() {
                $("#ID").fadeOut().fadeIn();
            }
        )
    </ script>

    /////

////    Para adicionar uma duração ou intervalo de tempo:
    
    <button id="btn_ocultar">OCULTAR</button>
    <div id="ID">Texto de exemplo</div>
    
    <script>
        $("#btn_ocultar").click(
            function() {
                $("#ID").fadeOut(1000);
            }
        )
    </ script>

    /////

////    Para adicionar um delay antes de começar:
    
    <button id="btn_ocultar">OCULTAR</button>
    <div id="ID">Texto de exemplo</div>
    
    <script>
        $("#btn_ocultar").click(
            function() {
                $("#ID").delay(1000).fadeOut();
            }
        )
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////

    PARA CONTROLAR A OPACIDADE DE UM FADEIN OU FADEOUT
    VIDEO: https://www.youtube.com/watch?v=bLpgy_419kQ&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=24
    
////    Para controlar a duração e opacidade do fade:

    Sintaxe:
    .fadeTo(duração,opacidade)

    <div id="ID">Texto de exemplo</div>
    
    <script>
        $("#btn_fade").mouseover(
            function() {
                $("#ID").fadeTo( 1000 , 0.5 );
            }
        )
    </ script>

    No exemplo acima, ao passar o mouse por cima, o elemento fará um fadeOut de 1 segundo (1000) e reduzirá a opacidade pela metade (0.5).

    Obs: Não funciona com arrow function.

    ///////////////////////////////////////////////////////////////////////////////////////

    PARA CONTROLAR O FADE E FAZER UM SUBMENU APARECER USANDO O FADETOGGLE
    VIDEO: https://www.youtube.com/watch?v=VC85PCifHSw&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=25
    
////    Para controlar a duração e opacidade do fade:

    <div id="ID" style="text-align:center">CLIQUE AQUI</div>
    <div id="submenu" style="display:none;">
        <div>Opção 1</div>
        <div>Opção 2</div>
    </div>

    
    <script>
        $("#ID").click(
            function() {
                $("#submenu").fadeToggle();
                $("#submenu").css("text-align","center") 
                $("#submenu").css("display","flex")     //*opcional caso queira que fique um do lado do outro
            }
        )
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////////

    PARA INTERROMPER UM ANIMAÇÂO E TERMINAR ELA NO MEIO
    VIDEO: https://www.youtube.com/watch?v=Of8eNg5n8gw&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=26

////    Para interromper ao aumentar e diminuir:

    <button id="btn_aumentar">AUMENTAR</button>
    <button id="btn_parar">PARAR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").animate({width:"400px" , height:"400px"} , 5000);      //*5 segundos de duração
            }
        )
        $("#btn_parar").click(
            function() {
                $("#ID").finish();
            }
        )

    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////

    PARA OBTER INFORMAÇÕES DA FILA DE ANIMAÇÕES COM QUEUE
    VIDEO: https://www.youtube.com/watch?v=TcVur7D-K3Q&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=27

////    Para saber a quantidade de animações que estão na fila:

    <button id="btn_aumentar">AUMENTAR</button>
    <button id="btn_diminuir">DIMINUIR</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    <p id="info">0</p>
    
    <script>
        $("#btn_aumentar").click(
            function() {
                $("#ID").animate({width:"400px" , height:"400px"} , 5000);      //*5 segundos de duração
                $("#info").text($("#ID").queue().length)
            }
        )
        $("#btn_diminuir").click(
            function() {
                $("#ID").animate({width:"100px" , height:"100px"} , 5000);      //*5 segundos de duração
                $("#info").text($("#ID").queue().length)
            }
        )
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////

    PARA FAZER UM ELEMENTO DESLIZAR PARA CIMA OU PARA BAIXO
    VIDEO: https://www.youtube.com/watch?v=aqfkN5WGRPI&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=28

////    <div id="ocultar_menu" style="background-color: yellow; text-align: center;">Ocultar opções</div>
    <div id="mostrar_menu" style="background-color: yellow; text-align: center;">Mostrar opções</div>
    <div id="menu" style="text-align: center;">
        <button style="background-color: red; text-align: center;">Opção 1</button>
        <button style="background-color: red; text-align: center;">Opção 2</button>
        <button style="background-color: red; text-align: center;">Opção 3</button>
    </div>

    <script>
        $("#ocultar_menu").click(
            function() {
                $("#menu").slideUp();    //*Para deslizar para cima e desaparecer
            }
        )
        $("#mostrar_menu").click(
            function() {
                $("#menu").slideDown();   //*Para deslizar para baixo e aparecer
            }
        )
    </ script>

    ////

////    -Caso queira adicionar uma duração:
            $("#menu").slideUp(2000);

    ///////////////////////////////////////////////////////////////////////////////////////////////////

    PARA FAZER UM ELEMENTO DESLIZAR PARA CIMA OU PARA BAIXO USANDO O TOGGLE
    VIDEO: https://www.youtube.com/watch?v=8Lpr6gkGuCY&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=29

////    <div id="toggle_menu" style="background-color: yellow; text-align: center;">Opções</div>
    <div id="menu" style="text-align: center;">
        <button style="background-color: red; text-align: center;">Opção 1</button>
        <button style="background-color: red; text-align: center;">Opção 2</button>
        <button style="background-color: red; text-align: center;">Opção 3</button>
    </div>

    <script>
        $("#toggle_menu").click(
            function() {
                $("#menu").slideToggle();    
            }
        )
    </ script>

    ////

////    Para mudar o que está escrito no botão ou o seu conteúdo:

    <div id="toggle_menu" style="background-color: yellow; text-align: center;">Mostrar menu</div>
    <div id="menu" style="text-align: center; display: none;">      //*adicionar o display:none para já iniciar oculto
        <button style="background-color: red; text-align: center;">Opção 1</button>
        <button style="background-color: red; text-align: center;">Opção 2</button>
        <button style="background-color: red; text-align: center;">Opção 3</button>
    </div>

    <script>
        $("#toggle_menu").click(
            function() {
                $("#menu").slideToggle( 100 , () => {
                    if($("#menu").is(":visible")) {
                        $("#toggle_menu").text("Ocultar menu")
                    }
                    else {
                        $("#toggle_menu").text("Mostrar menu")
                    }
                });    
            }
        )
    </ script>     
    
    ////////////////////////////////////////////////////////////////////////////////////////////////

    PARA PARAR OU INTERROMPER UMA ANIMAÇÃO COM O STOP() E IR PARA A PRÓXIMA ANIMAÇÃO
    VIDEO: https://www.youtube.com/watch?v=kKUHg5w94Pw&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=30

////    Para interromper ao aumentar e diminuir e ir pra próxima:

    <button id="btn_animar">ANIMAR</button>
    <button id="btn_parar">PROXIMA ANIMAÇÃO</button>
    <div id="ID" style="background-color:red; width:200px; height:200px;"></div>
    
    <script>
        $("#btn_animar").click(
            function() {
                $("#ID").animate({width:"400px" , height:"400px"} , 2000);    
                $("#ID").animate({width:"100px" , height:"100px"} , 3000);   
                $("#ID").animate({width:"200px" , height:"200px"} , 1000); 
                $("#ID").animate({width:"500px" , height:"500px"} , 2000); 
                $("#ID").animate({width:"200px" , height:"200px"} , 2000); 
            }
        )
        $("#btn_parar").click(
            function() {
                $("#ID").stop();
            }
        )
    </ script>

    /////

////    Para parar todas as animações limpando a fila (queue) ou pular para o fim da animação corrente:

    Sintaxe:
    .stop( limpar_fila , ir_pro_fim_da_animação)

    Por padrão, ambas estão como false:
    .stop( false , false)

    Então caso queira incluir algum deles é preciso trocar para true:
    $("#ID").stop(true, false);
    ou
    $("#ID").stop(false, true);

    /////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=srcFcJc9Xm8&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=32
    PARA ADICIONAR ELEMENTOS DENTRO COM APPEND E APPENDTO
    (adiciona no final!!!)

////    -Para adicionar no final com append():

    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="adicionar">ADICIONAR</button> 
    <div id="caixa"></div>

    <script>
        $("#adicionar").click( () => {
            $("#caixa").append("<div style='width: 100px; height:100px; border:1px solid blue;'></div>");
        })
    </ script>

    /////

////    Para adicionar mais de um elemento:

    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="adicionar5">ADICIONAR 5</button> 
    <div id="caixa"></div>

    <script>
        $("#adicionar5").click( () => {
            for (var i = 0 ; i < 5 ; i++) {
                $("#caixa").append("<div style='width: 100px; height:100px; border:1px solid blue;'></div>");
            }
        })
    </ script>

    /////

////    É possível também adicionar usando o appendTo():

    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="adicionar">ADICIONAR</button> 
    <div id="caixa"></div>

    <script>
        $("#adicionar").click( () => {
            $("<div style='width: 100px; height:100px; border:1px solid blue;'></div>").appendTo("#caixa");
        })
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////////
    VIDEO: https://www.youtube.com/watch?v=5kV5mMJ05RY&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=32
    PARA ADICIONAR ELEMENTOS DENTRO COM PREPEND E PREPENDTO
    (adiciona no começo!!!)

////    -Para adicionar no começo com prepend():

    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="adicionar">ADICIONAR</button> 
    <div id="caixa"></div>

    <script>
        $("#adicionar").click( () => {
            $("#caixa").prepend("<div style='width: 100px; height:100px; border:1px solid blue;'></div>");
        })
    </ script>

    /////

////    Para adicionar mais de um elemento:

    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="adicionar5">ADICIONAR 5</button> 
    <div id="caixa"></div>

    <script>
        $("#adicionar5").click( () => {
            for (var i = 0 ; i < 5 ; i++) {
                $("#caixa").prepend("<div style='width: 100px; height:100px; border:1px solid blue;'></div>");
            }
        })
    </ script>

    /////

////    É possível também adicionar usando o prependTo():

    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="adicionar">ADICIONAR</button> 
    <div id="caixa"></div>

    <script>
        $("#adicionar").click( () => {
            $("<div style='width: 100px; height:100px; border:1px solid blue;'></div>").prependTo("#caixa");
        })
    </ script>     

    ////////////////////////////////////////////////////////////////////////////////////////////////
    
    PARA ADICIONAR ELEMENTOS FORA USANDO BEFORE E AFTER
    VIDEO: https://www.youtube.com/watch?v=EIr_8ES1Tn4&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=34

////    Para adicionar antes de um elemento (do lado de fora):

    <button id="adicionar">ADICIONAR</button> <br>
    <div id="caixa" style="width: 100px; height:100px; border:1px solid blue;"></div>

    <script>
        $("#adicionar").click( () => {
            $("#caixa").before("Texto adicionado antes");
        })
    </ script>

    ////

////    Para adicionar depois de um elemento (do lado de fora):

    <button id="adicionar">ADICIONAR</button> <br>
    <div id="caixa" style="width: 100px; height:100px; border:1px solid blue;"></div>

    <script>
        $("#adicionar").click( () => {
            $("#caixa").after("Texto adicionado depois");
        })
    </ script>

    ////////////////////////////////////////////////////////////////////////////////////////////////
    
    PARA REMOVER ELEMENTOS USANDO REMOVE E EMPTY
    VIDEO: https://www.youtube.com/watch?v=jGB6AnmVmR8&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=34

////    Para remover usando remove():

    <button id="remover">REMOVER</button> <br>
    <div id="ID">DIV QUE SERÁ REMOVIDA</div>

    <script>
        $("#remover").click( () => {
            $("#ID").remove();
        })
    </ script>

    ////

////    Para remover o último item adicionado:

    <button id="adicionar">ADICIONAR</button> <br>
    <button id="remover">REMOVER</button> <br>
    <div id="ID"></div>

    <script>
        let num = 1;
        $("#adicionar").click( () => {
            $("#ID").append("<div id='d"+num+"'>TEXTO "+num+"</div>");
            num++;
        })

        $("#remover").click( () => {
            $("#d"+(num-1)).remove();
            num--;
        })
    </ script>

    ////

////    Para remover todos os elementos adicionados usando o empty():

    <button id="adicionar">ADICIONAR</button> <br>
    <button id="limpar">LIMPAR</button> <br>
    <div id="ID"></div>

    <script>
        let num = 1;
        $("#adicionar").click( () => {
            $("#ID").append("<div id='d"+num+"'>TEXTO "+num+"</div>");
            num++;
        })

        $("#limpar").click( () => {
            $("#ID").empty();
            num = 1
        })
    </ script>

    //////////////////////////////////////////////////////////////////////////////////////////////////

    PARA MANIPULAR O CSS INLINE
    VIDEO: https://www.youtube.com/watch?v=Nlgrm1Gv0PE&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=35

////    Para mudar o css de apenas 1 atributo:

    <div id="ID">TEXTO</div>

    $("#ID").css({"color":"red"});
    ou
    $("#ID").css("color","red");

    ////

////    Para mudar o css de mais de 1 atributo:

    <div id="ID">TEXTO</div>

    $("#ID").css({"color":"red","background-color":"yellow"});      

    ////

////    Para obter informações de um atributo css:

    <div id="ID">TEXTO</div>

    $("#ID").css({"color":"red","background-color":"yellow"});   
    alert($("#ID").css("color"))

    //////////////////////////////////////////////////////////////////////////////////////////////////

    PARA ADICIONAR E REMOVER CLASSES EM UM ELEMENTO
    VIDEO: https://www.youtube.com/watch?v=_JkaixWgUmw&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=36

////    Para adicionar uma classe:

    CSS:
    .vermelho {
        color: red;
    }

    HTML:
    <button id="btn">ADICIONAR CLASSE</button>
    <div id="ID">TEXTO</div>

    <script>
        $("#btn").click ( () => {
            $("#ID").addClass("vermelho")
        })
    </ script>
    
    /////

////    Para remover uma classe:

    CSS:
    .vermelho {
        color: red;
    }

    HTML:
    <button id="btn">REMOVER CLASSE</button>
    <div id="ID" class="vermelho">TEXTO</div>

    <script>
        $("#btn").click ( () => {
            $("#ID").removeClass("vermelho")
        })
    </ script>   

    ////

////    Para trocar de classe:

    CSS:
    .vermelho {
        color: red;
    }

    .azul {
        color: blue;
    }

    HTML:
    <button id="btn-azul">AZUL</button>
    <button id="btn-vermelho">VERMELHO</button>
    <div id="ID" class="vermelho">TEXTO</div>

    <script>
        $("#btn-azul").click ( () => {
            $("#ID").removeClass("vermelho")
            $("#ID").addClass("azul")
        })
        $("#btn-vermelho").click ( () => {
            $("#ID").removeClass("azul")
            $("#ID").addClass("vermelho")
        })
    </ script>   

    //////////////////////////////////////////////////////////////////////////////////////////////////

    PARA TROCAR DE CLASSE USANDO TOGGLE:
    VIDEO: https://www.youtube.com/watch?v=zvFOJ_8dWMk&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=37

////    Para alternar entre classes:

    CSS:
    .vermelho {
        color: red;
    }

    .azul {
        color: blue;
    }

    HTML:
    <button id="btn">TROCAR CLASSE</button>
    <div id="ID" class="vermelho">TEXTO</div>

    <script>
        $("#btn").click ( () => {
            $("#ID").toggleClass("azul");
        })
    </ script>   

    /////

////    Para mudar o nome do botão ao alternar:

    CSS:
    .vermelho {
        color: red;
    }

    .azul {
        color: blue;
    }

    HTML:
    <button id="btn">AZUL</button>
    <div id="ID" class="vermelho">TEXTO</div>

    <script>
        $("#btn").click ( () => {
            $("#ID").toggleClass("azul");
            if ($("#ID").is(".azul")){
                $("#btn").text("VERMELHO");
            }
            else{
                $("#btn").text("AZUL");
            }
        })
    </ script>  

    //////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA CLONAR OU DUPLICAR ELEMENTOS COM CLONE
    VIDEO: https://www.youtube.com/watch?v=cSk_q0wGqLM&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=39

////    CSS:
    #caixa {
        width: 100%;
        border: 1px solid red;
        box-sizing: border-box;
        flex-wrap: wrap;
        display: flex;
    }

    HTML:
    <button id="clonar">CLONAR</button> 
    
    <div id="caixa">
        <div id="caixinha" style='width: 100px; height:100px; border:1px solid blue;'></div>
    </div>

    <script>
        $("#clonar").click( () => {
            $("#caixinha").clone().appendTo($("#caixa"));
        })
    </ script>  
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA REMOVER OU DESANEXAR UM ELEMENTO E GUARDAR
    VIDEO: https://www.youtube.com/watch?v=orLDzLCNmPE&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=39

////    Para remover e guardar em outro lugar:

    <button id="desanexar">DESANEXAR</button> 
    
    <div style="border: 1px solid green; margin: 2px; height: 100px;">
        <div class="texto" style='color: blue;'>Texto 1</div>
        <div class="texto" style='color: yellow;'>Texto 2</div>
        <div class="texto" style='color: red;'>Texto 3</div>
    </div>

    <div id="caixa" style="border: 1px solid brown; margin: 2px; height: 100px;"></div>

    <script>
        let itens = $(".texto");
        let i = 0;
        $("#desanexar").click( () => {
            let item = $(itens[i]).detach();
            i++;
            $("#caixa").append(item);
        })
    </ script>  

    //////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA SABER SE UM ELEMENTO USA UMA DETERMINADA CLASSE
    VIDEO: https://www.youtube.com/watch?v=iA7xH0U1VAI&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=40

////    Para pegar a classe do botão, adicionar uma classe para o elemento pai e ocultá-lo:

    CSS:
    .ocultar {
        display: none;
    }

    HTML:

    <div style="width: 100px; height: 100px; background-color: red; padding: 4px;">
        <button id="btn">OCULTAR</button>
    </div>

    <script>
        $("#btn").click( (event) => {
            $("#"+event.target.id).parent().addClass("ocultar")
        })
    </ script>

    ////

////    Para desocultar os elementos:

    CSS:
    .ocultar {
        display: none;
    }

    HTML:
    <div class="caixa" style="width: 100px; height: 100px; background-color: red; padding: 4px;">
        <button id="btn_red" class="btn">OCULTAR</button>
    </div>
    <div class="caixa" style="width: 100px; height: 100px; background-color: green; padding: 4px;">
        <button id="btn_blue" class="btn">OCULTAR</button>
    </div>
    <div class="caixa" style="width: 100px; height: 100px; background-color: blue; padding: 4px;">
        <button id="btn_green" class="btn">OCULTAR</button>
    </div>
    
    <button id="mostrar">MOSTRAR</button>

    <script>
        $(".btn").click( (event) => {
            $("#"+event.target.id).parent().addClass("ocultar")
        })
        $("#mostrar").click( () => {
            $(".caixa").removeClass("ocultar")
        })
    </ script>

    Obs: No video, é utilizado o comando hasClass para descobrir se um elemento contêm um determinada classe.

    ///////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA OBTER A POSIÇÃO TOP E LEFT DE UM ELEMENTO
    VIDEO: https://www.youtube.com/watch?v=TPSBSe-jIFU&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=41

////    Para obter o top e o Left:

    CSS:
    #texto {
        position: absolute;
        top: 200px;
        left: 100px;
    }

    HTML:
    <button id="btn">CLIQUE AQUI</button>
    <div id="top">TOP: </div>
    <div id="esquerda">LEFT: </div>
    <div id="texto">Texto</div>

    <script>
        $("#btn").click( () => {
            $("#top").text("TOP: " + $("#texto").position().top  )
            $("#esquerda").text("LEFT: " + $("#texto").position().left  )
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA OBTER A POSIÇÃO TOP E LEFT DE UM ELEMENTO E ALTERAR
    VIDEO: https://www.youtube.com/watch?v=RKVsYZP2nXA&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=42

////    Para obter o top e o left:

    CSS:
    #texto {
        position: absolute;
        top: 200px;
        left: 100px;
    }

    HTML:
    <button id="btn">CLIQUE AQUI</button>
    <div id="top">TOP: </div>
    <div id="esquerda">LEFT: </div>
    <div id="texto">Texto</div>

    <script>
        $("#btn").click( () => {
            $("#top").text("TOP: " + $("#texto").offset().top  )
            $("#esquerda").text("LEFT: " + $("#texto").offset().left  )
        })
    </ script>

    ///////

////    Para mudar a posição do top e left:

    Sintaxe:
    $(seletor).offset({top: valor , left: valor})

    CSS:
    #texto {
        position: absolute;
        top: 200px;
        left: 100px;
    }

    HTML:
    <button id="mudar">MUDAR POSIÇÃO</button>
    <div id="texto">Texto</div>

    <script>
        $("#mudar").click( () => {
            $("#texto").offset({top: 150, left: 250});
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////////////

    PARA REMOVER ATRIBUTOS E CLASSES
    VIDEO: https://www.youtube.com/watch?v=LneKDjTga2A&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=43

////    Para remover atributos:

    <div id="ID" style="color: red; border: 1px solid blue;">TEXTO</div>
    <button id="btn">REMOVER</button>

    <script>
        $("#btn").click( () => {
            $("#ID").removeAttr("style")
        })
    </ script>

    /////

////    Para remover classes:

    CSS:
    .cor {
        color: red; 
    }

    .borda {
        border: 1px solid blue;
    }

    HTML:
    <div id="ID" class="cor borda">TEXTO</div>
    <button id="btn">REMOVER</button>

    <script>
        $("#btn").click( () => {
            $("#ID").removeClass("borda")
        })
    </ script>

    Para adicionar a classe de novo, é só utilizar o addClass():
    $("#ID").addClass("borda")


    /////////////////////////////////////////////////////////////////////////////////////////////////

    DIFERENÇA ENTRE ARROW FUNTION E FUNÇÃO NORMAL
    VIDEO: https://www.youtube.com/watch?v=iaim1CVPlg8&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=45

    FUNÇÃO NORMAL:
    $("#ID").click ( function(this) {
        $(this).target....
    })

    ARROW FUNCTION:
    $("#ID").click ( (e) => {
        e.target.....
    })

    /////////////////////////////////////////////////////////////////////////////////////////////////

    PARA SUBSTITUIR ELEMENTOS COM REPLACEWITH E REPLACEALL
    VIDEO: https://www.youtube.com/watch?v=iaim1CVPlg8&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=45

////    Para substituir com replaceAll:

    <div class="texto">Texto original 1</div>
    <div class="texto">Texto original 2</div>
    <button id="btn">BOTÃO</button>

    <script>
        $("#btn").click( () => {
            $("<div>Texto trocado</div>").replaceAll(".texto")
        })
    </ script>

    /////

////    Para substituir o mesmo elemento:

    <button id="btn">TEXTO DO BOTÃO</button>

    <script>
        $("#btn").click( (e) => {
            $("<div>"+$(e.currentTarget).text()+"</div>").replaceAll(e.currentTarget)
        })
    </ script>

    /////

////    Para substituir com replaceWith:

    <div class="texto">Texto original 1</div>
    <div class="texto">Texto original 2</div>
    <button id="btn">BOTÃO</button>

    <script>
        $("#btn").click( () => {
            $(".texto").replaceWith("<div>Texto trocado</div>");
        })
    </ script>
    
    /////////////////////////////////////////////////////////////////////////////////////////////////

    PARA ROLAR O SCROLL DA BARRA DE ROLAGEM
    VIDEO: https://www.youtube.com/watch?v=rK_edxKmAfA&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=45

////    Para rolar para a direita:
    
    <button id="btn">ROLAR</button>       
    <div id="texto" style="overflow: auto; width: 100px; height: 150px;">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>

    <script>
        $("#btn").click( () => {
            $("#texto").scrollLeft(15);
        })
    </ script>

    /////     
    
////    Para rolar para baixo:
    
    <button id="btn">ROLAR</button>       
    <div id="texto" style="overflow: auto; width: 100px; height: 150px;">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>

    <script>
        $("#btn").click( () => {
            $("#texto").scrollTop(50);
        })
    </ script>

    /////   
    
////    Caso queira voltar para o topo, é só colocar o valor como 0:
        $("#ID").scrollTop(0);

    /////
    
////    Para pegar a posição do scroll horizontal:
    
    <button id="btn">POSIÇÃO</button>     
    <div id="texto" style="overflow: auto; width: 100px; height: 150px;">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>

    <script>
        $("#btn").click( () => {
            alert("POSIÇÃO LEFT: " + $("#texto").scrollLeft());
        })
    </ script>

    /////        
    
////    Para pegar a posição do scroll vertical:
    
    <button id="btn">POSIÇÃO</button>     
    <div id="texto" style="overflow: auto; width: 100px; height: 150px;">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>

    <script>
        $("#btn").click( () => {
            alert("POSIÇÃO TOP: " + $("#texto").scrollTop());
        })
    </ script>

    //////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA EMPACOTAR E DESEMPACOTAR COM WRAP E UNWRAP
    VIDEO: https://www.youtube.com/watch?v=UZhazUeWLaE&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=46

////    Para empacotar cada elemento com wrap:

    CSS:
    .pacote {
        color: red;
        background-color: yellow;
    }

    HTML:
    <button id="btn">EMPACOTAR</button>

    <p class="CLASSE">Texto 1</p>
    <p class="CLASSE">Texto 2</p>
    <p class="CLASSE">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            $(".CLASSE").wrap("<div class='pacote'></div>")
        })
    </ script>

    /////

////    Para desempacotar com unwrap:

    CSS:
    .pacote {
        color: red;
        background-color: yellow;
    }

    HTML:
    <button id="btn">DESEMPACOTAR</button>

    <div class='pacote'>
      <p class="CLASSE">Texto 1</p>
      <p class="CLASSE">Texto 2</p>
      <p class="CLASSE">Texto 3</p>
    </div>

    <script>
        $("#btn").click ( () => {
            $(".CLASSE").unwrap()
        })
    </ script>

    /////

////    Para alternar entre wrap e unwrap:

    CSS:
    .pacote {
        color: red;
        background-color: yellow;
    }

    HTML:
    <button id="btn">EMPACOTAR / DESEMPACOTAR</button>

    <p class="CLASSE">Texto 1</p>
    <p class="CLASSE">Texto 2</p>
    <p class="CLASSE">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            if($(".CLASSE").parent().is("div")) {
                $(".CLASSE").unwrap()
            }
            else {
                $(".CLASSE").wrap("<div class='pacote'></div>")
            }
        })
    </ script>

    /////

////    Para empacotar tudo com wrapAll:

    CSS:
    .pacote {
        color: red;
        background-color: yellow;
    }

    HTML:
    <button id="btn">EMPACOTAR</button>

    <p class="CLASSE">Texto 1</p>
    <p class="CLASSE">Texto 2</p>
    <p class="CLASSE">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            $(".CLASSE").wrapAll("<div class='pacote'></div>")
        })
    </ script>

    ////

////    Para empacotar dentro com wrapInner:

    CSS:
    .pacote {
        color: red;
        background-color: yellow;
    }

    HTML:
    <button id="btn">EMPACOTAR DENTRO</button>

    <p class="CLASSE">Texto 1</p>
    <p class="CLASSE">Texto 2</p>
    <p class="CLASSE">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            $(".CLASSE").wrapInner("<div class='pacote'></div>")
        })
    </ script>      

    ////

////    Observações:
    wrap / wrapAll = empacotam do lado de fora:
    <div class="pacote">
        <p>Texto</p>
    </div> 

    wrapInner = empacota do lado de dentro:
    <p>Texto
        <div class="pacote"></div>
    </p>

    ///////////////////////////////////////////////////////////////////////////////////////////////

    PARA APLICAR UMA FUNÇÃO A CADA ITEM DE UMA LISTA USANDO EACH
    VIDEO: https://www.youtube.com/watch?v=UNBCgxfZixM&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=47

////    Para cada elemento, faça... :        

    <button id="btn">BOTÃO</button>
    <p class="texto">Texto 1</p>
    <p class="texto">Texto 2</p>
    <p class="texto">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            $(".texto").each( function() {
                alert($(this).text())
            })
        })
    </ script>

    /////

////    Caso queira adicionar uma classe:

    CSS:
    .CLASSE {
        color: red;
    }

    <button id="btn">BOTÃO</button>
    <p class="texto">Texto 1</p>
    <p class="texto">Texto 2</p>
    <p class="texto">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            $(".texto").each( function() {
                $(this).addClass("CLASSE")
            })
        })
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////

    PARA OBTER ELEMENTOS E SUAS INFORMAÇÕES COM get
    VIDEO: https://www.youtube.com/watch?v=vRBgGeOG6e4&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=48

////    Para obter elementos:

    <button id="btn">BOTÃO</button>
    <p id="texto1" class="texto">Texto 1</p>
    <p id="texto2" class="texto">Texto 2</p>
    <p id="texto3" class="texto">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            alert($(".texto").get())
        })
    </ script>

    Será apresentado:
    [object HTMLParagraphElement],[object HTMLParagraphElement],[object HTMLParagraphElement]

    ////

////    Para movimentar os elementos para outro lugar:
    
    <button id="btn">BOTÃO</button>
    <div id="caixa" style="background-color: yellow; height: 200px; width: 200px;"></div>
    <p id="texto1" class="texto">Texto 1</p>
    <p id="texto2" class="texto">Texto 2</p>
    <p id="texto3" class="texto">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            $("#caixa").append($(".texto").get())
        })
    </ script>
    

    ////

////    Para obter uma informação específica do elemento pela sua posição:

    <button id="btn">BOTÃO</button>
    <p id="texto1" class="texto">Texto 1</p>
    <p id="texto2" class="texto">Texto 2</p>
    <p id="texto3" class="texto">Texto 3</p>

    <script>
        $("#btn").click ( () => {
            let elemento = $(".texto").get()
            alert(elemento[0].id)
            alert(elemento[0].innerHTML)
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////////////

    PARA PEGAR A POSIÇÃO DO ÍNDICE DE UM ELEMENTO USANDO INDEX
    VIDEO: https://www.youtube.com/watch?v=EZQhM9Zt6e0&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=49

////    Para pegar o index ao clicar:

    <div>
        <p id="texto1" class="texto">Texto 1</p>
        <p id="texto2" class="texto">Texto 2</p>
        <p id="texto3" class="texto">Texto 3</p>
    </div>

    <script>
        $(".texto").click ( (e) => {
            alert("INDEX: " + $(e.currentTarget).index())
        })
    </ script>

    Obs: Caso não queira usar arrow function:
        $(".texto").click ( function() {
            alert("INDEX: " + $(this).index())
        })

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA MUDAR O SELETOR PADRÃO DO JQUERY
    VIDEO: https://www.youtube.com/watch?v=QlTvU-j7wbk&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=50

    Seletores padrão do Jquery:
    $("#ID").text("Texto")
    Ou
    jQuery("#ID").text("Texto")

////    Para mudar o $:

    <div id="ID"></div>

    <script>
        let novoseletor = $.noConflict()

        novoseletor("#ID").text("Texto")
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA SABER A QUANTIDADE DE ELEMENTOS COM O LENGTH
    VIDEO: https://www.youtube.com/watch?v=hN_0PNZrcDY&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=51

////    Para saber a quantidade de elementos com a mesma classe:

    <p class="texto">Texto 1</p>
    <p class="texto">Texto 2</p>
    <p class="texto">Texto 3</p>
    <button id="btn">BOTÃO</button>

    <script>
        $("#btn").click ( () => {
            alert($(".texto").length)
        })
    </ script>

    ////

////    Para saber a quantidade de elementos em uma lista:

    <button id="btn">BOTÃO</button>

    <script>
        let lista = ["A" , "B" , "C " , "D"]
        $("#btn").click ( () => {
            alert($(lista).length)
        })
    </ script>

    /////////////////////////////////////////////////////////////////////////////////////////////////

    PARA TRANSFORMAR UM CONJUNTO DE ELEMENTOS EM UM ARRAY / VETOR
    VIDEO: https://www.youtube.com/watch?v=DN2zEpjWfeY&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=52

////    Para transformar em Array:

    <p class="texto">Texto 1</p>
    <p class="texto">Texto 2</p>
    <p class="texto">Texto 3</p>
    <button id="btn">ARRAY</button>
    <div id="array"></div>

    <script>
        $("#btn").click ( () => {
            let lista = $(".texto").toArray()
            $("#array").text(lista)
        })
    </ script>

    ////

////    Para saber uma informação específica:
        $("#btn").click ( () => {
            let lista = $(".texto").toArray()
            $("#array").text(lista[0].className)
        })

    //////////////////////////////////////////////////////////////////////////////////////////////////////

    PARA SABER A LARGURA E ALTURA DE UM ELEMENTO + PADDING E BORDA
    VIDEO: https://www.youtube.com/watch?v=pDbQikHlVZs&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=53

////    Para pegar a largura e a altura (sem o padding e borda):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red"></div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            alert($("#caixa").width())   //*largura
            alert($("#caixa").height())   //*altura
        })
    </ script>

    ////

////    Para pegar a largura e a altura (com o padding):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red; padding: 5px;">TEXTO</div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            alert($("#caixa").innerWidth())   //*largura + padding esquerdo e direito
            alert($("#caixa").innerHeight())   //*altura + padding superior e inferior
        })
    </ script>

    ////

////    Para pegar a largura e a altura (com a borda):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red; border: 5px solid blue;">TEXTO</div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            alert($("#caixa").outerWidth())   //*largura + borda esquerda e direita
            alert($("#caixa").outerHeight())   //*altura + borda superior e inferior
        })
    </ script>

    ////      
    
////    Para pegar toda a largura e a altura (com o padding e a borda):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red; padding: 5px; border: 5px solid blue;">TEXTO</div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            alert($("#caixa").outerWidth(true))   //*largura + padding e borda esquerda e direita
            alert($("#caixa").outerHeight(true))   //*altura + padding e borda superior e inferior
        })
    </ script>

    ///////////////////////////////////////////////////////////////////////////////////////////////
    
    PARA MODIFICAR A LARGURA E ALTURA DE UM ELEMENTO
    VIDEO: https://www.youtube.com/watch?v=x_CccVUp58s&list=PLx4x_zx8csUiOBWiybY2cIjhNLIUn4JCn&index=54

////    Para mudar a largura e altura (sem o padding e borda):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red;"></div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            $("#caixa").width(100)  //*mudar largura
            $("#caixa").height(200)   //*mudar altura
        })
    </ script>    

    ////
    
////    Para mudar a largura e altura (com o padding):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red; padding: 5px;"></div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            $("#caixa").innerWidth(130)  //*mudar largura + padding
            $("#caixa").innerHeight(240)   //*mudar altura + padding
        })
    </ script>

    ////
    
////    Para mudar a largura e altura (com a borda):

    <div id="caixa" style="width: 200px; height: 300px; background-color: red; border: 5px solid blue;">TEXTO</div>
    <button id="btn">LARGURA / ALTURA</button>

    <script>
        $("#btn").click ( () => {
            $("#caixa").outerWidth(130)  //*mudar largura + borda
            $("#caixa").outerHeight(240)   //*mudar altura + borda
        })
    </ script>
    
    ////

%%     */</script>

    
    
    
    
    
    
    
    
    
    
    
//////////////////////////////////////////////////////////////////////////
    
<script>   /* 
   
BARRA DE BUSCA:

EXEMPLO 1 (Exemplo sem FETCH):


CLAUDE AI

HTML:
<div class="search-container">
   <input type="text" id="searchInput" placeholder="Procure por um nome...">
	<div id="results" class="results"></div>
</div>
   

JS:
const data = [
   {
   "id": 1,
   "nome": "Renato",
   "sobrenome": "Santos"
   },
   {
   "id": 2,
   "nome": "Maria",
   "sobrenome": "Souza"
   }
];

const searchInput = document.getElementById('searchInput');
const resultsDiv = document.getElementById('results');

searchInput.addEventListener('input', (e) => {
   const searchTerm = e.target.value.toLowerCase();
   const filteredData = data.filter(person => 
      person.nome.toLowerCase().includes(searchTerm) || 
      person.sobrenome.toLowerCase().includes(searchTerm)
   );
            
   displayResults(filteredData);
});

function displayResults(results) {
   resultsDiv.innerHTML = results.map(person => `
      <div class="result-item">
         ${person.nome} ${person.sobrenome}
      </div>
   `).join('');
}

// Display all results initially
displayResults(data);


CSS:
.search-container {
   max-width: 600px;
   margin: 20px auto;
   padding: 20px;
   font-family: Arial, sans-serif;
}

input {
   width: 100%;
   padding: 12px;
   margin-bottom: 20px;
   border: 1px solid #ddd;
   border-radius: 4px;
}

.results {
   border: 1px solid #ddd;
   padding: 10px;
   border-radius: 4px;
}

.result-item {
   padding: 10px;
   border-bottom: 1px solid #eee;
}

.result-item:last-child {
   border-bottom: none;
}


------------------------
Claude AI 2: (falta um template para criar novos cartões)

HTML:

<div class="search-container">
    <label for="search">Procurar uma pessoa</label>
    <br>
    <input type="search" id="search" />
</div>

<div class="cards-container" id="cards-container">                           
    <div class="card" id="card">
        <div class="nome" id="nome"></div>                   
        <div class="sobrenome" id="sobrenome"></div>                     
    </div>
</div>


JS:

const pessoas = [
  {
    id: 1,
    nome: "Renato",
    sobrenome: "Santos"
  },
  {
    id: 2,
    nome: "Maria",
    sobrenome: "Souza"
  }
];

const cartoesContainer = document.getElementById("cards-container");
const cartao = document.getElementById("card");
const barraPesquisa = document.getElementById("search");
const nomes = document.getElementById("nome");
const sobrenomes = document.getElementById("sobrenome");

function mostrar(resultados) {
  if (resultados.length === 0) {
    cartao.classList.add("hide");
    return;
  }

  const pessoa = resultados[0];
  nomes.innerText = pessoa.nome;
  sobrenomes.innerText = pessoa.sobrenome;
  cartao.classList.remove("hide");
}

barraPesquisa.addEventListener("input", function() {
  const termoPesquisa = barraPesquisa.value.toLowerCase();
  
  if (termoPesquisa === "") {
    cartao.classList.add("hide");
    return;
  }

  const resultados = pessoas.filter(pessoa => 
    pessoa.nome.toLowerCase().includes(termoPesquisa) || 
    pessoa.sobrenome.toLowerCase().includes(termoPesquisa)
  );

  mostrar(resultados);
});


CSS:

.hide {
  display: none;
}
.cards-container {
  margin-top: 20px;
}
.card {
  padding: 10px;
  border: 1px solid black;
}



-----------

Claude AI 3 (sem usar JSON e FETCH)

HTML:
<div class="search-container">
    <label for="search">Procurar uma pessoa</label>
    <br>
    <input type="search" id="search" />
</div>

<div id="cards-container" class="hide"></div>


JS:
const pessoas = [
  {
    id: 1,
    nome: "Renato",
    sobrenome: "Santos"
  },
  {
    id: 2,
    nome: "Maria",
    sobrenome: "Souza"
  },
  {
    id: 3,
    nome: "Renata",
    sobrenome: "Silva"
  },
  {
    id: 4,
    nome: "Renan",
    sobrenome: "Vieira"
  },
  {
    id: 5,
    nome: "Marcela",
    sobrenome: "Lima"
  }
];

const cartoes = document.getElementById("cards-container");
const barrapesquisa = document.getElementById("search");

function criarCartao(pessoa) {
  const cartao = document.createElement("div");
  cartao.className = "card";
  
  const nome = document.createElement("div");
  nome.className = "nome";
  nome.textContent = pessoa.nome;
  
  const sobrenome = document.createElement("div");
  sobrenome.className = "sobrenome";
  sobrenome.textContent = pessoa.sobrenome;
  
  cartao.appendChild(nome);
  cartao.appendChild(sobrenome);
  return cartao;
}

function mostrar(resultados) {
  cartoes.innerHTML = "";
  resultados.forEach(pessoa => {
    cartoes.appendChild(criarCartao(pessoa));
  });
  cartoes.classList.remove("hide");
}

barrapesquisa.addEventListener("input", function() {
  const pesquisar = barrapesquisa.value.toLowerCase();
  if (pesquisar === "") {
    cartoes.classList.add("hide");
    return;
  }
  
  const resultados = pessoas.filter(pessoa => 
    pessoa.nome.toLowerCase().includes(pesquisar) || 
    pessoa.sobrenome.toLowerCase().includes(pesquisar)
  );
  
  mostrar(resultados);
});



CSS:
.hide {
  display: none;
}
.cards-container {
  margin-top: 20px;
}
.card {
  padding: 10px;
  border: 1px solid #ccc;
  margin-bottom: 10px;
}



----------

Claude AI 4(usando JSON e FETCH):


HTML:
<div class="search-container">
    <label for="search">Procurar uma pessoa</label>
    <br>
    <input type="search" id="search" />
</div>

<div id="cards-container" class="hide"></div>


JS:
const cartoes = document.getElementById("cards-container");
const barrapesquisa = document.getElementById("search");

let pessoas = [];

fetch("https://jsonplaceholder.typicode.com/users")
   .then(response => response.json())
   .then(results => {
      pessoas = results; 
   })
   .catch(error => console.error('Ocorreu um erro:', error));

barrapesquisa.addEventListener("input", function() {
   const pesquisar = barrapesquisa.value.toLowerCase();
            
   if (pesquisar === "") {
      cartoes.classList.add("hide");
      return;
   }
	
   const resultados = pessoas.filter(pessoa => 
      pessoa.name.toLowerCase().includes(pesquisar) ||
      pessoa.username.toLowerCase().includes(pesquisar)
   );

   Mostrar(resultados);
});


function Mostrar(resultados) {
   cartoes.innerHTML = "";
   resultados.forEach(pessoa => {
      cartoes.appendChild(criarCartao(pessoa));
            });
      cartoes.classList.remove("hide");
   }


function criarCartao(pessoa) {
   const cartao = document.createElement("div");
   cartao.className = "card";
            
   const nome = document.createElement("div");
   nome.className = "nome";
   nome.textContent = pessoa.name; 
            
   const apelido = document.createElement("div"); 
   apelido.className = "apelido";
   apelido.textContent = pessoa.username; 
            
   cartao.appendChild(nome);
   cartao.appendChild(apelido);
   return cartao;
}


CSS:

.hide {
  display: none;
}
.cards-container {
  margin-top: 20px;
}
.card {
  padding: 10px;
  border: 1px solid #ccc;
  margin-bottom: 10px;
}



-----------

Exemplo video (USANDO FETCH, JSON e DATA): 
VIDEO: https://www.youtube.com/embed/TlP5WIxVirU?autoplay=1

HTML:
<div class="search-wrapper">
    <label for="search">Procurar por Usuários</label>
    <input type="search" id="search"  data-search>
</div>

<div class="user-cards"  data-user-cards-container> </div>

<template  data-user-template>                                    // *O template cria um padrão a ser seguido. 
    <div class="card hide">													// *Remova a classe hide se quiser que os cards comecem aparecendo
        <div class="header"  data-header></div>                   // *Aqui viria o nome do usuário
        <div class="body"  data-body></div>                     // *Aqui viria o email do usuário
    </div>
</template>

OBS: Foi usada um atributo data neste exemplo, mas poderia ser um id.




JAVASCRIPT:    *Usando um API falso para pegar as infos em JSON dos usuários  

const userCardTemplate = document.querySelector("[data-user-template]")
const userCardContainer = document.querySelector("[data-user-cards-container]")
const searchInput = document.querySelector("[data-search]")

let users = []

searchInput.addEventListener("input" , e => {
    const value = e.target.value.toLowerCase()
    users.forEach(user => {
        const isVisible = 
            user.name.toLowerCase().includes(value) || user.email.toLowerCase().includes(value)
        user.element.classList.toggle("hide", !isVisible)
    })
})


fetch("https://jsonplaceholder.typicode.com/users")
    .then( response => response.json())
    .then( data => {
        users = data.map(user => {
            const card = userCardTemplate.content.cloneNode(true).children[0]
            const header = card.querySelector("[data-header]")
            const body = card.querySelector("[data-body]")
            header.textContent = user.name
            body.textContent = user.email
            userCardContainer.append(card)
            return {name: user.name , email: user.email , element: card }
        })
    })

    .catch( error => {                      // *Opcional
        console.log("Ocorreu um erro: " + error)
    })




CSS:
.search-wrapper {
    display: flex;
    flex-direction: column;
    gap: .25rem;
}

input {
    font-size: 1rem;
}

.user-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px , 1fr));
    gap: .25rem;
    margin-top: 1rem;
}

.card {
    border: 1px solid black;
    background-color: white;
    padding: .5rem;
}

.card > .header {
    margin-bottom: .25rem;
}

.card > .body {
    font-size: .8rem;
    color: gray;
}

.hide {
    display: none;
}


---------------------

Exemplo 2-1 (COM 1 OBJETO E SEM FETCH):

HTML:
<div class="search-wrapper">
    <label for="search">Procurar por Usuários</label>
    <input type="search" placeholder="O que você procura?" data-search />
</div>

<div class="user-cards"  data-user-cards-container> </div>

<template  data-user-template>                                   
    <div class="card hide">
        <div class="header"  data-header></div>                                
    </div>
</template>


JS:
const people = [
    { name: 'adri'},
    { name: 'becky'},
    { name: 'chris'},
    { name: 'dillon'},
    { name: 'evan'},
    { name: 'frank'},
    { name: 'georgette'},
    { name: 'hugh'},
    { name: 'igor'},
    { name: 'jacoby'},
    { name: 'kristina'},
    { name: 'lemony'},
    { name: 'matilda'},
    { name: 'nile'},
    { name: 'ophelia'},
    { name: 'patrick'},
    { name: 'quincy'},
    { name: 'roslyn'},
    { name: 'solene'},
    { name: 'timothy'},
    { name: 'uff'},
    { name: 'violet'},
    { name: 'wyatt'},
    { name: 'x'},
    { name: 'yadri'},
    { name: 'zack'},
]

const userCardTemplate = document.querySelector("[data-user-template]")
const userCardContainer = document.querySelector("[data-user-cards-container]")
const searchInput = document.querySelector("[data-search]")

let users = people.map(user => {
    const card = userCardTemplate.content.cloneNode(true).children[0]
    const header = card.querySelector("[data-header]")
    header.textContent = user.name
    userCardContainer.append(card)
    return { name: user.name, element: card }
})

searchInput.addEventListener("input" , e => {
    const value = e.target.value.toLowerCase()
    users.forEach(user => {
        const isVisible = 
            value.length > 0 && user.name.toLowerCase().includes(value)              /*Opção 1: esconde todos os cards*/
            user.name.toLowerCase().includes(value)                                  /*Opção 2: mostra todos os cards*/
        user.element.classList.toggle("hide", !isVisible)
    })
})


CSS:
.search-wrapper {
    display: flex;
    flex-direction: column;
    gap: .25rem;
}

input {
    font-size: 1rem;
}

.user-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px , 1fr));
    gap: .25rem;
    margin-top: 1rem;
}

.card {
    border: 1px solid black;
    background-color: white;
    padding: .5rem;
}

.card > .header {
    margin-bottom: .25rem;
}

.hide {
    display: none;
}

---------

Exemplo 2-2 (COM 2 OBJETOS E SEM FETCH)

HTML:
<div class="search-container">
    <label for="search">Procurar por Usuários</label>
    <input type="search" placeholder="O que você procura?" class="search" data-search />
</div>

<div class="cards-container"  data-cards-container> </div>

<template  data-cards-template>                                   
    <div class="card hide">
        <div class="nomes"  data-nomes></div>       
        <div class="sobrenomes"  data-sobrenomes></div>  
    </div>
</template>


JS:
const pessoas = [
  {
    id: 1,
    name: "Roberto",
    lastname: "Santos"
  },
  {
    id: 2,
    name: "Manoela",
    lastname: "Sôuza"
  },
  {
    id: 3,
    name: "Ricardo",
    lastname: "Lacôrte"
  },
  {
    id: 4,
    name: "Rogério",
    lastname: "Vieira"
  },
  {
    id: 5,
    name: "Márcia",
    lastname: "Lima"
  }
];

const cardsTemplate = document.querySelector("[data-cards-template]")
const cardsContainer = document.querySelector("[data-cards-container]")
const searchBar = document.querySelector("[data-search]")

let usuarios = pessoas.map(usuario => {
    const card = cardsTemplate.content.cloneNode(true).children[0]
    const nomes = card.querySelector("[data-nomes]")
    const sobrenomes = card.querySelector("[data-sobrenomes]")
    nomes.textContent = usuario.name
    sobrenomes.textContent = usuario.lastname
    cardsContainer.append(card)
    return { name: usuario.name, lastname: usuario.lastname , elemento: card }
})

const normalizeText = (text) => text
    .toLowerCase()
    .trim()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '');

searchBar.addEventListener("input", e => {
    const valor = normalizeText(e.target.value);

    usuarios.forEach(pessoa => {
        const nome = normalizeText(pessoa.name);
        const sobrenome = normalizeText(pessoa.lastname);

        const visivel = 
            valor.length > 0 && nome.includes(valor) ||  
            valor.length > 0 && sobrenome.includes(valor);
            
        pessoa.elemento.classList.toggle("hide", !visivel);
    });
});


CSS:
.search-container {
    display: flex;
    flex-direction: column;
    gap: .25rem;
}

.search {
    font-size: 1rem;
}

.cards-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px , 1fr));
    gap: .25rem;
    margin-top: 1rem;
}

.card {
    border: 1px solid black;
    background-color: white;
    padding: .5rem;
}

.card > .nomes {
    margin-bottom: .25rem;
}

.card > .sobrenomes {
    font-size: .8rem;
    color: gray;
}

.hide {
    display: none;
}


---------------------------


AUTOCOMPLETE SEARCHBAR:

VIDEO: https://www.youtube.com/embed/pdyFf1ugVfk









%% */ 
</script>

////////////////////////////////////////////////////////








<script> %%

//////////////////////////////////////////////// &&&

API PARA GERAR USUARIOS RANDOMICOS / ALEATORIOS

https://randomuser.me/


HTML:
    <div class="card">
        <img class="foto" />
        <div class="nome"></div>                   
        <div class="sobrenome"></div>                     
    </div>
	
CSS:
.card {
    display: flex;
    flex-direction: column;
    border: 1px solid black;
    border-radius: 16px;
    background-color: white;
    padding: .5rem;
    justify-content: center;
    align-items: center;
    max-width: 20vw;
}

.card > .foto {
    display: flex;
    border-radius: 99px;
}

.card > .nome {
    margin-bottom: .25rem;
}

.card > .sobrenome {
    font-size: .8rem;
    color: gray;
}
	 


JS:
fetch("https://randomuser.me/api/")             *Gerará apenas 1 usuário 
   .then( response => response.json())
   .then( data => {
      document.querySelector(".foto").src = data.results[0].picture.medium
      document.querySelector(".nome").innerText = data.results[0].name.first
      document.querySelector(".sobrenome").innerText = data.results[0].name.last
   })
    .catch( error => {
        console.log("Ocorreu um erro: " + error)
    })

-------

Para gerar vários usuários diferentes:

HTML:
   <div class="card">
      <img class="foto" id="foto1"/>
      <div class="nome" id="nome1"></div>                   
      <div class="sobrenome" id="sobrenome1"></div>                     
   </div>

   <div class="card">
      <img class="foto" id="foto2"/>
      <div class="nome" id="nome2"></div>                   
      <div class="sobrenome" id="sobrenome2"></div>                     
   </div> 

	
CSS:
.card {
    display: flex;
    flex-direction: column;
    border: 1px solid black;
    border-radius: 16px;
    background-color: white;
    padding: .5rem;
	 margin-bottom: .5rem;
    justify-content: center;
    align-items: center;
    max-width: 20vw;
}

.card > .foto {
    display: flex;
    border-radius: 99px;
}

.card > .nome {
    margin-bottom: .25rem;
}

.card > .sobrenome {
    font-size: .8rem;
    color: gray;
}
	 


JS:
fetch("https://randomuser.me/api/?results=4")             /* Gerará 4 usuários diferentes */
   .then( response => response.json())
   .then( data => {
      document.querySelector("#foto1").src = data.results[0].picture.medium
      document.querySelector("#nome1").innerText = data.results[0].name.first
      document.querySelector("#sobrenome1").innerText = data.results[0].name.last
		
      document.querySelector("#foto2").src = data.results[1].picture.medium
      document.querySelector("#nome2").innerText = data.results[1].name.first
      document.querySelector("#sobrenome2").innerText = data.results[1].name.last
  
      document.querySelector("#foto3").src = data.results[2].picture.medium
      document.querySelector("#nome3").innerText = data.results[2].name.first
      document.querySelector("#sobrenome3").innerText = data.results[2].name.last
		
      document.querySelector("#foto4").src = data.results[3].picture.medium
      document.querySelector("#nome4").innerText = data.results[3].name.first
      document.querySelector("#sobrenome4").innerText = data.results[3].name.last
   })
    .catch( error => {
        console.log("Ocorreu um erro: " + error)
    })

</script> %%

//////////////////////////// &&&
	
	
	
	
	
	
	
/////////////////////////////////////////////////

<script> %%

LOADING PLACEHOLDER

HTML:
<!-- Placeholder elements -->
<div id="img-placeholder" class="img-placeholder skeleton"></div>
<div id="title-placeholder" class="title-placeholder skeleton"></div>
<div id="subtitle-placeholder" class="subtitle-placeholder skeleton"></div>
<div id="button-placeholder" class="button-placeholder skeleton"></div>

<!-- Actual content -->
<img src="https://picsum.photos/400/300" id="imagem" class="hidden"/>
<h1 id="titulo" class="hidden">TITULO</h1>
<h2 id="subtitulo" class="hidden">Texto de descrição abaixo do titulo</h2>
<button id="btn" class="hidden">BOTÃO</button>


JS:
// Get all elements
const img = document.getElementById('imagem');
const title = document.getElementById('titulo');
const subtitle = document.getElementById('subtitulo');
const button = document.getElementById('btn');

// Get all placeholder elements
const imgPlaceholder = document.getElementById('img-placeholder');
const titlePlaceholder = document.getElementById('title-placeholder');
const subtitlePlaceholder = document.getElementById('subtitle-placeholder');
const buttonPlaceholder = document.getElementById('button-placeholder');

// Function to show content and hide placeholders
function showContent() {

   // Hide placeholders
	imgPlaceholder.style.display = 'none';
   titlePlaceholder.style.display = 'none';
   subtitlePlaceholder.style.display = 'none';
   buttonPlaceholder.style.display = 'none';

   // Show actual content
   img.classList.remove('hidden');
   title.classList.remove('hidden');
   subtitle.classList.remove('hidden');
   button.classList.remove('hidden');
	
}

// Wait for image to load
img.onload = () => {
   // Simulate a minimum loading time of 1 second
   setTimeout(showContent, 1000);
};

// In case of image loading error
img.onerror = () => {
	console.error('Error loading image');
   showContent();
};


CSS:
/* Skeleton loading animation */
@keyframes shimmer {
	0% { background-position: -1000px 0; }
	100% { background-position: 1000px 0; }
}

.skeleton {
	background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
	background-size: 1000px 100%;
	animation: shimmer 2s infinite linear;
}

.img-placeholder {
	width: 400px;
	height: 300px;
	background-color: #f0f0f0;
	border-radius: 2rem;
}

.title-placeholder {
	width: 200px;
	height: 32px;
	margin: 16px 0;
	border-radius: 0.5rem;
}

.subtitle-placeholder {
	width: 300px;
	height: 24px;
	margin: 12px 0;
	border-radius: 0.3rem;
}

.button-placeholder {
	width: 100px;
	height: 40px;
	margin: 16px 0;
	border-radius: 0.5rem;
}

.hidden {
	display: none;
}


</script> %%

//////////////////////////////////////////////// &&&







////////////////////////////////////////////// %%
<script>

CARROUSEL / CAROUSEL

Exemplo 1:

HTML:
<div class="carousel-container">

   <div class="carousel">
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=1" alt="Slide 1">
      </div>
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=2" alt="Slide 2">
      </div>
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=3" alt="Slide 3">
      </div>
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=4" alt="Slide 4">
      </div>
   </div>
	 
   <button class="carousel-button prev">❮</button>
   <button class="carousel-button next">❯</button>
	 
   <div class="carousel-dots"></div>
	 
</div>


JS:
document.addEventListener('DOMContentLoaded', () => {

	const carousel = document.querySelector('.carousel');
	const slides = document.querySelectorAll('.carousel-slide');
	const prevButton = document.querySelector('.prev');
	const nextButton = document.querySelector('.next');
	const dotsContainer = document.querySelector('.carousel-dots');

	let currentSlide = 0;
	const totalSlides = slides.length;

	// Create dots
	for (let i = 0; i < totalSlides; i++) {
	  const dot = document.createElement('div');
	  dot.classList.add('dot');
	  if (i === 0) dot.classList.add('active');
	  dot.addEventListener('click', () => goToSlide(i));
	  dotsContainer.appendChild(dot);
	}

	// Update dots
	const updateDots = () => {
	  document.querySelectorAll('.dot').forEach((dot, index) => {
		 dot.classList.toggle('active', index === currentSlide);
	  });
	};

	// Go to specific slide
	const goToSlide = (slideIndex) => {
	  currentSlide = slideIndex;
	  carousel.style.transform = `translateX(-${currentSlide * 100}%)`;
	  updateDots();
	};

	// Next slide
	const nextSlide = () => {
	  currentSlide = (currentSlide + 1) % totalSlides;
	  goToSlide(currentSlide);
	};

	// Previous slide
	const prevSlide = () => {
	  currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
	  goToSlide(currentSlide);
	};

	// Event listeners
	prevButton.addEventListener('click', prevSlide);
	nextButton.addEventListener('click', nextSlide);

	// Auto advance slides every 5 seconds
	setInterval(nextSlide, 5000);
	
});


CSS:
.carousel-container {
	max-width: 800px;
	position: relative;
	margin: 0 auto;
	overflow: hidden;
}

.carousel {
	display: flex;
	transition: transform 0.5s ease-in-out;
}

.carousel-slide {
	min-width: 100%;
	height: 400px;
}

.carousel-slide img {
	width: 100%;
	height: 100%;
	object-fit: cover;
	border-radius: 2rem;
}

.carousel-button {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	background: rgba(0, 0, 0, 0.5);
	color: white;
	padding: 16px;
	border: none;
	cursor: pointer;
	font-size: 18px;
}

.carousel-button:hover {
	background: rgba(0, 0, 0, 0.8);
}

.prev {
	left: 10px;
	width: 3.4rem;
	border-radius: 50%;
}

.next {
	right: 10px;
	width: 3.4rem;
	border-radius: 50%;
}

.carousel-dots {
	display: flex;
	justify-content: center;
	margin-top: 10px;
	gap: 8px;
}

.dot {
	width: 12px;
	height: 12px;
	border-radius: 50%;
	background: #ccc;
	cursor: pointer;
}

.dot.active {
	background: #333;
}

----------------------------------

Carousel com fade in e fade out:

HTML:
<div class="carousel-container">

   <div class="carousel">
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=1" alt="Slide 1">
      </div>
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=2" alt="Slide 2">
      </div>
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=3" alt="Slide 3">
      </div>
      <div class="carousel-slide">
         <img src="https://picsum.photos/800/400/?random=4" alt="Slide 4">
      </div>
   </div>
	 
   <button class="carousel-button prev">❮</button>
   <button class="carousel-button next">❯</button>
	 
   <div class="carousel-dots"></div>
	 
</div>


JS:
document.addEventListener('DOMContentLoaded', function() {
    const slides = document.querySelectorAll('.carousel-slide');
    const prevButton = document.querySelector('.prev');
    const nextButton = document.querySelector('.next');
    const dotsContainer = document.querySelector('.carousel-dots');
    let currentSlide = 0;
    let interval;

    // Create dots
    slides.forEach((_, index) => {
        const dot = document.createElement('div');
        dot.classList.add('dot');
        if (index === 0) dot.classList.add('active');
        dot.addEventListener('click', () => goToSlide(index));
        dotsContainer.appendChild(dot);
    });

    const dots = document.querySelectorAll('.dot');

    function goToSlide(n) {
        slides[currentSlide].classList.remove('active');
        dots[currentSlide].classList.remove('active');
        
        currentSlide = (n + slides.length) % slides.length;
        
        slides[currentSlide].classList.add('active');
        dots[currentSlide].classList.add('active');
    }

    function nextSlide() {
        goToSlide(currentSlide + 1);
    }

    function prevSlide() {
        goToSlide(currentSlide - 1);
    }

    // Event listeners
    nextButton.addEventListener('click', () => {
        nextSlide();
        resetInterval();
    });

    prevButton.addEventListener('click', () => {
        prevSlide();
        resetInterval();
    });

    // Auto advance slides
    function startInterval() {
        interval = setInterval(nextSlide, 5000); // Change slide every 5 seconds
    }

    function resetInterval() {
        clearInterval(interval);
        startInterval();
    }

    startInterval();
});



CSS:
.carousel-container {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
    filter: drop-shadow(0 0.5rem 0.4rem rgba(0,0,0,0.4)); 
}

.carousel {
    position: relative;
    height: 400px;
    overflow: hidden;
}

.carousel-slide {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.4s ease-in-out;
}

.carousel-slide.active {
    opacity: 1;
}

.carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 2rem;
}

.carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 1rem;
    cursor: pointer;
    border: none;
    border-radius: 50%;
    font-size: 1rem;
}

.carousel-button:hover {
    background: rgba(0, 0, 0, 0.8);
}

.prev {
    left: 2rem;
    width: 3.3rem;
  	border-radius: 50%;
}

.next {
    right: 2rem;
    width: 3.3rem;
  	border-radius: 50%;
}

.carousel-dots {
    position: absolute;
    bottom: 1.7rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
}

.dot {
    width: 0.7rem;
    height: 0.7rem;
    border-radius: 50%;
    border: 1px solid gray;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
}

.dot.active {
    background: white;
}




</script> %%
///////////////////////////////////////////////&&&






>>>>    <script>/* QUIZ / ANKI

        <input type="button" id="btn_pergunta" onclick="Novo()" value="Nova pergunta" />
        <input type="button" id="btn_resposta" onclick="Resposta()" value="Mostrar resposta" />
        <br><br>
        <div id="pergunta"></div>
        <div id="resposta"></div>

        <script>
    
        let Quiz = [
            ["Pergunta 1" , "Resposta 1" ],
            ["Pergunta 2" , "Resposta 2" ],
            ["Pergunta 3" , "Resposta 3" ],
            ["Pergunta 4" , "Resposta 4" ],
            ["Pergunta 5" , "Resposta 5" ],
            ["Pergunta 6" , "Resposta 6" ],
            ["Pergunta 7" , "Resposta 7" ],
            ["Pergunta 8" , "Resposta 8" ],
            ["Pergunta 9" , "Resposta 9" ],
            ["Pergunta 10" , "Resposta 10" ],
        ];
        
        var num = Math.floor(Math.random() * Quiz.length);

        let Novo = () => {
            document.getElementById("resposta").innerHTML = "";
            num = Math.floor(Math.random() * Quiz.length);
            document.getElementById("pergunta").innerHTML = Quiz[num][0];
        }

        let Resposta = () => {
            document.getElementById("resposta").innerHTML = "<hr>" + Quiz[num][1];
        }
        </ script>

%%     */</script>



<!-- PARA INCLUIR ARQUIVO JAVASCRIPT EXTERNO
    <script src="NomeDoArquivo.js"></script>
-->
