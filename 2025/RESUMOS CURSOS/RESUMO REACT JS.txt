

INICIANDO NO REACT JS

No terminal:

Para escolher uma pasta:
cd nomedapasta

Para voltar:
cd..

------

Para criar dentro da pasta os arquivos necessarios para o programa:
npx create-react-app nomedapasta -y    (MODO ANTIGO E DESATUALIZADO)

Usando o Vite:  
VIDEO: https://www.youtube.com/embed/3OqiKTyH4r0?autoplay=1

npx create-vite            
ou
npm create vite@latest     //Te pedirá o nome do projeto e pacote
ou
npm create vite@latest .   //Não te pedirá o nome do projeto e pacote   

Escolha o nome do projeto
Escolha o framework React
Escolha Javascript

Para instalar os pacotes, digite:
cd nomedoprojeto
npm install 

Para iniciar o Aplicativo (App.jsx) digite no terminal:
cd nomedapasta                 (local onde está o arquivo app.jsx)
npm run dev

Ele rodará na url: http://localhost:5173/

--------

Para instalar dependencias/bibliotecas:
npm add nomedabiblioteca

Exemplos:
npm add axios          (para arquivo na parte client)

npm add mysql2         (para arquivo na parte server)
npm add express        (para arquivo na parte server)
npm add cors           (para arquivo na parte server)
npm add nodemon        (para arquivo na parte server)
OU
npm add mysql2 express cors nodemon

------

Para iniciar o servidor, digite:
cd nomedapasta
npm start


------

Para usar o nodemon para dar refresh automatico na tela a cada mudança, digite o codigo:
nodemon app.js


-Para usar o nodemon com um comando personalizado, no arquivo package.json altere a seguinte parte do codigo:

...
"scripts": {
  "start": "node index.js",
  "dev": "nodemon index.js",
  "test": "echo \"Error: no test specified\" && exit 1"
}
...

-Com isso, para iniciar o servidor e ele ser atualizado automaticamente por causa do nodemon, pode-se usar no terminal os comandos:
yarn dev           (caso esteja usando o yarn)
OU
npm run dev        (caso esteja usando o npm)


Caso queira que o nodemon apenas faça refresh em um arquivo especifico:
{
  "watch": ["src", "config"]
}

Caso queira ignorar algum arquivo especifico:
{
  "ignore": ["logs", "public"]
}

///////////////////////////////////////////////////////////////////////////////////////&&&
REACT icons

instalação:
npm install react-icons --save

Exemplo de uso:

import React from 'react'
import { FaHome } from "react-icons/fa";

export default function App() {
  return (
    <div>
      <FaHome />
    </div>
  );
}

///////////////////////////////////////////////////////////////////////////////////////&&&
React font

Importando fontes da web:
(exemplo: googlefonts)

No arquivo estilo.css:

@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400&display=swap');

*{
  font-family: "Oswald", sans-serif;
}

OBS: * significa que será aplicado em todas as tags de texto

No arquivo App.jsx:

import React from 'react'
import './estilo.css'

export default function App() {
  return (
    <div>
      <p>Texto</p>
    </div>
  );
}

/////////////////////////////////////////////////////////////////////////////// &&&
REACT SNIPPETS

Instale a extensão Reactjs code snippets no VSCode

Para criar um componente, digite rsc + ENTER 

///////////////////////////////////////////////////////////////////////////////////////&&&
CORES, TAMANHOS E TEMAS PERSONALIZADOS

-No arquivo Theme.css:          (ou globals.css)

@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400;500;600;700&display=swap');

@font-face {
  font-family: 'Bebas';
  src: url('../fontes/Bebas_Neue.otf') format('opentype');
  font-weight: normal;
}

:root {
  --cor_principal: red;
  --cor_secundaria: orange;
  --cor_texto: dark-gray;
  --cor_link: purple;

  --fonte_padrao: Arial, Verdana, Helvetica, sans-serif;
  --fonte_destaque: 'Bebas Neue', cursive;
  --fonte_oswald: 'Oswald', sans-serif;
}

.txt {
  font-family: var(--fonte_padrao);
  color: var(--cor_principal);
}

-No arquivo App.jsx:

import React from 'react'
import './Theme.css'

export default function App() {
  return (
    <div>
      <h1 className="txt">Texto vermelho</h1>
      <p style={{color: "var(--cor_secundaria)"}}>Texto laranja</p>
    </div>
  );
}

///////////////////////////////////////////////////////////////////////////////////////

CURSO REACT JS

https://www.youtube.com/embed/xsR894YLShs?autoplay=1
https://www.youtube.com/embed/Pl_aGMWTk4g?autoplay=1

-no prompt de comando ou windows terminal
cd C:\Prog\Bacup3\WEB\CURSO REACT JS\aplicativo01
npx create-react-app app01      (FORMA ANTIGA)

-após instalar: 

--para abrir o arquivo no visual studio
cd C:\Prog\Bacup3\WEB\CURSO REACT JS\aplicativo01
cd app01
code .

--para rodar o aplicativo no navegador
cd C:\Prog\Bacup3\WEB\CURSO REACT JS\aplicativo01
cd app01
npm start 

--------------------

Os únicos arquivos que serão necessários dentro da pasta src serão:
App.js
App.css           (Pode remover todo o conteúdo que já vem dentro do arquivo)
index.js

Pode deletar os arquivos dentro da pasta src:
reportWebVitals.js                   (e excluir o import dentro do arquivo App.js)
setupTests.js e App.test.js          (caso não precise realizar testes)
logo.svg                             (e excluir o import dentro do arquivo App.js)
index.css                            (e excluir o import dentro do arquivo App.js)


------------

Nome de pastas:
assets 
  img
    imagemfundo.jpg
  icons
    logo.svg
componenents  (para cada seção do site)
  home
    home.jsx
    home.css
    navbar
      navbar.jsx
      navbar.css
    footer
      footer.jsx
      footer.css
  contatos
  sobre
  produtos

Os estilos CSS também poderiam estar uma pasta chamada styles dentro de src

---------------

Plugin opcional para atalhos no React:

ES7 React


--------------

Exemplo de css no arquivo App.css:

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Oswald", sans-serif;
}

img {
  max-width: 100%;
  height: auto;
}

.App {
  min-height: 100vh;
  width: 85vw;
  max-width: 1900px;          //geralmente 1120px ou 1200px para um container
  margin: 0rem auto;
}

body{
  max-width: 100%;
  overflow-x: hidden;
  background-color: white;
}

----------------------------------------------------------------&&&
ESTRUTURA Básica
https://www.youtube.com/embed/Pl_aGMWTk4g?autoplay=1

No arquivo App.js:

import React from 'react'

function App(){
  return(
    <tag html>               // Pode adicionar o nome da class na tag. Ex: <div className="App">
    ...
    </tag html>
  )
}

export default App()

OU

import React from 'react'

export default function App(){
  return(
    <>  
      <tag html>
      ...
      </tag html>
    </>
  )
}

OBS: Só pode retornar (dentro de return) apenas 1 componente (tag html).
OBS 2: É obrigatório fechar as tags: Ex: <p>...</p> ou <br/> ou <img/> e etc...
OBS 3: Pode-se usar <>...</> ou alguma outra tag para cada componente (<section>...</section>)

--------------------------------------------------------&&&
ATENÇÃO!!!

Atualmente com o React 17 em diante não é necessário usar em todo arquivo o import React from 'react'
Since React 17 and the introduction of the New JSX Transform, explicitly importing React is no longer strictly necessary for JSX to work. The build tool automatically injects the necessary runtime code for JSX without you needing to import React at the top of every file.

Só é obrigatório quando:

-É necessário usar quando for usado algum hook, como por exemplo:
import React, { useState, useEffect } from 'react';
Using React Hooks: If you are using Hooks like useState, useEffect, useContext, etc., you need to import them directly from 'react' or import the entire React object and access them as React.useState, etc. 

-Referencing the React object directly:
If you need to access other properties or methods directly from the React object, such as React.Component for class components or React.Fragment, you will still need to import it.

-Working with older React projects:
If you are working on a project that uses a React version older than 17, you will still need to import React in any file containing JSX.

--------------------------------------------------------&&&
INSERINDO COISAS
https://www.youtube.com/embed/um9WkmclLFs?autoplay=1

export default function App(){
  const canal = 'CFB cursos'
  return(
    <section>  
      <p>
        {canal}
      </p>
    </section>
  )
}

>>> CFB cursos

OBS: No React, coloca-se entre chaves.

----

EXEMPLO 2:

export default function App(){
  const cfb = 'CFB cursos'
  return(
    <section>  
      <p>
        Canal: {cfb}
      </p>
    </section>
  )
}

>>> Canal: CFB cursos

----

EXEMPLO 3:

export default function App(){
  const cfb = 'CFB cursos'
  return(
    <section>  
      <p>
        {`Canal: ` + cfb}          *Utiliza-se a crase dentro das chaves ao invés das aspas
      </p>
    </section>
  )
}

>>> Canal: CFB cursos

----

EXEMPLO 4:  Retornando uma função

export default function App(){
  const cfb = () => {
    return( 
    'CFB cursos'
    )
  }
  return(
    <section>  
      <p>
        {`Canal: ` + cfb()}
      </p>
    </section>
  )
}

>>> Canal: CFB cursos

--------------------------------------------------------&&&
IMPORTANDO IMAGENS
https://www.youtube.com/embed/um9WkmclLFs?autoplay=1

Crie uma nova pasta dentro da pasta src ou public. Coloque as imagens dentro dessa pasta. 
No exercicio foi criada a pasta 'componentes' e dentro dela a pasta chamada 'imgs'.

-Para importar uma imagem dentro da pasta src (que está no servidor):

import Logo from './componentes/imgs/logo.png'

export default function App(){
  return(
    <section>  
      <img src = {Logo} />
    </section>
  )
}

-Para importar uma imagem dentro da pasta public: 
(Não é preciso usar o import)

export default function App(){
  return(
    <section>  
      <img src = '/componentes/imgs/logo.png' />
    </section>
  )
}

------------------------------------------------------------&&&
CRIANDO E IMPORTANDO COMPONENTES
https://www.youtube.com/embed/875omMYCjA0?autoplay=1

Crie um arquivo novo na pasta src e dê um nome para esse componente. 

No exemplo foi criada a pasta componentes em src e dentro dela o arquivo 'corpo.js'

-Dentro do arquivo corpo.js:

import React from 'react'

export default function Corpo() {
  return(
    <section>
      <p>TEXTO DE EXEMPLO</p>
    </section>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         *no video foi usado o caminho './componentes/Corpo'

export default function App() {
  return(
    <>
      <Corpo/>
    </>
  )
}

>>> TEXTO DE EXEMPLO

------

OUTRO EXEMPLO:

No exemplo foi criada a pasta componentes em src e dentro dela o arquivo 'header.js'

-Dentro do arquivo header.js:

import React from 'react'
import Logo from './imgs/logo.png'

export default function Header() {
  return(
    <header>
      <img src = {Logo} />
    </header>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Header from './componentes/header.js'        *no video foi usado o caminho './componentes/Header'

export default function App() {
  return(
    <>
      <Header/>
    </>
  )
}

------------------------------------------------------------&&&
COMO ENVIAR ALGO (PROPS) PARA UM COMPONENTE
VIDEO: https://www.youtube.com/embed/CsCP8ZFySg4?autoplay=1

----------

-Criar um componente chamado corpo.js
-Dentro do arquivo corpo.js:

import React from 'react'

export default function Corpo(props) {
  return(
    <section>
      <p>Nome: {props.nome} </p>
    </section>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         

export default function App(){

  return(
    <section>  
      <Corpo
        nome = 'Thiago'
      />
    </section>
  )
}

>>> Nome: Thiago

-----------

-Criar um componente chamado dados.js
-Dentro do arquivo dados.js:

import React from 'react'

export default function Dados(props) {
  return(
    <section>
      <p>Nome: {props.nome} </p>
      <p>Sobrenome: {props.sobrenome} </p>
      <p>Idade: {props.idade} </p>
    </section>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Dados from './componentes/dados.js'           *no video foi usado o caminho './componentes/Dados'

export default function App() {
  return(
    <>
      <Dados 
        nome = 'Thiago'
        sobrenome = 'Alves'
        idade = '30'
      />
    </>
  )
}

>>> Nome: Thiago
>>> Sobrenome: Alves
>>> Idade: 30

-Outra forma sem importar os props:

import React from 'react'
import Dados from './componentes/dados.js'           *no video foi usado o caminho './componentes/Dados'

export default function App() {
  const name = 'Thiago'
  const lastname = 'Alves'
  const age = '30'
  return(
    <>
      <Dados 
        nome = {name}
        sobrenome = {lastname}
        idade = {age}
      />
    </>
  )
}

--------------------

-Usando 3 arquivos (2 props):

-Dentro do arquivo texto.js:

import React from 'react'

export default function Texto(props) {
  return(
    <>
      {props.txt}
    </>
  )
}


-Dentro do arquivo exemplo.js:

import React from 'react'     

export default function Exemplo(props) {
  return(
    <>
      {props.exmpl}
    </>
  )
}


-Dentro do arquivo app.js:

import React from 'react'

import Corpo from './componentes/texto.js' 
import Dados from './componentes/exemplo.js'   

export default function App() {
  return(
    <>
      <p>
        <Texto
          txt = 'Texto' 
        />
        <Exemplo
          exmpl = ' de Exemplo'
        />
      </p>
    </>
  )
}

>>> Texto de Exemplo

------------------------------------------------------------&&&
PROPTYPES (NÃO FUNCIONA MAIS!!! É MELHOR USAR TYPESCRIPT)    DEPRECATED
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

-Arquivo Pessoa.jsx:

import PropTypes from 'prop-types'

export default function Pessoa(props) {
  return(
    <div>
      <p>Nome: {props.nome}</p>
      <p>Idade: {props.idade} anos</p>
      <p>Solteiro: {props.status ? "Sim" : "Não"}</p>
    </div>
  )
}

Pessoa.propTypes = {
  nome: PropTypes.string,
  idade: PropTypes.number,
  status: PropTypes.bool,      //Não é boolean, é bool
}

¨¨¨¨
-Dentro do arquivo App.jsx:

import Pessoa from './components/Pessoa'         

export default function App(){
  return(
    <>  
      <Pessoa nome='Thiago' idade={20} status={true} />
    </>
  )
}

-Usando o PropTypes, caso seja passado um valor com um tipo diferente do especificado, aparecerá um warning no console.

------------------------------------------------------------&&&
DEFAULT PROPS (NÃO FUNCIONA MAIS!!!!)
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

-Arquivo Pessoa.jsx:

import PropTypes from 'prop-types'

export default function Pessoa(props) {
  return(
    <div>
      <p>Nome: {props.nome}</p>
      <p>Idade: {props.idade} anos</p>
      <p>Solteiro: {props.status ? "Sim" : "Não"}</p>
    </div>
  )
}

Pessoa.defaultProps = {
  nome: "Sem nome",
  idade: "Sem idade",
  status: "Status não informado",      
}

¨¨¨¨
-Dentro do arquivo App.jsx:

import Pessoa from './components/Pessoa'         

export default function App(){
  return(
    <>  
      <Pessoa nome='Thiago' idade={20} />
    </>
  )
}

>>> Thiago
>>> 20 anos
>>> Status não informado

-Como não foi passado um valor para status, foi mostrado o valor estabelecido como default

--------------------------------- &&&
Props usando arrays com valores default: (MODO ATUALIZADO AO INVÉS DE DEFAULTPROPS)

-Arquivo Pessoas.jsx:

export default function Pessoas({id = 0, nome = "Sem nome", idade = "Sem idade", sexo = "Sexo não informado"}) {
  return (
    <>
      <p>Nome: {nome}</p>
      <p>Idade: {idade}</p>
      <p>Sexo: {sexo}</p>
    </>
  );
}

¨¨¨¨
-Arquivo App.jsx:

import Pessoas from './components/Pessoas'

export default function App() {

  const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  return (
    <>
      {pessoas.map(pessoa => (
        <div key={pessoa.id}>
          <Pessoas nome={pessoa.nome} idade={pessoa.idade} />
          <hr />
        </div>  
      ))}
    </>
  );
}

-Como o valor de sexo não foi especificado, será exibido o valor default declarado

/////////////////////////////////////////////////////////////// &&&
DESTRUCTION / DESESTRUTURAÇÃO (ao invés de props)
VIDEO: https://www.youtube.com/embed/playlist?list=PLyRd2qM1TnCriAHRluaT2vmPpfmC1OonK

-Usando props:

export default function Teste(props){
  return (
    <>
      <p>{props.nome}</p>
      <p>{props.idade}</p>
    </>
  )
}

¨¨¨¨¨¨¨¨
-Usando destruction:

export default function Teste({nome, idade}){
  return (
    <>
      <p>{nome}</p>
      <p>{idade}</p>
    </>
  )
}

------------------------------------------------------------&&&
ENVIAR FUNÇÕES PARA COMPONENTES
VIDEO: https://www.youtube.com/embed/6T6AM9VbLMY?autoplay=1

-Usando funções no React:

-Dentro do arquivo app.js:

import React from 'react'

export default function App() {
  const canal = () => {
    return 'CFB Cursos'
  }
  return(
    <>
      <p>
        {canal()}
      </p>
    </>
  )
}

>>> CFB Cursos


------------

-Dentro do arquivo app.js:

import React from 'react'

export default function App() {
  const soma = (x) => {
    return x + 3
  }
  return(
    <>
      <p>
        {`Soma: ` + soma(10)}
      </p>
    </>
  )
}

>>> Soma: 13

------------
PARA IMPORTAR UMA FUNÇÃO DE UM COMPONENTE

-Criar um componente chamado dados.js
-Dentro do arquivo dados.js:

import React from 'react'

export default function Dados() {
  const canal = () => {
    return 'CFB Cursos'
  }
  return(
    <section>
      <p>Canal: {canal()}</p>
    </section>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Dados from './componentes/dados.js'         

export default function App() {
  return(
    <>
      <Dados/>
    </>
  )
}

---------

-Outra forma utilizando props:

-Dentro do arquivo dados.js:

import React from 'react'

export default function Dados(props) {
  return(
    <section>
      <p>Canal: {props.canal}</p>
    </section>
  )
}


-Dentro do arquivo app.js:

import Dados from './componentes/dados.js'         

export default function App() {
  const cnl = () => {
    return 'CFB Cursos'
  }
  return(
    <>
      <Dados
        canal = {cnl()}
      />
    </>
  )
}


-------

-Dentro do arquivo corpo.js:

import React from 'react'

export default function Corpo(props) {
  const v1 = (x) => {
    return x
  }
  const v2 = (y) => {
    return y
  }
  return(
    <section>
      <p>{props.v1 + props.v2} </p>
    </section>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         

export default function App() {
  let n1 = 10
  let n2 = 20
  return(
    <>
      <Corpo
        v1 = {n1}
        v2 = {n2}
      />
    </>
  )
}

>>> 30



-------------------------------------

-Dentro do arquivo corpo.js:

import React from 'react'        

export default function Corpo() {
  const soma = (x) => {
    return x + 3
  }
  return(
    <>
      <p>
        {soma(10)}
      </p>
    </>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         

export default function App() {

  return(
    <>
      <Corpo/>
    </>
  )
}

>>> 13

-------------------

-Dentro do arquivo corpo.js:

import React from 'react'        

export default function Corpo() {
  const soma = (x) => {
    return x + 3
  }
  return(
    <>
      <p>
        {`Soma: ` + soma(10)}
      </p>
    </>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.jsx'         

export default function App() {

  return(
    <>
      <Corpo/>
    </>
  )
}

>>> Soma: 13


-------------------------------------

-Dentro do arquivo corpo.js:

import React from 'react'        

export default function Corpo() {
  const somar = (v1 , v2) => {
    return v1 + v2
  }
  return(
    <>
      {somar(10,20)}
    </>
  )
}

-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         

export default function App() {
  return(
    <>
      <Corpo/>
    </>
  )
}

>>> 30













--------------------------------------
ERRADO
EXEMPLO 1 DO VIDEO

-Dentro do arquivo dados.js:

export default function Dados(props) {
  return(
    <section>
      <p>{props.canal()}</p>
    </section>
  )
}


-Dentro do arquivo corpo.js:

import Dados from './componentes/dados.js'         

export default function Corpo() {
  const cnl = () => {
    return 'CFB Cursos'
  }
  return(
    <>
      <Dados
        canal = {cnl}
      />
    </>
  )
}


-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         

export default function App() {
  return(
    <>
      <Corpo/>
    </>
  )
}

-------------------------------------
ERRADO
EXEMPLO 2 DO VIDEO


-Dentro do arquivo dados.js:

import React from 'react'

export default function Dados(props) {
  const n1 = 10
  const n2 = 20
  return(
    <section>
      <p>{props.somar(n1,n2)}</p>
    </section>
  )
}


-Dentro do arquivo corpo.js:

import React from 'react'
import Dados from './componentes/dados.jsx'         

export default function Corpo() {
  const somar = (v1 , v2) => {
    return v1 + v2
  }
  return(
    <>
      <Dados
        somar = {somar}
      />
    </>
  )
}


-Dentro do arquivo app.js:

import React from 'react'
import Corpo from './componentes/corpo.js'         

export default function App() {
  return(
    <>
      <Corpo/>
    </>
  )
}





------------------------------------------------------------&&&
USANDO CSS NO REACT
VIDEO: https://www.youtube.com/embed/zhP0EoBbfuc?autoplay=1

-Utilizando CSS INLINE:

import React from 'react'  

export default function App() {
  return(
    <>
      <p style={{color:'red'}}>            *São usadas 2 chaves
        Texto em vermelho
      </p>
    </>
  )
}


-Usando 2 formatações do CSS:

import React from 'react'  

export default function App() {
  return(
    <>
      <p style={{color:'red' , background:'yellow'}}>
        Texto em vermelho e fundo amarelo
      </p>
    </>
  )
}

OBS: Para estilizações no CSS que utilizem traço (hifen) entre as palavras, é necessário usar o modo Camel, removendo o hifen e iniciando a proxima palavra com letra maiúscula:

(Em CSS)  =>   (Em React)
background-color: red;    =>    backgroundColor: 'red'
font-family: Arial;       =>    fontFamily: 'Arial'
font-size: 20px;          =>    fontSize: '20px'
text-align: center;       =>    textAlign: 'center'

Exemplo:

import React from 'react'  

export default function App() {
  return(
    <>
      <p style={{fontSize: '20px' , fontFamily: 'Arial'}}>
        Texto em fonte Arial com 20px
      </p>
    </>
  )
}

--------------------------

-Utilizando CSS INTERNO:

-Criando variaveis para receber os estilos CSS: 

import React from 'react'  

export default function App() {
  var estilo = {
    color: 'blue',
    backgroundColor: 'pink',
  }
  return(
    <>
      <p style={estilo}>
        Texto em azul com fundo rosa
      </p>
    </>
  )
}

---------------------------

-Utilizando CSS EXTERNO:

-Crie um arquivo CSS.
No exemplo abaixo foi criado o arquivo app.css

-Dentro do arquivo App.css:

.estilo {
  text-align: right;
  color: orange;
}


-Dentro do arquivo app.js:

import React from 'react';

import './App.css';

export default function App() {
  return(
    <>
      <p className='estilo'>
        Texto laranja alinhado a direita
      </p>
    </>
  )
}

OBS: É possível também incluir o estilo CSS alterando o arquivo index.html, por exemplo:
... 
  <body style='background-color: red;'>
    ...
  </body>
...

--------

-Dentro do arquivo App.css:

.estilo h2{
  text-align: center;
  color: green;
}


-Dentro do arquivo app.js:

import React from 'react';

import './App.css';

export default function App() {
  return(
    <>
      <section className='estilo'>
        <h1>Texto 1</h1>
        <h2>Texto 2</h2>
        <p>Texto 3</p>
      </section>
    </>
  )
}

Nesse exemplo, apenas a tag h2 recebeu a estilizaçao do CSS.

--------

-Dentro do arquivo App.css:

.coluna {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}


-Dentro do arquivo app.js:

import React from 'react';

import './App.css';

export default function App() {
  return(
    <>
      <section className='coluna'>
        <p>TEXTO 1</p>
        <p>TEXTO 2</p>
        <p>TEXTO 3</p>
      </section>
    </>
  )
}

----------------------------------------------------------------------------&&&
COMO FUNCIONA A RENDERIZAÇÃO DOS COMPONENTES NO REACT:
VIDEO: https://www.youtube.com/embed/rg3QOhzii_w?autoplay=1

Sempre que ocorrer uma alteração em um componente, ao invés de atualizar a página inteira, no React é possível renderizar apenas o componente que sofreu mudança. 

Exemplo:

-Dentro de um arquivo chamado relogio.js:

import React from 'react';

export default function Relogio() {
  return (
    <p> 
      {new Date().toLocaleTimeString()}
    </p>
  )
}


-Dentro do arquivo app.js:

import React from 'react';
import './relogio.js';

export default function App() {
  return(
    <>
      <Relogio/>
    </>
  )
}

Se fizermos isso, para vermos a hora passando em tempo real precisaríamos ficar manualmente atualizando a página e renderizando TODA a página. Com o React é possível que apenas o componente Relogio seja renderizado, não precisando atualizar a página inteira.

-Dentro do arquivo index.js:

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

function FUNÇÃO() {              *Coloque esse trecho dentro de uma função
  ReactDOM.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>,
    document.getElementById('root')
  );
}

setInterval(FUNÇÃO,1000)                *Chame a Função dentro de um set interval 

reportWebVitals();

Dessa forma apenas o componente relogio será atualizado e renderizado a cada segundo

----------------------------------------------------------------------------&&&
USESTATE - ALTERANDO STATE NO REACT:
VIDEO: https://www.youtube.com/embed/ZokLiEbKiiU?autoplay=1

State é o que armazena valores de propriedades que pertencem ao componente. E quando mudam o valor do estado, estes componentes são renderizados novamente.

-Dentro do arquivo app.js:

import React,{useState} from 'react';                *adicionamos useState no import

export default function App() {
  const [estado, função] = useState()                *criamos uma variavel com um State e uma função para alterar esse State

  return(
    <>
      <p>Valor do State: {estado}</p>
    </>
  )
}

>>> Valor do State: 

Caso coloque um valor na função useState():

import React,{useState} from 'react'; 

export default function App() {
  const [estado, função] = useState(42)                *criamos uma variavel com um State e uma função para alterar esse State

  return(
    <>
      <p>Valor do State: {estado}</p>
    </>
  )
}

>>> Valor do State: 42

------------
EXEMPLO 2:

import React,{useState} from 'react'; 

export default function App() {
  const [valorState, funçãoState] = useState(0)                

  return(
    <>
      <p>Valor do State: {valorState}</p>
      <button onClick = { () => funçãoState(valorState + 10) }> 
        Soma 10
      </button>
    </>
  )
}

Nesse exemplo, a cada vez que clicar no botão, o valor do State será alterado e renderizado apenas ele, adicionando + 10 ao total

-------------
EXEMPLO 3: 

-Utlizando props:

-Dentro de um arquivo chamado numero.js:

import React from 'react'; 

export default function Numero(props){
  return (
      <>
      <p>Valor do State em NUMERO: {props.num1}</p>
        <button onClick = { () => props.fNum1(props.num1+10) }>
            SOMAR
        </button>
      </>
  )
}

-Dentro do arquivo app.js:

import React,{useState} from 'react'; 
import Numero from './numero.js'

export default function App() {
  const [num2, fNum2] = useState(10)                

  return(
    <>
      <p>Valor do State em APP: {num2}</p>
      <Numero
        num1 = {num2}
        fNum1 = {fNum2}
      />
    </>
  )
}

Ao clicar no botão, será alterado os 2 valores

-------------------
EXEMPLO 4:

-Dentro do arquivo app.js:

import React,{useState} from 'react'; 

export default function App() {
  var [name, setName] = useState('Renato')                     

  return(
    <>
      <p>Nome: {name}</p>
      <button onClick = { () => setName(name = 'Thiago') }>
        MUDAR NOME
      </button>
    </>
  )
}

>>> Nome: Renato

Ao clicar no botão, o nome seria alterado.

OBS: Caso a variavel tivesse sido criada com const ao invés de var ou let, não seria possível fazer a alteração do valor da variavel.

Para poder alterar uma variavel const seria feito da seguinte forma:

import React,{useState} from 'react'; 

export default function App() {
  const [name, setName] = useState('Renato')                     

  return(
    <>
      <p>Nome: {name}</p>
      <button onClick = { () => setName('Thiago') }>        *Não é preciso indicar de qual variavel estamos querendo alterar
        MUDAR NOME
      </button>
    </>
  )
}

------------------------------------ ###
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

import {useState} from 'react'

export default function App(){

  const [nome, setNome] = useState("Bruno")
  const [idade, setIdade] = useState(0)
  const [status, setStatus] = useState(true)

  const updateNome = () => {
    setNome("Carlos")
  }

  const addIdade = () => {
    setIdade(prev => prev + 1)
  }

  const toggleStatus = () => {
    setStatus(!status)
  }

  return (
    <>
      <p>Nome: {nome}</p>
      <button onClick={updateNome}>Mudar nome</button>

      <p>Idade: {idade}</p>
      <button onClick={addIdade}>Aumentar idade</button>

      <p>Trabalhando: {status ? "Sim" : "Não"}</p>
      <button onClick={toggleStatus}>Mudar status</button>     
    </>
  )
}

------------------------------------ ###
HOOK: Use state (forma recomendada PREV)
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

Forma simples:

import { usestate } from "react";

const App = () => {
  const [count, setCount] = usestate(0);
  const incrementCount = () => {
    setCount(count + 1);                           //ERRADO
  }
  return (
    <div>
      <h1>{count}</h1>
      <button onClick={incrementCount}>Increment</button>
    </div>
  )
}
export default App;

-------

Forma CORRETA:

import { usestate } from "react";

const App = () => {

  const [count, setCount] = usestate(0);

  const incrementCount = () => {
    setCount((prevState) = prevState + 1);            //CERTO
  }

  return (
    <div>
      <h1>{count}</h1>
      <button onClick={incrementCount}>Increment</button>
    </div>
  )
}

export default App;

----------

import { usestate } from "react";

const App = () => {

  const [state, setState] = usestate({count: 0, theme: "light"});

  const incrementcount = () => {
    setState((prevState) => {
      return {
        ...prevState,
        count: prevState.count + 1,
        theme: "dark"
      }
    })
  }

  return (
    <div>
      <h1>{state.count}</h1>
      <button onClick={incrementCount}>Increment</button>
    </div>
  )
}

export default App;

--------------

import { useState } from "react";

export default function App() {

  const [user, setUser] = useState({
    nome: "Ana",
    idade: 15,
    hobbies: ["Leitura","Musica"],
  })

  const aumentaIdade = () => {
    setUser((prevUser) => ({
      ...prevUser,
      idade: prevUser.idade + 1,
    }))
  }

  return (
    <div>
      <p>Nome: {user.nome}</p>
      <p>Idade: {user.idade}</p>
      <button onClick={aumentaIdade}>Aumentar idade</button>
    </div>
  )

}

-------------------------------------------------------------------------- &&&
CLICK EVENTS e FUNÇÕES

-Função sem parâmetro:

export default function App() {

  const Show = () => alert("CLICOU!")

  return(
    <>
      <button onClick={Show}>Click</button>
    </>
  )
}

--------

-Função com parâmetro:

export default function App() {

  const Show = (texto) => alert(texto)

  return(
    <>
      <button onClick={Show("CLICOU!")}>Click</button>
    </>
  )
}

-No exemplo acima, a função será invocada ao iniciar sem precisar apertar no botão.
Para resolver isso, é necessário usar arrow function:

export default function App() {

  const Show = (texto) => alert(texto)

  return(
    <>
      <button onClick={() => Show("CLICOU!")}>Click</button>
    </>
  )
}

----------------------------- ###

export default function App() {

  const handleClick = (e) => console.log(e)

  return(
    <>
      <button onClick={(e) => handleClick(e)}>Click</button>
    </>
  )
}

Ao clicar no botão, aparecerá no console todos os tipos de propriedades de evento.
Ex: Onde clicou, o que foi clicado, etc...

-------

export default function App() {

  const handleClick = (e) => console.log(e.target)

  return(
    <>
      <button onClick={(e) => handleClick(e)}>Click</button>
    </>
  )
}

>>>  <button>"Click"</button>

---------------- 

Mudando o valor de texto de um elemento:

export default function App() {

  const handleClick = (e) => e.target.textContent = "Novo texto"

  return(
    <>
      <h1 onClick={(e) => handleClick(e)}>Texto inicial</h1>
    </>
  )
}

Ao clicar no elemento, ele muda o seu valor.

--------

Mudando a cor de um elemento:

export default function App() {

  const handleClick = (e) => e.target.style.color = "red"

  return(
    <>
      <h1 onClick={(e) => handleClick(e)}>Texto que ficará vermelho ao clicar</h1>
    </>
  )
}

--------

Desaparecendo um elemento:

export default function App() {

  const handleClick = (e) => e.target.style.display = "none"

  return(
    <>
      <h1 onClick={(e) => handleClick(e)}>Texto que desaparecerá</h1>
    </>
  )
}

--------
Mudando a classe de um elemento:

-Arquivo App.css:

.vermelho {
  color: red;
}

¨¨¨¨
-Arquivo App.jsx:

import './App.css'

export default function App() {

  const handleClick = (e) => e.target.className = "vermelho"

  return(
    <>
      <h1 onClick={(e) => handleClick(e)}>Texto</h1>
    </>
  )
}

-------

-Arquivo App.css:

.azul {
  color: blue;
}

.vermelho {
  color: red;
}

¨¨¨¨
-Arquivo App.jsx:

import './App.css'

export default function App() {

  const handleClick = (e) => {e.target.className = e.target.className === "vermelho" ? "azul" : "vermelho";}

  return(
    <>
      <h1 className="vermelho" onClick={handleClick}>TEXTO</h1>
    </>
  )
}

OBS: Normalmente com toggle é usado useState para guardar o valor de uma variavel.

import './App.css'
import {useState} from 'react'

export default function App() {

  const [cor, setCor] = useState("vermelho")

  const handleClick = () => {setCor(cor === "vermelho" ? "azul" : "vermelho")}

  return(
    <>
      <h1 className={cor} onClick={handleClick}>TEXTO</h1>
    </>
  )
}

OU

import './App.css'
import {useState} from 'react'

export default function App() {

  const [cor, setCor] = useState(true)

  const handleClick = () => setCor(!cor)

  return(
    <>
      <h1 className={cor ? "vermelho" : "azul"} onClick={handleClick}>TEXTO</h1>
    </>
  )
}

----------------------------------------------------------------------------&&&
EVENTOS NO REACT:
VIDEO: https://www.youtube.com/embed/UVJfll2KefM?autoplay=1

Dentro do arquivo app.js:

import React,{useState} from 'react'; 
import LedVerde from './componentes/led_verde.png'
import LedVermelho from './componentes/led_vermelho.png'

export default function App() {
  const [ligado, setLigado] = useState(false)                   *a variavel ligado possui o valor false

  return(
    <>
      <img src = { ligado ? LedVerde : LedVermelho } />
      <button onClick = { () => setLigado(!ligado) }>            *criou-se um toogle colocando o inverso de ligado (no caso true)
        LIGAR / DESLIGAR
      </button>
    </>
  )
}

---------------------

import React,{useState} from 'react'; 

export default function App() {
  const [name, setName] = useState(true)                

  return(
    <>
      <p>Nome: {name ? 'Renato' : 'Thiago'}</p>           *Cria-se uma condição de true e false
      <button onClick = { () => setName(!name) }>         *Cria-se um toggle invertendo o valor ao clicar no botão
        MUDAR NOME
      </button>
    </>
  )
}

Ao clicar no botão, ele alterará o nome (se for true será Renato e se for falso será Thiago)

-Caso queira que o texto do botão mude também:

import React,{useState} from 'react'; 

export default function App() {
  const [name, setName] = useState(true)                

  return(
    <>
      <p>Nome: {name ? 'Renato' : 'Thiago'}</p>           
      <button onClick = { () => setName(!name) }>         
        { name ? 'Mudar para Thiago' : 'Mudar para Renato' }           *Crie uma condição de true e false
      </button>
    </>
  )
}

----------------------

Importando componentes:

-Dentro de um arquivo chamado corpo.js:

import React,{useState} from 'react'; 

export default function Texto() {   
  const [txt, setTexto] = useState('TEXTO DE EXEMPLO')    

  return(
    <>
      <p>
        {txt}
      </p>           
    </>
  )
}

-Dentro do arquivo app.js:

import React from 'react'; 
import Texto from './componentes/corpo.js'

export default function App() {              
  return(
    <>
      <Texto/>
    </>
  )
}

>>> TEXTO DE EXEMPLO


----------

-Dentro de um arquivo chamado nomes.js:

import React,{useState} from 'react'; 

export default function Nomes() {   
  const [name, setName] = useState(true)    

  return(
    <>
      <p>Nome: {name ? 'Renato' : 'Thiago'}</p>           
      <button onClick = { () => setName(!name) }>         
        MUDAR NOME
      </button>
    </>
  )
}


-Dentro do arquivo app.js:

import React from 'react'; 
import Nomes from './componentes/nomes.js'

export default function App() {              
  return(
    <>
      <Nomes/>
    </>
  )
}

------------------

-Usando props e state:

-Dentro de um arquivo chamado nomes.js:

import React from 'react'; 

export default function Nomes(props) {   
  return(
    <>
      <p>Nome: {props.name1}</p>         
    </>
  )
}

-Dentro do arquivo app.js:

import React, {useState} from 'react';  
import Nomes from './componentes/nomes.js'

export default function App() {   
  const [name2, setName2] = useState('CARLOS')    

  return(
    <>
      <Nomes
        name1 = {name2}
      />
    </>
  )
}

--------------

-Dentro de um arquivo chamado nomes.js:

import React from 'react'; 

export default function Nomes(props) {   

  return(
    <>
        <p>Nome: {props.name}</p>      
        <p>Sobrenome: {props.lastname}</p>   
    </>
  )
}

-Dentro do arquivo app.js:

import React, {useState} from 'react';  
import Nomes from './componentes/nomes.js'

export default function App() {   
  const [nome, setName] = useState('CARLOS')  
  const [sobrenome, setLastName] = useState('ALBERTO') 

  return(
    <>
      <Nomes
        name = {nome}
        lastname = {sobrenome}
      />
    </>
  )
}


----

-Dentro de um arquivo chamado nomes.js:

import React from 'react'; 

export default function Nomes(props) {   

  return(
    <>
      <p>Nome: {props.name1 ? 'Renato' : 'Thiago'}</p>           
      <button onClick = { () => props.setName1(!props.name1) }>         
        MUDAR NOME
      </button>
    </>
  )
}


-Dentro do arquivo app.js:

import React, {useState} from 'react'; 
import Nomes from './componentes/nomes.js'

export default function App() {   
  const [name2, setName2] = useState(true)    

  return(
    <>
      <Nomes
        name1 = {name2}
        setName1 = {setName2}
      />
    </>
  )
}

--------------------

PARA CANCELAR UM EVENTO NO REACT:

import React from 'react';  

export default function App() {   
  const Cancelar = (obj) => {
    return obj.preventDefault()                           *No JS normal era só colocar: return false
  }

  return(
    <>
      <a
        href = 'https://google.com'
        target = '_blank'
        onClick = { (e) => Cancelar(e) }                  *evento chama a função Cancelar com o preventDefault
      >
        LINK PARA ABRIR O GOOGLE EM OUTRA ABA
      </a>
    </>
  )
}

Desta forma, ao clicar no link o evento não será iniciado.


////////////////////////////////////////&&&

USANDO LISTAS E A FUNÇÃO MAP:
VIDEO: https://www.youtube.com/embed/6iJABCS34Jk

import React from 'react'

export default function App() {

	const lista = ['item1' , 'item2' , 'item3' ,'item4' ,'item5' ]
	
	const imprimir = lista.map ( (x) => 
		<p>{x}</p>
	)
	
	return (
		<>
			{imprimir}
		</>
	);
}


Caso queira imprimir um item especifico:
...
	return (
		<>
			{imprimir[2]}
		</>
	);
...

-----


OBS: É possível colocar cada item em uma lista <ul><li>:

import React from 'react'

export default function App() {

	const lista = ['item1' , 'item2' , 'item3' ,'item4' ,'item5' ]
	
	const imprimir = lista.map ( (x) => 
		<li>{x}</li>
	)
	
	return (
		<>
			<ul>{imprimir}</ul>
		</>
	);
}

----

Para utilizar o indice (posição) dos itens da lista:

import React from 'react'

export default function App() {

	const lista = ['item1' , 'item2' , 'item3' ,'item4' ,'item5' ]
	
	const imprimir = lista.map ( (x , indice) => 
		<p key={indice}>{x} tem a posição {indice}</p>
	)
	
	return (
		<>
			{imprimir}
		</>
	);
}

--------

Para utilizar listas em JSON:

import React from 'react'

export default function App() {

	const lista = [                                    /* lista json */
	{nome: "Renato", sexo: "Masculino", idade: "31"},
	{nome: "Maria", sexo: "Feminino", idade: "24"},
	{nome: "Valter", sexo: "Masculino", idade: "36"}
	];
	
	const imprimir = lista.map ( (x) => 
		<p>{x.nome}</p>
	)
	
	return (
		<>
			{imprimir}
		</>
	);
}

>>> Renato
>>> Maria
>>> Valter

//////////////////////////////////////////////////&&&
LISTAS / ARRAYS COM MAP (MODO ATUALIZADO)

export default function App() {

  const lista = ['item1' , 'item2' , 'item3' ,'item4' ,'item5' ]

  return (
    <>
      {lista.map((item, indice) => (
        <div key={indice}>
          <p>{item}</p>
        </div>
      ))}
    </>
  );  
}

------------------ %%%

export default function App() {

  const frutas = ['banana' , 'maçã' , 'uva' ,'morango' ,'acerola' ]

  return (
    <>
      {frutas.map((fruta, indice) => (
        <ul key={indice}>
          <li style={{listStyle: "none"}}>{fruta}</li>
        </ul>
      ))}
    </>
  );  
}

---------

export default function App() {

  const frutas = ['banana' , 'maçã' , 'uva' ,'morango' ,'acerola' ]

  const listafrutas = frutas.map((fruta, indice) => (
      <div key={indice}>  
        <li style={{listStyle: "none"}}>{fruta}</li>
      </div>
    )
  )

  return (
    <>
      {listafrutas}
    </>
  );  
}

------------------ %%%

export default function App() {

	const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
	];
	
	return (
		<>
			{pessoas.map(pessoa => (
        <div key={pessoa.id}>                     //É obrigatório declarar uma key
          <p>{pessoa.nome}</p>
        </div>
      ))}
		</>
	);
}

------------------- ###
ORDENAR ARRAYS

export default function App() {

  const frutas = ['banana' , 'maçã' , 'uva' ,'morango' ,'acerola' ]

  frutas.sort()         //Colocar em ordem alfabética. NÃO FUNCIONA COM NÚMEROS!

  return (
    <>
      {frutas.map((fruta, indice) => (
        <div key={indice}>
          <h1>{fruta}</h1>
        </div>
      ))}
    </>
  );  
}

------------------ %%%

export default function App() {

	const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Ana", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Mario", sexo: "Masculino", idade: "36"}
	];

  pessoas.sort((a, b) => a.nome.localeCompare(b.nome))        //Strings em ordem crescente
  // pessoas.sort((a, b) => b.nome.localeCompare(a.nome))     //Strings em ordem decrescente
	
	return (
		<>
			{pessoas.map(pessoa => (
        <div key={pessoa.id}>                     
          <p>{pessoa.nome}</p>
        </div>
      ))}
		</>
	);
}

---------

export default function App() {

	const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Ana", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Mario", sexo: "Masculino", idade: "36"}
	];

  pessoas.sort((a, b) => a.idade - b.idade)        //Numeros em ordem crescente
  // pessoas.sort((a, b) => b.idade - a.idade)     //Numeros em ordem decrescente
	
	return (
		<>
			{pessoas.map(pessoa => (
        <div key={pessoa.id}>                     
          <p>{pessoa.nome}: {pessoa.idade} anos</p>
        </div>
      ))}
		</>
	);
}

------------------ ###
FILTRAR ARRAYS

export default function App() {

  const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  const pessoasFiltradas = pessoas.filter(pessoa => pessoa.sexo === "Feminino");

  return (
    <>
      {pessoasFiltradas.map(pessoa => (
        <div key={pessoa.id}>                     
          <p>{pessoa.nome}</p>
        </div>
      ))}
    </>
  );
}

-------

export default function App() {

  const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  const pessoasFiltradas = pessoas.filter(pessoa => pessoa.idade < 30 );

  return (
    <>
      {pessoasFiltradas.map(pessoa => (
        <div key={pessoa.id}>                     
          <p>{pessoa.nome}</p>
        </div>
      ))}
    </>
  );
}

-------------------- ###
ARRAYS COM PROPS

-Arquivo Pessoas.jsx:

export default function Pessoas(props) {

  const ListaPessoas = props.pessoas

  return (
    <>
      {ListaPessoas.map(pessoa => (
        <div key={pessoa.id}>                     
          <p>Nome: {pessoa.nome}</p>
          <p>Setor: {props.setor}</p>
        </div>
      ))}
    </>
  );
}

¨¨¨¨
-Arquivo App.jsx:

import Pessoas from './components/Pessoas'

export default function App() {

  const funcionariosMarketing = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  const funcionariosRH = [                                    
    {id: 4, nome: "José", sexo: "Masculino", idade: "30"},
    {id: 5, nome: "Carla", sexo: "Feminino", idade: "29"},
    {id: 6, nome: "Mario", sexo: "Masculino", idade: "22"}
  ];

  return (
    <>
      <Pessoas pessoas={funcionariosMarketing} setor="Marketing" />
      <Pessoas pessoas={funcionariosRH} setor="RH" />
    </>
  );
}

////////////////////////////////////////////////////////// &&& 
ATUALIZANDO VALORES DE UM ARRAY
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

-Usando onChange:

import {useState} from 'react'

export default function App(){
  const [frutas, setFrutas] = useState(["Banana", "Morango", "Laranja"])
  const [novaFruta, setNovaFruta] = useState("");

  const addFruta = () => {
    if (novaFruta.trim() !== "") {
      setFrutas([...frutas, novaFruta]);
      setNovaFruta("");
    }
  };

  const removeFruta = (indice) => {
    setFrutas(frutas.filter(( _ , index) => index !== indice));                 //elemento não está sendo usado
    //OU setFrutas(frutas.filter(( elemento , index) => index !== indice));
  };

  return(
    <>
      <ul >
        {frutas.map((fruta, indice) => (
          <li key={indice}>
            {fruta}
            <button onClick={() => removeFruta(indice)}>Remover</button>
          </li>
        ))}
      </ul>

      <input type="text" value={novaFruta} onChange={e => setNovaFruta(e.target.value)} />
      <button onClick={addFruta}>Adicionar fruta</button>
    </>
  )
}


-------------
Usando ID ao invés de onChange:

import {useState} from 'react'

export default function App(){
  const [frutas, setFrutas] = useState(["Banana", "Morango", "Laranja"])

  const addFruta = () => {
    const novaFruta = document.getElementById("frutaInput").value
    if (novaFruta.trim() !== "") {
      setFrutas(prev => [...prev, novaFruta])                           //OU setFrutas([...frutas, novaFruta])
    }
    document.getElementById("frutaInput").value = ""
  }

  const removeFruta = (indice) => {
    setFrutas(frutas.filter((elemento, index) => index !== indice))
    //OU setFrutas(frutas.filter(( _ , index) => index !== indice))  pois elemento não está sendo usado
  }

  return(
    <>
      <ul >
        {frutas.map((fruta, indice) => (
          <li key={indice}>
            {fruta}
            <button onClick={() => removeFruta(indice)}>Remover</button>
          </li>
        ))}
      </ul>

      <input type="text" id="frutaInput" />
      <button onClick={addFruta}>Adicionar fruta</button>
    </>
  )
}

////////////////////////////////////////////////// &&&
ONCHANGE
PARA MANIPULAR E CAPTURAR ELEMENTOS DE UM FORMULÁRIO:
VIDEO: https://www.youtube.com/embed/CmdBwXsbGOs?autoplay=1

import React, {useState} from 'react'

export default function App() {

	const [nome, setNome] = useState("")        /* Se quiser pode-se ter um texto dentro das aspas */ 

	return (
		<>
			<label>Digite seu nome: </label>
			
			<input
				type= "text"
				name= "fnome"
				value= {nome}
				onChange={ (elemento) => setNome(elemento.target.value)}
			/>
			
			<p>Nome digitado: {nome}</p>
		</>
	);
}

Com isso, ao digitar o nome, automaticamente as teclas digitadas aparecerão dentro da tag <p>

----

Normalmente utiliza-se uma função extra para lidar com os eventos do onChange:

import React, {useState} from 'react'

export default function App() {

	const [nome, setNome] = useState("") 

	const handle = (elemento) => {
		setNome(elemento.target.value)
	}

	return (
		<>
			<label>Digite seu nome: </label>
			
			<input
				type= "text"
				name= "fnome"
				value= {nome}
				onChange={ (elemento) => handle(elemento) }
			/>
			
			<p>Nome digitado: {nome}</p>
		</>
	);
}

---------------

Outro exemplo:

import React, { useState } from 'react';

export default function App() {
  const [text, setText] = useState('');

  const handleChange = (event) => {
    setText(event.target.value);
  };

  return (
    <div>
      <input type="text" value={text} onChange={handleChange} />
      <p>{text}</p>
    </div>
  );
}

------------

Para pegar os valores de um seletor:

import React, {useState} from 'react'

export default function App() {

	const [nome, setNome] = useState("Renato")        

	return (
		<>
			<label>Selecione uma pessoa: </label>
			
			<select value={nome} onChange={(elemento)=> setNome(elemento.target.value)}>
				<option value="Renato">Renato</option>
				<option value="Maria">Maria</option>
				<option value="Valter">Valter</option>
				<option value="Beatriz">Beatriz</option>
			</select>
			
			<p>Pessoa selecionada: {nome}</p>
		</>
	);
}

Com isso, o nome da pessoa selecionada aparecerá automaticamente na tag <p>

/////////////////////////////////////////&&&
ONCHANGE + USESTATE
PARA MANIPULAR VARIOS OBJETOS DO FORMULÁRIO COM STATE:
VIDEO: https://www.youtube.com/embed/UUY3cYUif0Y?autoplay=1


import React, {useState} from 'react'

export default function App() {

  const [form, setForm] = useState({"nome":"" , "curso":"" , "ano":""})         /* É um JSON dentro dos parenteses */

  const handle = (e) => {
    if(e.target.getAttribute("name") == "fnome"){
      setForm({"nome":e.target.value , "curso":form.curso , "ano":form.ano})
    }
    else if(e.target.getAttribute("name") == "fcurso"){
      setForm({"nome":form.nome , "curso":e.target.value , "ano":form.ano})
    }
    else if(e.target.getAttribute("name") == "fano"){
      setForm({"nome":form.nome , "curso":form.curso , "ano":e.target.value})
    }
  }

	return (
		<>
			<label>Nome: </label>
			<input type= "text" name= "fnome" value= {form.nome} onChange={ (e) => handle(e)}/>
			<label>Curso: </label>
			<input type= "text" name= "fcurso" value= {form.curso} onChange={ (e) => handle(e)}/>
			<label>Ano: </label>
			<input type= "text" name= "fano" value= {form.ano} onChange={ (e) => handle(e)}/>			
			
			<p>Nome digitado: {form.nome}</p>
			<p>Curso digitado: {form.curso}</p>
			<p>Ano digitado: {form.ano}</p>
		</>
	);
}

----------

OBS: Poderia ter colocado as infos do JSON fora do useState ou importado de um arquivo ou url.

const infos = {
	"nome":"" , 
	"curso":"" , 
	"ano":""
}

const [form, setForm] = useState({infos})
....

--------------------------- ###

import {useState} from 'react'

export default function App(){

  const [nome, setNome] = useState("")
  const [numero, setNumero] = useState("")
  const [texto, setTexto] = useState("")
  const [select, setSelect] = useState("")
  const [radio, setRadio] = useState("")

  const handleChangeNome = (e) => {
    setNome(e.target.value)
  }

  const handleChangeNumero = (e) => {
    setNumero(e.target.value)
  }

  const handleChangeTexto = (e) => {
    setTexto(e.target.value)
  }

  const handleChangeSelect = (e) => {
    setSelect(e.target.value)
  }

  const handleChangeRadio = (e) => {
    setRadio(e.target.value)
  }

  return(
    <>
      <input value={nome} onChange={handleChangeNome} />
      <p>Nome: {nome}</p>

      <input value={numero} onChange={handleChangeNumero} type="number" />
      <p>Numero: {numero}</p>

      <textarea value={texto} onChange={handleChangeTexto} />
      <p>Texto: {texto}</p>

      <select value={select} onChange={handleChangeSelect}>
        <option value="">Selecione uma opção</option>
        <option value="Opção 1">Opção 1</option>
        <option value="Opção 2">Opção 2</option>
        <option value="Opção 3">Opção 3</option>
      </select>
      <p>Opção escolhida: {select}</p>

      <label>
        <input 
          type="radio"
          value="Opção 1"
          checked={radio === "Opção 1"}
          onChange={handleChangeRadio}
        />
          Opção 1
      </label>
      <label>
        <input 
          type="radio"
          value="Opção 2"
          checked={radio === "Opção 2"}
          onChange={handleChangeRadio}
        />
          Opção 2
      </label>
      <label>
        <input 
          type="radio"
          value="Opção 3"
          checked={radio === "Opção 3"}
          onChange={handleChangeRadio}
        />
          Opção 3
      </label>
      <p>Opção escolhida: {radio}</p>
    </>
  )
}

------
Outra forma de fazer o Radio:

...
  {["Opção 1", "Opção 2", "Opção 3"].map((opcao) => (
    <label key={opcao}>
      <input
        type="radio"
        value={opcao}
        checked={radio === opcao}
        onChange={handleChangeRadio}
      />
      {opcao}
    </label>
  ))}
  <p>Opção escolhida: {radio}</p>
...

----------------------- ###
COLOR PICKER
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

import {useState} from 'react'

export default function App() {

  const [color, setColor] = useState("#FFFFFF")

  const handleChangeColor = (e) => {
    setColor(e.target.value)
  }

  return (
    <>
      <div style={{backgroundColor: color}}>
        <p>Cor selecionada: {color}</p>
      </div>
      <input type="color" value={color} onChange={handleChangeColor} />
    </>
  );
}

//////////////////////////////////////////////////&&&
UPDATER FUNCTION = PREV
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

import {useState} from 'react'

export default function App(){
  const [numero, setNumero] = useState(0)

  const maisNumero = () => {
    setNumero(numero + 1)
    setNumero(numero + 1)
  }

  return(
    <>
      <p>Numero: {numero}</p>
      
      <button onClick={maisNumero}>Aumentar</button>
    </>
  )
}

-Ao clicar no botão, apenas será adicionado 1 ao número e não 2 vezes.
Para resolver isso, é necessário usar um updater function (PREV)

------

import {useState} from 'react'

export default function App(){
  const [numero, setNumero] = useState(0)

  const addNumero = () => {
    setNumero(prevNumero => prevNumero + 1)                  //OU  setNumero(n => n + 1)
    setNumero(prevNumero => prevNumero + 1)
  }

  return(
    <>
      <p>Numero: {numero}</p>
      
      <button onClick={addNumero}>Aumentar</button>
    </>
  )
}

//////////////////////////////////////////////////&&&
ATUALIZANDO VALORES DE OBJETOS
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA


import {useState} from 'react'

export default function App(){

  const [pessoas, setPessoas] = useState({nome: "", idade: "", sexo: "", status: false})

  const handleNomeChange = (e) => {
    setPessoas(prev => ({...prev, nome: e.target.value}) )             //OU setPessoas({...pessoas, nome: e.target.value})
  }

  const handleIdadeChange = (e) => {
    setPessoas(prev => ({...prev, idade: e.target.value}) )            //OU setPessoas({...pessoas, idade: e.target.value})
  }

  const handleSexoChange = (e) => {
    setPessoas(prev => ({...prev, sexo: e.target.value}) )            //OU setPessoas({...pessoas, sexo: e.target.value})
  }

  const handleChangeStatus = (e) => {
    setPessoas(prev => ({...prev, status: e.target.value === "true"}) )     
    //OU setPessoas({...pessoas, status: e.target.value === "true"})
  }

  return(
    <>
      <p>Nome: {pessoas.nome}</p>
      <p>Idade: {pessoas.idade} anos</p>
      <p>Sexo: {pessoas.sexo}</p>
      <p>Casado(a): {pessoas.status ? "Sim" : "Não"}</p>

      <hr />

      <div>
        <input 
          type="text" 
          value={pessoas.nome}
          onChange={handleNomeChange}
          placeholder= "Digite seu nome"
        />
      </div>

      <div>
        <input 
          type="number" 
          value={pessoas.idade} 
          onChange={handleIdadeChange}
          placeholder= "Digite sua idade"
        />
      </div>

      <select value={pessoas.sexo} onChange={handleSexoChange}>
        <option value="">Selecione uma opção</option>
        <option value="Masculino">Masculino</option>
        <option value="Feminino">Feminino</option>
      </select>

      <div>
        <label>
          <input type="radio" value={true} checked={pessoas.status === true} onChange={handleChangeStatus} />
            Casado(a)
        </label>
        <label>
          <input type="radio" value={false} checked={pessoas.status === false} onChange={handleChangeStatus} />
            Solteiro(a)
        </label>
      </div>

    </>
  )
}

---------
Outra forma de fazer atualizar o valor de um radio com objetos sem usar booleans:

import {useState} from 'react'

export default function App(){

  const [pessoas, setPessoas] = useState({nome: "", idade: "", sexo: "", status: ""})

  const handleChangeStatus = (e) => {
    setPessoas(prev => ({...prev, status: e.target.value}) ) 
    //OU setPessoas({...pessoas, status: e.target.value})
  }

  return(
    <>
      <p>Status: {pessoas.status}</p>

      <div>
        <label>
          <input type="radio" value="Casado(a)" checked={pessoas.status === "Casado(a)"} onChange={handleChangeStatus} />
            Casado(a)
        </label>
        <label>
          <input type="radio" value="Solteiro(a)" checked={pessoas.status === "Solteiro(a)"} onChange={handleChangeStatus} />
            Solteiro(a)
        </label>
      </div>

    </>
  )
}

------------###
OBS: Radio sem objetos:

import {useState} from 'react'

export default function App(){

  const [status, setStatus] = useState(false)

  const handleChangeStatus = (e) => {
    setStatus(e.target.value === "true")
  }

  return(
    <>
      <p>Casado(a): {status ? "Sim" : "Não"}</p>

      <div>
        <label>
          <input
            type="radio"
            value={true}                           //OU value="true"
            checked={status === true}
            onChange={handleChangeStatus}
          />
          Sim
        </label>
        <label>
          <input
            type="radio"
            value={false}                           //OU value="false"
            checked={status === false}
            onChange={handleChangeStatus}
          />
          Não
        </label>
      </div>

    </>
  )
}

------
OU sem usar booleans:


import {useState} from 'react'

export default function App(){

  const [status, setStatus] = useState("")

  const handleChangeStatus = (e) => {
    setStatus(e.target.value)
  }

  return(
    <>
      <p>Status: {status}</p>

      <div>
        <label>
          <input
            type="radio"
            value="Casado(a)"                           
            checked={status === "Casado(a)"}
            onChange={handleChangeStatus}
          />
          Casado(a)
        </label>
        <label>
          <input
            type="radio"
            value="Solteiro(a)"                          
            checked={status === "Solteiro(a)"}
            onChange={handleChangeStatus}
          />
          Solteiro(a)
        </label>
      </div>

    </>
  )
}

------------------------ ###
Usando uma única função para mudar os valores dos objetos:  (Não funciona com Radio)

import {useState} from 'react'

export default function App(){
  const [pessoas, setPessoas] = useState({nome: "", idade: ""})

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPessoas(prev => ({...prev, [name]: value}) );
  }

  return(
    <>
      <p>Nome: {pessoas.nome}</p>
      <p>Idade: {pessoas.idade} anos</p>

      <hr />

      <input type="text" name="nome" value={pessoas.nome} onChange={handleInputChange} />

      <input type="number" name="idade" value={pessoas.idade} onChange={handleInputChange} />

    </>
  )
}

//////////////////////////////////////////////////&&& 
ATUALIZANDO OS VALORES DE UM ARRAY DE OBJETOS
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

import {useState} from 'react'

export default function App(){

  const [carros, setCarros] = useState([])
  const [nomeCarro, setNomeCarro] = useState("")
  const [anoCarro, setAnoCarro] = useState(new Date().getFullYear())
  const [marcaCarro, setMarcaCarro] = useState("")

  const addCarro = () => {
    const novoCarro = {nome: nomeCarro, ano: anoCarro, marca: marcaCarro}

    setCarros(prev => [...prev, novoCarro])

    setNomeCarro("")
    setAnoCarro(new Date().getFullYear())
    setMarcaCarro("")
  }

  const removeCarro = (index) => {
    setCarros(prev => prev.filter(( _ , i ) => i !== index))
  }

  const changeNome = (e) => {
    setNomeCarro(e.target.value)
  }

  const changeAno = (e) => {
    setAnoCarro(e.target.value)
  }

  const changeMarca = (e) => {
    setMarcaCarro(e.target.value)
  }

  return(
    <>
      <ul>
        {carros.map((carro, index) => (
          <li key={index}>
            <p>{carro.nome} - {carro.ano} - {carro.marca}</p>
            <button onClick={() => removeCarro(index)}>Remover</button>
            <hr />
          </li>
        ))}
      </ul>

      <input type="text" value={nomeCarro} onChange={changeNome} placeholder="Digite o nome" />
      <input type="number" value={anoCarro} onChange={changeAno} />
      <input type="text" value={marcaCarro} onChange={changeMarca} placeholder="Digite a marca" />

      <button onClick={addCarro}>Adicionar</button>
    </>
  )
}

-----------------------%%%
OUTRAS FORMAS: (Mais complicadas)

import {useState} from 'react'

export default function App(){

  const [carros, setCarros] = useState([])
  const [novoCarro, setNovoCarro] = useState(
    {
      nome: "", 
      ano: new Date().getFullYear(),
      marca: ""
  })

  const addCarro = () => {
    if(novoCarro.nome !== "" && novoCarro.ano !== "" && novoCarro.marca !== ""){
      setCarros(prev => [...prev, novoCarro])
      setNovoCarro({
        nome: "", 
        ano: new Date().getFullYear(),
        marca: ""
    })
    }
  }

  const removeCarro = (index) => {
    setCarros(prev => prev.filter(( _ , i ) => i !== index))
  }

  const changeNome = (e) => {
    setNovoCarro(prev => ({...prev, nome: e.target.value}))
  }

  const changeAno = (e) => {
    setNovoCarro(prev => ({...prev, ano: e.target.value}))
  }

  const changeMarca = (e) => {
    setNovoCarro(prev => ({...prev, marca: e.target.value}))
  }

  return(
    <>
      <ul>
        {carros.map((carro, index) => (
          <li key={index}>
            <p>{carro.nome} - {carro.ano} - {carro.marca}</p>
            <button onClick={() => removeCarro(index)}>Remover</button>
            <hr />
          </li>
        ))}
      </ul>

      <input type="text" value={novoCarro.nome} onChange={changeNome} placeholder="Digite o nome" />
      <input type="number" value={novoCarro.ano} onChange={changeAno} />
      <input type="text" value={novoCarro.marca} onChange={changeMarca} placeholder="Digite a marca" />

      <button onClick={addCarro}>Adicionar</button>
    </>
  )
}

----------------

import {useState} from 'react'

export default function App(){

  const [carros, setCarros] = useState([])
  const [novoCarro, setNovoCarro] = useState({nome: "", ano: "", marca: ""})

  const handleChange = (e) => {
    setNovoCarro({...novoCarro, [e.target.placeholder.split(" ")[2].toLowerCase()]: e.target.value})
  }

  const addCarro = () => {
    if(novoCarro.nome !== "" && novoCarro.ano !== "" && novoCarro.marca !== "") {
      setCarros(prev => [...prev, novoCarro])
      setNovoCarro({nome: "", ano: "", marca: ""})
    }
  }

  const removeCarro = (index) => {
    setCarros(prev => prev.filter(( _ , i ) => i !== index))
  }

  return(
    <>
      <ul>
        {carros.map((carro, index) => (
          <li key={index}>
            <p>{carro.nome} - {carro.ano} - {carro.marca}</p>
            <button onClick={() => removeCarro(index)}>Remover</button>
            <hr />
          </li>
        ))}
      </ul>

      <input type="text" value={novoCarro.nome} onChange={handleChange} placeholder="Digite o nome" />
      <input type="number" value={novoCarro.ano} onChange={handleChange} placeholder="Digite o ano" />
      <input type="text" value={novoCarro.marca} onChange={handleChange} placeholder="Digite a marca" />

      <button onClick={addCarro}>Adicionar</button>
    </>
  )
}

------------------ ###
MELHOR FORMA: *** (CRUD)

import {useState} from 'react'

export default function App(){

  const [carros, setCarros] = useState([])
  const [novoCarro, setNovoCarro] = useState({nome: '', ano: '', marca: ''})

  const handleChange = (e) => {
    setNovoCarro(prev => ({...prev, [e.target.name]: e.target.value }));
  }  

  const addCarro = () => {
    if (novoCarro.nome && novoCarro.ano && novoCarro.marca) {
      setCarros(prev => [...prev, { ...novoCarro, id: Date.now() }]);
      setNovoCarro({nome: '', ano: '', marca: ''});
    }
  }

  const removeCarro = (id) => {
    setCarros(prev => prev.filter((carro) => carro.id !== id));
  }

  return(
    <>
      <ul>
        {carros.map((carro) => (
          <li key={carro.id}>
            <p>{carro.nome} - {carro.ano} - {carro.marca}</p>
            <button onClick={() => removeCarro(carro.id)}>Remover</button>
            <hr />
          </li>
        ))}
      </ul>

      <input type="text" name="nome" value={novoCarro.nome} onChange={handleChange} placeholder="Digite o nome" />
      <input type="number" name="ano" value={novoCarro.ano} onChange={handleChange} placeholder="Digite o ano" />
      <input type="text" name="marca" value={novoCarro.marca} onChange={handleChange} placeholder="Digite a marca" />

      <button onClick={addCarro}>Adicionar</button>
    </>
  )
}

------
Criando ids com número seguinte ao id do último item criado:

  const addCarro = () => {
    if (novoCarro.nome && novoCarro.ano && novoCarro.marca) {
      setCarros(prev => [...prev, { ...novoCarro, id: prev.length > 0 ? prev[prev.length - 1].id + 1 : 1 }]);
      setNovoCarro({nome: '', ano: '', marca: ''});
    }
  }

------
Versão alternativa de handleChange e AddCarro:

import {useState} from 'react'

export default function App(){

  const [carros, setCarros] = useState([])
  const [novoCarro, setNovoCarro] = useState({nome: "", ano: "", marca: ""})

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNovoCarro(prev => ({...prev, [name]: value }));
  }

  const addCarro = () => {
    if(novoCarro.nome.trim() !== "" || novoCarro.ano.trim() !== "" || novoCarro.marca.trim() !== ""){                           
      setCarros(prev => [...prev, { id: Date.now(), nome: novoCarro.nome, ano: novoCarro.ano, marca: novoCarro.marca}])   
      setNovoCarro({nome: "", ano: "", marca: ""})
    }
  }

  const removeCarro = (index) => {
    setCarros(prev => prev.filter((carro) => carro.id !== index))
  }

  return(
    <>
      <ul>
        {carros.map((carro) => (
          <li key={carro.id}>
            <p>{carro.nome} - {carro.ano} - {carro.marca}</p>
            <button onClick={() => removeCarro(carro.id)}>Remover</button>
            <hr />
          </li>
        ))}
      </ul>

      <input type="text" name="nome" value={novoCarro.nome} onChange={handleChange} placeholder="Digite o nome" />
      <input type="number" name="ano" value={novoCarro.ano} onChange={handleChange} placeholder="Digite o ano" />
      <input type="text" name="marca" value={novoCarro.marca} onChange={handleChange} placeholder="Digite a marca" />

      <button onClick={addCarro}>Adicionar</button>
    </>
  )
}


//////////////////////////////////////////////////&&&

ELEVAÇÃO DE STATE
VIDEO: https://www.youtube.com/embed/Mgpj-YC7a7Y

Começando com um exemplo simples:

-Dentro do arquivo nota.js:

import React from 'react'

export default function Nota(props) {
  return (
    <div>
      <legend>ID da nota: {props.id}</legend>
      <input type="text" value={props.nota} onChange={(e) => props.setNota(e.target.value)} />
    </div>
  )
}

-Dentro do arquivo App.js:

import React,{useState} from 'react'
import Nota from './componentes/nota.jsx'

export default function App() {

  const [notas, setNotas] = useState("0")
  return (
    <>
      <Nota id={1} nota={notas} setNota={setNotas}/>
    </>
  )
}

---------------------------

Somando os resultados adicionando um novo componente:

-Dentro do arquivo nota.js:

import React from 'react'

export default function Nota(props) {
  return (
    <div>
      <legend>ID da nota: {props.id}</legend>
      <input type="text" value={props.nota} onChange={(e) => props.setNota(e.target.value)} />
    </div>
  )
}

-Dentro do arquivo resultado.js:

import React from 'react'

export default function Resultado(props) {
  return (

    <div>
      <p>Soma das notas: {props.somaNotas}</p>
      <p>{props.somaNotas >= 60 ? "Aprovado" : "Reprovado"}</p>
    </div> 
  )
}


-Dentro do arquivo App.js:

import React,{useState} from 'react'
import Nota from './componentes/nota.js'
import Resultado from './componentes/resultado.js'

export default function App() {

  const [nota1, setNotas1] = useState("0")
  const [nota2, setNotas2] = useState("0")
  
  return (
    <>
      <Nota id={1} nota={nota1} setNota={setNotas1}/>
      <Nota id={2} nota={nota2} setNota={setNotas2}/>

      <Resultado somaNotas={parseFloat(nota1) + parseFloat(nota2)}/>
    </>
  )
}



---------------------------
Usando um handler:

-Dentro do arquivo App.js:

import React,{useState} from 'react'
import Nota from './componentes/nota.jsx'
import Resultado from './componentes/resultado.jsx'

export default function App() {

  const [nota1, setNotas1] = useState("0")
  const [nota2, setNotas2] = useState("0")

  function handle(){
    return parseFloat(nota1) + parseFloat(nota2)
  }
  
  return (
    <>
      <Nota id={1} nota={nota1} setNota={setNotas1}/>
      <Nota id={2} nota={nota2} setNota={setNotas2}/>

      <Resultado somaNotas={handle()}/>
    </>
  )
}


----------------------------
Usando apenas 1 State:

-Dentro do arquivo nota.js:

import React from 'react'

export default function Nota(props) {
  return (
    <div>
      <legend>ID da nota: {props.id}</legend>
      <input type="text" name={props.nome} value={props.nota} onChange={(e) => props.setNota(e)} />
    </div>
  )
}

OBS: O target.value foi para o arquivo App.js


-Dentro do arquivo resultado.js:

import React from 'react'

export default function Resultado(props) {
  return (

    <div>
      <p>Soma das notas: {props.somaNotas}</p>
      <p>{props.somaNotas >= 60 ? "Aprovado" : "Reprovado"}</p>
    </div> 
  )
}


-Dentro do arquivo App.js:

import React,{useState} from 'react'
import Nota from './componentes/nota.jsx'
import Resultado from './componentes/resultado.jsx'

export default function App() {

  const [notas, setNotas] = useState({"nota1":"0", "nota2":"0"})

  function handle(e){
    if (e.target.name == "n1"){                                   /* OU if(e.target.getAttribute("name") == n1) */
      setNotas({"nota1":e.target.value, "nota2":notas.nota2})
    }
    else if (e.target.name == "n2"){                              /* OU if(e.target.getAttribute("name") == n2) */
      setNotas({"nota1":notas.nota1, "nota2":e.target.value})
    }
  }

  return (
    <>
      <Nota id={1} nome={"n1"} nota={notas.nota1} setNota={handle}/>
      <Nota id={2} nome={"n2"} nota={notas.nota2} setNota={handle}/>

      <Resultado 
        somaNotas={parseFloat(notas.nota1) + parseFloat(notas.nota2)}
      />

    </>
  )
}

OBS: Dava para utilizar o id criado no arquivo nota.js:

-Dentro do arquivo nota.js:

import React from 'react'

export default function Nota(props) {
  return (
    <div>
      <legend>ID da nota: {props.id}</legend>
      <input type="text" id= {props.id} value={props.nota} onChange={(e) => props.setNota(e)} />
    </div>
  )
}

-Dentro do arquivo App.js:

import React,{useState} from 'react'
import Nota from './componentes/nota.jsx'
import Resultado from './componentes/resultado.jsx'

export default function App() {

  const [notas, setNotas] = useState({"nota1":"0", "nota2":"0"})

  function handle(e){
    if (e.target.id == "1"){                               
      setNotas({"nota1":e.target.value, "nota2":notas.nota2})
    }
    else if (e.target.id == "2"){                          
      setNotas({"nota1":notas.nota1, "nota2":e.target.value})
    }
  }

  return (
    <>
      <Nota id={1} nome={"n1"} nota={notas.nota1} setNota={handle}/>
      <Nota id={2} nome={"n2"} nota={notas.nota2} setNota={handle}/>

      <Resultado 
        somaNotas={parseFloat(notas.nota1) + parseFloat(notas.nota2)}
      />

    </>
  )
}

//////////////////////////////////////////////////////////&&&

CONTENÇÃO (para imprimir filhos)
VIDEO: https://www.youtube.com/embed/-jKFmAKDJKc?autoplay=1


-Dentro do arquivo texto.js:

import React from 'react'

export default function Texto(props) {
  return (
    <>
      {props.children}
    </>
  )
}


-Dentro do arquivo App.js:

import React from 'react'
import Texto from './componentes/texto.js'

export default function App() {
  return (
    <Texto>
      <p>Texto no indice 0</p>
      <p>Texto no indice 1</p>
      <p>Texto no indice 2</p>
    </Texto>
  )
}

-Irá imprimir todos os filhos <p> dentro de <Texto>

------------------

-Dentro do arquivo texto.js:

import React from 'react'

export default function Texto(props) {
  return (
    <>
      {props.children[2]}
    </>
  )
}


-Dentro do arquivo App.js:

import React from 'react'
import Texto from './componentes/Texto.js'

export default function App() {
  return (
    <Texto>
      <p>Texto no indice 0</p>
      <p>Texto no indice 1</p>
      <p>Texto no indice 2</p>
    </Texto>
  )
}

-Irá imprimir apenas o filho <p> dentro de <Texto> que está no indice 2


-------------------

-Dentro do arquivo canal.js:

import React from 'react'

export default function Canal() {
  return (
    <h1>
      CFB Cursos
    </h1>
  )
}


-Dentro do arquivo caixa.js:

import React from 'react'

export default function Caixa(props) {
  return (
    <>
      <p>{props.site}</p>
      {props.children[0]}
      {props.children[1]}
    </>
  )
}


-Dentro do arquivo App.js:

import React from 'react'
import Caixa from './componentes/Caixa.js'
import Canal from './componentes/Canal.js'

export default function App() {
  return (
    <>
      <Caixa site="www.cfbcursos.com.br">
        <Canal/>
        <p>Curso de React</p>
      <Caixa/>
    </>
  )
}

//////////////////////////////////////////////////////////&&&

HOOK USE EFFECT
VIDEO: https://www.youtube.com/embed/6id-PtDSnmw?autoplay=1

O use effect (assim como o use state) é um hook que é chamado assim que a pagina é montada e atualizada

import React,{useEffect,useState} from 'react'

export default function App() {

  const [contagem, setContagem] = useState(0)

  useEffect(
    () => console.log("Pagina carregada")
  )

  return (
    <>
      <p>Contagem: {contagem}</p>
      <button onClick = { () => setContagem(contagem + 1) }>CONTAR</button>
    </>
  )
}

-Cada vez que clicar no botao, será adicionado 1 ao numero

--------------------------

import React,{useEffect,useState} from 'react'

export default function App() {

  const [contagem, setContagem] = useState(0)

  useEffect(
    () => console.log("Pagina carregada"),
    document.title='Contagem dentro do useEffect:' + contagem                 //para atualizar o titulo do site na aba do navegador
  )

  return (
    <>
      <p>Contagem dentro do useState: {contagem}</p>
      <button onClick = { () => setContagem(contagem + 1) }>CONTAR</button>
    </>
  )
}

- A atualização dos elementos dentro do useState são levemente mais rapidos que os elementos do useEffect.
Portando primeiro aparecerá no corpo da página para depois aparecer na aba do navegador

//////////////////////////////////////////////////////////&&&

LOCAL STORAGE
VIDEO: https://www.youtube.com/embed/oaDdTH2JQrA?autoplay=1

import React from 'react'

export default function App() {

  localStorage.setItem("nome", "Bruno")            // Para criar uma chave e o seu Valor
  localStorage.setItem("nome", "Carlos")           // Para alterar o valor de uma chave já existente
  localStorage.getItem("nome")                     // Para pegar uma chave 
  localStorage.removeItem("nome")                  // Para remover uma chave

  return (
    <>
    </>
  )
}

- setItem("nome da chave", "valor da chave") = Para criar uma chave. Caso já exista, será adicionado um novo valor para a chave

----------------------

import React,{useState} from 'react'

export default function App() {

  const [nome, setNome] = useState()

  const armazenar = (chave, valor) = () => {
    localStorage.setItem(chave, valor)
  } 

  const consultar = (chave) = () => {
    alert(localStorage.getItem(chave))            //O valor da chave consultada será exibido em um alerta
  } 

  const apagar = (chave) = () => {
    localStorage.removeItem(chave)
  } 

  return (
    <>
      <label>Digite um nome</label> <br/>
      <input type="text" value={nome} onChange={(e) => setNome(e.target.value)}/> <br/>
      <button onClick={() => armazenar('ls_nome', nome)}>Gravar nome</button>
      <button onClick={() => consultar('ls_nome')}>Ver nome</button>
      <button onClick={() => apagar('ls_nome')}>Remover nome</button>
    </>
  )
}

OBS: Para visualizar o Local Storage, vá para o modo desenvolvedor, clique Application e depois em Local Storage

//////////////////////////////////////////////////////////&&&

CRIANDO COMPONENTES DE CLASSE
VIDEO: https://www.youtube.com/embed/pIUMIOgP8j8?autoplay=1

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

class Classe extends React.Component{                 // OU   export default class Classe extends React.Component{...}
  render(){
    return(
      <h1>Primeiro Componente de Classe</h1>
    )
  }
}

export default Classe                              


-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {

  return (
    <>
      <h1>Componentes:</h1> 
      <Classe/>
    </>
  )
}

>>> Componentes:
>>> Primeiro Componente de Classe

-----------------

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){                       // OU   constructor(){...}
    super(props)                            // OU   super()
  }         

  render(){
    return(
      <div>
        <p>Nome: {this.props.nome}</p>
        <p>Sobrenome: {this.props.sobrenome}</p>
      </div>
    )
  }
}
                            

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe 
        nome="Bruno"
        sobrenome="Campos"
      />
    </>
  )
}

>>> Nome: Bruno
>>> Sobrenome: Campos

//////////////////////////////////////////////////////////&&&

STATES EM COMPONENTES DE CLASSE
VIDEO: https://www.youtube.com/embed/10_raCSnrqc?autoplay=1

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.pessoa = "Bruno Campos"
  }         

  render(){
    return(
      <div>
        <p>Nome: {this.pessoa}</p>
      </div>
    )
  }
}
                            

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe/>
    </>
  )
}

>>> Nome: Bruno Campos

------------------

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.pessoa = {                        //formato das infos em JSON
      nome: "Bruno",
      sobrenome: "Campos",
      idade: 25,
      brasileiro: true
    }
  }         

  render(){
    return(
      <div>
        <p>Nome: {this.pessoa.nome}</p> 
        <p>Sobrenome: {this.pessoa.sobrenome}</p> 
        <p>Idade: {this.pessoa.idade} anos</p>
        <p>Brasileiro: {this.pessoa.brasileiro ? "Sim" : "Não"}</p>
      </div>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe/>
    </>
  )
}

>>> Nome: Bruno
>>> Sobrenome: Campos
>>> Idade: 25 anos
>>> Brasileiro: Sim

OBS: Porém, qualquer alteração feita no valor da variavel nome só aparecerá se atualizar a página. 
Por isso o uso do useState é importante, como vemos abaixo:

-----------------

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                          //É obrigatório usar state como nome da função para utilizar o setState                
      nome: "Bruno",
    }
  }       

  mudar(){
    this.setState(
      {nome: "Carlos"}
    )
  }  

  render(){
    return(
      <div>
        <p>Nome: {this.state.nome}</p> 
        <button onClick={() => this.mudar()}>MUDAR</button>
      </div>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe/>
    </>
  )
}

-Ao clicar no botão, o nome Bruno será alterado para Carlos

------------------

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                            
      ligado: false
    }
  }         

  mudar(){
    this.setState({ligado: !this.state.ligado})
  }

  render(){
    return(
      <div>
        <p>ESTADO: {this.state.ligado ? "LIGADO" : "DESLIGADO"}</p> 
        <button onClick={() => this.mudar()}>
          {this.state.ligado ? "DESLIGAR" : "LIGAR"}                           // toogle
        </button>
      </div>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe/>
    </>
  )
}

-Com isso, o valor será mudado automaticamente ao clicar no botão, sem precisar atualizar a página

//////////////////////////////////////////////////////////&&&

FUNÇÃO DENTRO DE STATES EM COMPONENTES DE CLASSE
VIDEO: https://www.youtube.com/embed/-QRlXs9LTOw?autoplay=1


-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                             
      ligado: false
    }
  }         

  mudar(){

    this.setState(
      (state) => (                                   //modo com arrow function
        {ligado: !state.ligado}
      )
    )

    this.setState(
      function(state) {                             //modo com função tradicional
        return {
          ligado: !state.ligado
        }
      }
    )

  }

  render(){
    return(
      <div>
        <p>ESTADO: {this.state.ligado ? "LIGADO" : "DESLIGADO"}</p> 
        <button onClick={() => this.mudar()}>MUDAR</button>
      </div>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe/>
    </>
  )
}

-----------------------

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                             
      total: 0
    }
  }         

  aumentar(){
    this.setState(
      (state, props) => (                                   
        {total: state.total + props.fator}
      )
    )
  }

  render(){
    return(
      <div>
        <p>Contagem: {this.state.total} </p> 
        <button onClick={() => this.aumentar()}>AUMENTAR</button>
      </div>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe
        fator = {1}
      />
    </>
  )
}

-Com isso, ao clicar no botão, o valor do total será somado o +1 (que é o valor do fator)

OBS: Esse método acima, com uma função dentro do setState, é bem mais seguro e recomendado que o método tradicional pois evita erros de atualização, principalmente quando envolve contas.

Método tradicional:
 
...
  aumentar(){
    this.setState(                              
        {total: this.state.total + this.props.fator}
      )
  }
...

////////////////////////////////////////////////////////////////&&&
BIND
VIDEO: https://www.youtube.com/embed/UH-s-DwcYA8?autoplay=1

O Bind é usado para o this apontar para outro elemento.

<html>
<head>
  <script>

    function pessoa(){
      console.log(this)
    }

    var infos = {
      nome : "Bruno",
      sobrenome : "Campos"
    }

    var pessoaInfo = pessoa.bind(infos)

    pessoaInfo()

  </script>
</head>
<body>
</body>
</html>

>>> {nome: 'Bruno', sobrenome: 'Campos'}

----------------

<html>
<head>
  <script>

    function pessoa(){
      console.log(this.nome)
    }

    var infos = {
      nome : "Bruno",
      sobrenome : "Campos"
    }

    var pessoaInfo = pessoa.bind(infos)

    pessoaInfo()

  </script>
</head>
<body>
</body>
</html>

>>> Bruno

--------------------

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                                        
      nome: "Bruno"
    }
    this.novonome = this.mudar.bind(this)
  }       

  mudar(){
    this.setState(                                   //Forma com função dentro do setState
      (state) => (
        {nome: "Carlos"}
      )
    )

    this.setState({nome: "Carlos"})                  //Forma sem função dentro do setState
  }  

  render(){
    return(
      <div>
        <p>{this.state.nome}</p>
        <button onClick={this.novonome}>MUDAR</button>               //ou onClick={() => this.novonome()}
      </div>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  return (
    <>
      <Classe/>
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
CICLO DE VIDA DE UM COMPONENTE
VIDEO: https://www.youtube.com/embed/aeCiOmLlr94?autoplay=1

(CRIAÇÃO)
Na montagem, quando uma instancia do componente está sendo criada no DOM, a ordem é:  
1o - constructor()
2o - static getDerivedStateFromProps()
3o - render()
4o - componentDidMount()

(ATUALIZAÇÃO)
Na atualização do componente, por alterações causadas em props ou state, quando o componente esta sendo renderizado, a ordem é:
1o - static getDerivedStateFromProps()
2o - shouldComponenteUpdate()
3o - render()
4o - getSnapshotBeforeUpdate()
5o - componentDidUpdate()

(REMOÇÃO)
Na desmontagem, quando o componente está sendo removido do DOM, a ordem é:
1o - componentWillUnmount()

(TRATAMENTO DE ERROS)
Em tratamento de erros, quando existir algum erro em algum momento no componente, a ordem é:
1o - static getDerivedStateFromError()
2o - componentDidCatch()

---------

-Exemplo criando componentes:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    console.log("Primeiro aparece o constructor")
  }       

  static getDerivedStateFromProps(){
    console.log("Em segundo vem o getDerivedStateFromProps")
  }

  componentDidMount(){
    console.log("Em quarto vem o componentDidMount")
  }

  render(){
    console.log("Em terceiro vem o render")
    return(
      <>
      </>
    )
  }
}

------------

-Exemplo com atualização:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                                        
      nome: "Bruno"
    }
  }       

  componentDidUpdate(){                      //Aparece toda vez que o componente é atualizado
    console.log("O componente mudou!")
  }

  mudar(){
    this.setState(                                
      (state) => (
        {nome: "Carlos"}
      )
    )
  }  

  render(){
    return(
      <>
        <p>Nome: {this.state.nome}</p>
        <button onClick={() => this.mudar()}>MUDAR</button>
      </>
    )
  }
}

-Ao clicar no botão, o valor do componente nome é alterado e, após a pagina ser atualizada pelo state, o componentDidUpdate é chamado.

--------- &&&

-Para remover um componente do DOM:

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default function Classe(){   
    return(
        <p>TEXTO</p>
    )
}

-Dentro de um arquivo chamado App.js:

import React, {useState} from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  const [mostrar, setMostrar] = useState(true)

  const remover = () => {
    setMostrar(false)                                            //OU setMostrar(!mostrar)
  }

  return (
    <>
      {mostrar && <Classe/>}
      <button onClick={() => remover()}>REMOVER</button>        //OU <button onClick={remover}>REMOVER</button> 
    </>
  )
}

----------

-Exemplo 1 ao remover um componente do DOM usando o componentWillUnmount():

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{         //obrigatório usar o React.Component junto com o render

  componentWillUnmount(){                                    //Aparece toda vez que o componente é removido do DOM
    console.log("O componente foi removido!")
  }

  render(){                                       
    return(
      <>
        <p>TEXTO</p>
      </>
    )
  }
}


-Dentro de um arquivo chamado App.js:

import React, {useState} from 'react'
import Classe from './componentes/Classe.js'

export default function App() {
  const [mostrar, setMostrar] = useState(true)

  const remover = () => {
    setMostrar(false)                                          //Ou setMostrar(!mostrar)
  }

  return (
    <>
      {mostrar && <Classe/>}
      <button onClick={remover}>REMOVER</button>              //Ou <button onClick={() => remover()}>REMOVER</button>
    </>
  )
}

-----------

-Exemplo 2 ao remover um componente do DOM  usando o componentWillUnmount():

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state = {                                        
      nome: "Bruno"
    }
  }       

  componentWillUnmount(){                      
    console.log("O componente foi removido!")
  }

  render(){
    return(
      <>
        <p>Nome: {this.state.nome}</p>
      </>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React,{useState} from 'react'
import Classe from './componentes/Classe.js'

export default function App() {

  const [nome, setNome] = useState(true)

  const toggle = () => {
    setNome(!nome)
  } 

  return (
    <>
      {nome ? <Classe/> : ""}
      <button onClick={() => toggle()}>MOSTRAR/REMOVER</button>
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
ESTRUTURA BÁSICA DE UM COMPONENTE DE CLASSE  (RESUMÃO)
VIDEO: https://www.youtube.com/embed/zRttpd14ci4?autoplay=1

-Dentro de um arquivo chamado Classe.js:

import React from 'react'

export default class Classe extends React.Component{     

  constructor(props){
    super(props)
    this.state={
      chavestate1 : "valor1",
      chavestate2 : 1000,
      chavestate3 : true,
      chavestateprops1 : this.props.valorstateprops1,   
      chavestateprops2 : "valorstateprops2"            
    }
    this.chaveprops1
    let bindFunção = Função.bind(this)
  }     

  Função(){
    this.setState(
      (state) => (
        {chavestate1 : "novo valor"},
        {chavestateprops1 : "novo valor"}
      )
    )
  }  

  componentDidMount()(
    console.log("O componente foi criado")
  )

  componentDidUpdate()(
    console.log("O componente foi atualizado")
  )
  
  componentWillUnmount()(
    console.log("O componente foi removido")
  )


  render(){
    return(
      <>
        <p>Conteúdo do Componente de Classe</p>
        <p>{this.state.chavestate1}</p>
        <p>{this.state.chavestateprops1}</p>
        <p>{this.state.chavestateprops2}</p>
        <p>{this.props.chaveprops1}</p>
        <p>{this.props.chaveprops2}</p>   
        <button onClick={() => this.Função()}>CHAMAR FUNÇÃO SEM BIND</button>               
        <button onClick={this.bindFunção}>CHAMAR FUNÇÃO COM BIND</button>             //OU onClick={() => this.bindFunção()}        
      </>
    )
  }
}

-Dentro de um arquivo chamado App.js:

import React from 'react'
import Classe from './componentes/Classe.js'

export default function App() {

  return (
    <>
      <Classe
        chaveprops1 = "Valor de chaveprops1"
        chaveprops2 = "Valor de chaveprops2" 
      />
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
VARIAVEIS GLOBAIS STATIC
VIDEO: https://www.youtube.com/embed/0gCEIt-WNQ0?autoplay=1

-Dentro de um arquivo chamado Globais.js:

export default class Globais{        
  static nome = "Bruno"
  static sobrenome = "Campos"
  static idade = 27  
  static brasileiro = true
}


-Dentro de um arquivo chamado App.js:

import React from 'react'
import Globais from './componentes/Globais.js'

export default function App() {

  return (
    <>
      <p>{"Nome: " + Globais.nome}</p>
      <p>{"Sobrenome: " + Globais.sobrenome}</p>
      <p>{"Idade: " + Globais.idade + " anos"}</p>
      <p>{"Brasileiro: "} {Globais.brasileiro ? "Sim" : "Não"}</p>
    </>
  )
}

>>> Nome: Bruno
>>> Sobrenome: Campos
>>> Idade: 27 anos
>>> Brasileiro: Sim

-----------------------

-Dentro de um arquivo chamado Pessoa.js:

export default class Pessoa{                         //class e não function
  static nome = "Bruno"
  static sobrenome = "Campos"
}


-Dentro de um arquivo chamado Infos.js:

import React from 'react'
import Pessoa from './Pessoa.js'

export default function Infos(){                       //function e não class
  return(
    <>
      <p>{"Nome: " + Pessoa.nome}</p>
      <p>{"Sobrenome: " + Pessoa.sobrenome}</p>
    </>
  )
}


-Dentro de um arquivo chamado App.js:

import React from 'react'
import Infos from './componentes/Infos.js'

export default function App() {

  return (
    <>
      <Infos/>
    </>
  )
}

------------------

-----------------------

-Dentro de um arquivo chamado Pessoa.js:

export default class Pessoa{                        
  static nome = "Bruno"
}


-Dentro de um arquivo chamado App.js:

import React,{useState} from 'react'
import Pessoa from './componentes/Pessoa.js'

export default function App() {

  const [info, setInfo] = useState(Pessoa.nome)

  const gravar = () => {
    Pessoa.nome = info
  }

  const mostrar = () => {
    alert(Pessoa.nome)
  }

  return (
    <>
      <input type="text" value={info} onChange={(e) => setInfo(e.target.value)}/>
      <button onClick={() => gravar()}>GRAVAR</button>
      <button onClick={() => mostrar()}>MOSTRAR</button>
    </>
  )
}

-Ao clicar em MOSTRAR, aparecerá o alerta com o texto Bruno. Porém, se alterar o o que está escrito no input e clicar em GRAVAR, ao clicar em MOSTRAR, será mostrado o novo valor gravado

////////////////////////////////////////////////////////////////&&&
NAVEGANDO ENTRE TELAS
VIDEO: https://www.youtube.com/embed/-I2hggc2yFA?autoplay=1


import React from 'react'

export default function App() {

  const navegar = () => {
    window.open('https://www.google.com')
  }
  
  return (
    <>  
      <button onClick={() => navegar()}>Ir para o Google</button> 
    </>
  )

}

---------------

-Dentro de um arquivo chamado Pagina1.js:

export default function Pagina1(){                        
  return (
    <>  
      <p>Conteúdo da Página 1</p>
    </>
  )
}


-Dentro de um arquivo chamado App.js:

import React from 'react'
import Pagina1 from './componentes/Pagina1.js'

export default function App() {

  const navegar = () => {
    window.open("http://localhost:3000/pagina1")
  }
  
  return (
    <>  
      <button onClick={() => navegar()}>Ir para a Página 1</button> 
    </>
  )
}


---------------

-Dentro de um arquivo chamado Pagina1.js:

export default function Pagina1(){                        
  return (
    <>  
      <p>Conteúdo da Página 1</p>
    </>
  )
}


-Dentro de um arquivo chamado Pagina2.js:

export default function Pagina2(){                        
  return (
    <>  
      <p>Conteúdo da Página 2</p>
    </>
  )
}


-Dentro de um arquivo chamado App.js:

import React,{useState,useEffect} from 'react'
import Pagina1 from './componentes/Pagina1.js'
import Pagina2 from './componentes/Pagina2.js'

export default function App() {

  const [pagina, setPagina] = useState(0)

  useEffect(
    () => {
      const url = window.location.href
      const.res = url.split('?')
      setPagina(res[1])
    }
  )

  const LinksPaginas = (p) => {
    if(p==1){
      window.open('http://localhost:3000?1', '_self')
    }
    else if(p==2){
      window.open('http://localhost:3000?2', '_self')      
    }
  }

  const retornarPagina = () => {
    if (pagina == 1) {
      return <Pagina1/>
    }
    else if (pagina == 2) {
      return <Pagina2/>
    }
    else {
      return <div>
              <button onClick={() => LinksPaginas(1)}>Ir para a Página 1</button>
              <button onClick={() => LinksPaginas(2)}>Ir para a Página 2</button>
            </div>
    }
  }

  return (
    <>  
      {retornarPagina()}   
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
NAVEGANDO ENTRE TELAS COM REACT ROUTER E LINK 
VIDEO: https://www.youtube.com/embed/WATv_Md3y_o?autoplay=1

Primeiro instale a extensão com:
npm install react-router-dom

----------------------------- ### &&&
BROWSER ROUTER, ROUTE E ROUTES (Forma antiga)

-Dentro de um arquivo chamado Pagina1.js:

export default function Pagina1() {                        
  return (
    <div className="pagina1">  
      <p>Conteúdo da Página 1</p>
    </div>
  )
}

¨¨¨¨
-Dentro de um arquivo chamado Erro404.js:

export default function Erro404() {                        
  return (
    <div className="Erro404">  
      <p>A página não foi encontrada.</p>
    </div>
  )
}

¨¨¨¨
-Dentro de um arquivo chamado Home.js:

import React from 'react'
import {Link} from 'react-router-dom'

export default function Home() {
  
  return (
    <div className="home">  
      <Link to="/pagina1">Link para a página 1</Link>
    </div>
  )
}

¨¨¨¨
-Dentro de um arquivo chamado App.js:    (ou Index.js)

import React from 'react'
import {BrowserRouter, Route, Routes} from 'react-router-dom'
import Home from './componentes/Home.js'
import Pagina1 from './componentes/Pagina1.js'
import Erro404 from './componentes/Erro404.js'

export default function App() {
  
  return (
    <>  
      <BrowserRouter>

        <Routes>
          <Route path="/" index element={<Home />} />
          <Route path="/pagina1" element={<Pagina1 />} />
          <Route path="*" element={<Erro404 />} />
        </Routes>

      </BrowserRouter>
    </>
  )
}

----------------- ###
Usando o useNavigate ao invés de Link:
VIDEO: https://www.youtube.com/embed/X3It9vgZqcU?autoplay=1

-Dentro de um arquivo chamado Pagina1.js:

export default function Pagina1(){                        
  return (
    <div className="pagina1">  
      <p>Conteúdo da Página 1</p>
    </div>
  )
}

-Dentro de um arquivo chamado Home.js:

import React from 'react'
import {useNavigate} from 'react-router-dom'

export default function Home() {

  const nav = useNavigate()

  const navigate = () => {
    nav('/pagina1')
  }
  
  return (
    <div className="home"> 
      <button onClick={navigate}>Ir para a página 1</button>
    </div>
  )
}

¨¨¨¨
-Dentro de um arquivo chamado App.js:    (ou Index.js)

import React from 'react'
import {BrowserRouter, Route, Routes} from 'react-router-dom'
import Home from './componentes/Home.js'
import Pagina1 from './componentes/Pagina1.js'

export default function App() {
  
  return (
    <>  
      <BrowserRouter>

        <Routes>
          <Route path="/" index element={<Home />} />
          <Route path="/pagina1" element={<Pagina1 />} />
        </Routes>

      </BrowserRouter>
    </>
  )
}

------------------ ###
Dynamic Route:
https://www.youtube.com/embed/c02YoWR9gSY?autoplay=1


-Dentro de um arquivo chamado Produtos.js:

const Produtos = () => {                      //Ou export defaul function Produtos(){...}
  
  const Itens = [
    {id: 1, nome:"Carro"},
    {id: 2, nome:"TV"},
    {id: 3, nome:"Geladeira"},
  ]

  return (
    <ul>
      {Produtos.map((Itens) => (
        <li key={Itens.id}>
          <Link to={`/produtos/${Itens.id}`}>
            <h2>{Itens.nome}</h2>
          </Link>
        </li>
      ))}
    </ul>
  )

}

¨¨¨¨
-Dentro do arquivo App.js:

....
      <BrowserRouter>

        <Routes>
          <Route path="/" element={<Index/>} />
          <Route path="/produtos/:id" element={<Produtos/>} />       // :variavel é uma rota dinamica
        </Routes>

      </BrowserRouter>
....


----------- ###
Dynamic Route usando useParams() no react-router:
LINK: https://reactrouter.com/api/hooks/useParams#examples

-Num arquivo chamado Posts.js:

import { useParams } from "react-router";

export default function Post() {
  let params = useParams();
  return <h1>Post: {params.postId}</h1>;
}

// Assuming a route pattern like /posts/:postId is matched by /posts/123 then params.postId will be "123".

-No arquivo chamado App.js:

import { useParams } from "react-router"

function SomeComponent() {
  let params = useParams()
  params.postId
}

<Route path="/posts/:postId" element={<Post />} />;

////////////////////////////////////////////////////// &&&
USANDO O REACT-ROUTER  
PROVIDER, LINK, OUTLET E BROWSER ROUTER (Forma atual)

-Arquivo Contato.jsx:

export default function Contato() {                        
  return (
    <div className="contato">  
      <p>Conteúdo da página Contato</p>
    </div>
  )
}

¨¨¨¨
-Arquivo Home.jsx:

export default function Home() {
  
  return (
    <div className="home">  
      <p>Conteúdo da página Home</p>
    </div>
  )
}

¨¨¨¨
-Arquivo Navbar.jsx:

export default function Navbar() {
  return (
    <nav>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/contato">Contato</Link>
        </li>
      </ul>
    </nav>
  )
}


¨¨¨¨
-Arquivo main.jsx:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

import {createBrowserRouter, RouterProvider} from 'react-router-dom'
import Home from './routes/Home.jsx'
import Contato from './routes/Contato.jsx'

const router = createBrowserRouter(
  {
    path: "/",
    element: <App />,
    children: [
      {path: "/", element: <Home />},
      {path: "/contato", element: <Contato />},
    ]
  }
)

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>,
)

¨¨¨¨
-Arquivo App.jsx:

import './App.css'
import {Outlet} from 'react-router-dom'
import Navbar from "./components/Navbar"

export default function App(){
  return(
    <div className="App">
      <Navbar />
      <Outlet />
    </>
  )
}

------------------ ###

-Arquivo router.jsx dentro da pasta router:

import {createBrowserRouter} from 'react-router';
import MainLayout from '../layout/MainLayout';
import Home from '../components/Home';
import Contatos from '../components/Contatos';

export const router = createBrowserRouter([
  {
    path: "/",
    Component: MainLayout,
    children: [
      {
        path: "/",
        Component: Home,
      },{
        path: "/contatos",
        Component: Contatos,
      }
    ],
  },
]);

¨¨¨¨
-Arquivo main.jsx:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>,
)

¨¨¨¨
-Arquivo Navbar.jsx dentro da pasta components:

export default const Navbar = () => {
  return (
    <div>
      <h1>NAVBAR</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo Footer.jsx dentro da pasta components:

export default const Footer = () => {
  return (
    <div>
      <h1>Footer</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo Home.jsx dentro da pasta components:

export default const Home = () => {
  return (
    <div>
      <h1>Conteúdo da Home</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo Contatos.jsx dentro da pasta components:

export default const Contatos = () => {
  return (
    <div>
      <h1>Conteúdo de Contatos</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo MainLayout.jsx dentro da pasta layout:

import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import {Outlet} from 'react-router';

export default const MainLayout = () => {
  return (
    <>
      <Nav />
      <Outlet />
      <Footer />
    </>
  )
}


////////////////////////////////////////////////////////////////&&&
EXERCICIO 1 com BARRA DE PESQUISA
VIDEO: https://www.youtube.com/embed/whBg2A-ls2I?autoplay=1

import React from 'react'

export default function App() {

  const lista = [                                    
  {nome: "Renato", sexo: "Masculino", idade: "31"},
  {nome: "Maria", sexo: "Feminino", idade: "24"},
  {nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  const imprimir = () => {
    return lista.map ( (x) => {
      if (x.sexo === "Masculino") {
        return <p key={x.nome}>{x.nome}</p>;
      }
      return null;
    });
  }

  return (
    <>
      {imprimir()}
    </>
  );
}

>>> Renato
>>> Valter

-------------

import React,{useState} from 'react'

const carros = [
  {categoria: "Esporte", preço: "100000", modelo: "Golf"},
  {categoria: "Utilitario", preço: "125000", modelo: "Hillux"},
  {categoria: "SUV", preço: "85000", modelo: "HRV"},
]

const mostrar = (cat) => {
  return carros.map ( (carro) => {
    if (carro.categoria.toUpperCase() === cat.toUpperCase() || cat.toUpperCase() === '') {
      return (
        <div key={carro.modelo}>
          <p>{carro.modelo}</p>
          <p>R$ {carro.preço}</p>
          <p>{carro.categoria}</p>
          <br/>
        </div>
      )
    }
    return null;
  })
}

const pesquisar = (cat, scat) => {
  return (
    <div>
      <label>Digite uma categoria</label>
      <input type="text" value={cat} onChange={(e) => scat(e.target.value)} />
    </div>
  )
}

export default function App() {

  const [categoria, setCategoria] = useState('')

  return (
    <>  
      {pesquisar(categoria, setCategoria)}
      <br/>
      {mostrar(categoria)}
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
IMPORTANDO DADOS DE UMA LISTA JSON

No mesmo arquivo:  (FORMA 1)

import React from 'react';

export default function Pessoas() {
  const lista = [                                    
    {nome: "Renato", sexo: "Masculino", idade: "31"},
    {nome: "Maria", sexo: "Feminino", idade: "24"},
    {nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  return (
    <div>
      {lista.map((pessoa, index) => (
        <div key={index}>
          <p>Nome: {pessoa.nome}</p>
          <p>Sexo: {pessoa.sexo}</p>
          <p>Idade: {pessoa.idade}</p>
          <hr />
        </div>
      ))}
    </div>
  );
}

---------

Em arquivos separados:  (FORMA 2)

-No arquivo dados.js:

export const lista = [                                    
  {nome: "Renato", sexo: "Masculino", idade: "31"},
  {nome: "Maria", sexo: "Feminino", idade: "24"},
  {nome: "Valter", sexo: "Masculino", idade: "36"}
];


-No arquivo App.js:

import React from 'react';
import { lista } from './componentes/dados.js';

export default function App() {
  return (
    <div>
      {lista.map((pessoa, index) => (
        <div key={index}>
          <h3>{pessoa.nome}</h3>
          <p>Sexo: {pessoa.sexo}</p>
          <p>Idade: {pessoa.idade} anos</p>
        </div>
      ))}
    </div>
  );
}

-----------

Com useState: (FORMA 3)

-Num arquivo chamado lista.js:

export const pessoas = [
  {nome: "Renato", sexo: "Masculino", idade: "31"},
  {nome: "Maria", sexo: "Feminino", idade: "24"},
  {nome: "Valter", sexo: "Masculino", idade: "36"}
]

-Num arquivo chamado App.js:

import React, { useState } from 'react';
import {pessoas} from './componentes/lista.js';

export default function Pessoas() {

  const [lista, setLista] = useState(pessoas);

  const addPessoa = () => {
    setLista([...lista, {nome: "João", sexo: "Masculino", idade: "28"}]);
  };

  return (
    <div>

      <button onClick={addPessoa}>Adicionar Pessoa</button>

      {lista.map((pessoa, index) => (
        <div key={index}>
          <p>{pessoa.nome} - {pessoa.sexo} - {pessoa.idade} anos</p>
        </div>
      ))}

    </div>
  );
}

////////////////////////////////////////////////////////////////&&&
CALCULADORA
VIDEO: https://www.youtube.com/embed/bHu_jB9apfM?autoplay=1

-Num arquivo chamado App.js:

import React, { useState } from 'react';

const fpeso = (p, sp) => {
  return (
    <div>
      <label>Peso </label>
      <input type="text" value={p} onChange={(e) => {sp(e.target.value)}} />
    </div>
  )
}

const faltura = (a, sa) => {
  return (
    <div>
      <label>Altura </label>
      <input type="text" value={a} onChange={(e) => {sa(e.target.value)}} />
    </div>
  )
}

const fcalcular = (p, a, sr) => {
  const calc = () => {
    sr(p * a)                                     //Se quisesse somar, seria:  sr(parseInt(p) + parseInt(a))
  }
  return (
    <div>
      <button onClick={calc}>CALCULAR</button>
    </div>
  )
}

const fresultado = (res) => {
  return (
    <div>
      <p>Resultado: {res.toFixed(2)}</p>
    </div>
  )
}

export default function App() {

  const [peso, setPeso] = useState(0)
  const [altura, setAltura] = useState(0)
  const [resultado, setResultado] = useState(0)

  return (
    <>
      {fpeso(peso, setPeso)}
      {faltura(altura, setAltura)}
      {fcalcular(peso, altura, setResultado)}
      {fresultado(resultado)}
    </>
  )
}

---------------

Para separar cada função em um componente diferente:

-Num arquivo chamado Peso.js:

export default function Peso(props) {
  return (
    <div>
      <label>Peso </label>
      <input type="text" value={props.p} onChange={(e) => {props.sp(e.target.value)}} />
    </div>
  )
}

-Num arquivo chamado Altura.js:

export default function Altura(props) {
  return (
    <div>
      <label>Altura </label>
      <input type="text" value={props.a} onChange={(e) => {props.sa(e.target.value)}} />
    </div>
  )
}

-Num arquivo chamado Calculo.js:

export default function Calculo(props) {
  const calc = () => {
    props.sr(props.p * props.a)                              
  }
  return (
    <div>
      <button onClick={calc}>CALCULAR</button>
    </div>
  )
}

-Num arquivo chamado Resultado.js:

export default function Resultado(props) {
  return (
    <div>
      <p>Resultado: {props.res.toFixed(2)}</p>
    </div>
  )
}


-Num arquivo chamado App.js:

import React, { useState } from 'react';
import Peso from './componentes/Peso.js'
import Altura from './componentes/Altura.js'
import Calculo from './componentes/Calculo.js'
import Resultado from './componentes/Resultado.js'

export default function App() {

  const [peso, setPeso] = useState(0)
  const [altura, setAltura] = useState(0)
  const [resultado, setResultado] = useState(0)

  return (
    <>
      <Peso p={peso} sp={setPeso} />
      <Altura a={altura} sa={setAltura} />
      <Calculo p={peso} a={altura} sr={setResultado} />
      <Resultado res={resultado} />
    </>
  )
}

-------------

Caso utilizemos componentes de classe: (React de Classe ao invés de React Funcional)

-Num arquivo chamado Peso.js:

import React from 'react'

export default class Peso extends React.Component{     
  constructor(){
    super()
  }     
  render(){
    return(
      <div>
        <label>Peso </label>
        <input type="text" value={this.props.p} onChange={(e) => {this.props.sp(e.target.value)}} />
      </div>
    )
  }
}

-Num arquivo chamado Altura.js:

import React from 'react'

export default class Altura extends React.Component{   
  constructor(){
    super()
  }     
  render(){
    return (
      <div>
        <label>Altura </label>
        <input type="text" value={this.props.a} onChange={(e) => {this.props.sa(e.target.value)}} />
      </div>
    )
  }
}

-Num arquivo chamado Calculo.js:

import React from 'react'

export default class Calculo extends React.Component{   
  constructor(){
    super()
  }     
  calc = () => {
    this.props.sr(this.props.p * this.props.a)                              
  }
  render(){
    return (
      <div>
        <button onClick={this.calc}>CALCULAR</button>
      </div>
    )
  }
}

-Num arquivo chamado Resultado.js:

import React from 'react'

export default class Resultado extends React.Component{   
  constructor(){
    super()
  }     
  render(){
    return (
      <div>
        <p>Resultado: {this.props.res.toFixed(2)}</p>
      </div>
    )
  }
}

-Num arquivo chamado App.js:

import React, { useState } from 'react';
import Peso from './componentes/Peso.js'
import Altura from './componentes/Altura.js'
import Calculo from './componentes/Calculo.js'
import Resultado from './componentes/Resultado.js'

export default function App() {

  const [peso, setPeso] = useState('')
  const [altura, setAltura] = useState('')
  const [resultado, setResultado] = useState(0)

  return (
    <>
      <Peso p={peso} sp={setPeso} />
      <Altura a={altura} sa={setAltura} />
      <Calculo p={peso} a={altura} sr={setResultado} />
      <Resultado res={resultado} />
    </>
  )
}

OBS: O componente Calculo foi realizado da seguinte maneira no video:

-Num arquivo chamado Calculo.js:

import React from 'react'

export default class Calculo extends React.Component{   
  constructor(){
    super()
    this.calc = this.fcalc.bind(this)
  }     

  fcalc = () => {
    this.props.sr(this.props.p * this.props.a)                              
  }

  render(){
    return (
      <div>
        <button onClick={this.calc}>CALCULAR</button>
      </div>
    )
  }
}

OUTRA FORMA SEM O BIND E COM A FUNÇÃO DENTRO DO RENDER:

import React from 'react'

export default class Calculo extends React.Component{   
  constructor(){
    super()
  }     
  render(){
    const calc = () => {
      this.props.sr(this.props.p * this.props.a)                              
    }
    return (
      <div>
        <button onClick={calc}>CALCULAR</button>
      </div>
    )
  }
}

////////////////////////////////////////////////////////////////&&&
KEY
VIDEO: https://www.youtube.com/embed/ZKTaOoNCAcg?autoplay=1


-Num arquivo chamado carros.js:

export default function Carro(props) {
  return <p>{props.marca}</p>;
}

-No arquivo chamado App.js:

import React from 'react';
import Carro from './componentes/carros.js';

export default function App() {
  const carros = [
    {id: 1, marca: 'Ford'},
    {id: 2, marca: 'BMW'},
    {id: 3, marca: 'Audi'}
  ];

  return (
    <>
      {carros.map((car) => <Carro key={car.id} marca={car.marca} />)}
    </>
  );
}

------------

import React from 'react'

function ListaNumeros(props) {
  const num = props.numeros
  const lista_numeros = num.map(
    (n) => <li key={n.toString()}>{n}</li>             //.toString() é necessário????
  )
  return (<ul>{lista_numeros}</ul>)
}

const array_numeros = [1,2,3,4,5,6,7,8,9]

export default function App() {
  return (
    <>
      <ListaNumeros numeros={array_numeros} />
    </>
  )
}


////////////////////////////////////////////////////////////////&&&
CRIANDO E IMPORTANDO UMA API NO NODE JS
VIDEO: https://www.youtube.com/embed/VsXwvgW17ow?autoplay=1

Crie um App de Node JS (no video é criado no repplit)

-No arquivo index.js:

var carros='['+
'{"id":1,"marca":"Honda","modelo":"HRV"},'+
'{"id":2,"marca":"VW","modelo":"Golf"},'+
'{"id":3,"marca":"Fiat","modelo":"Toro"},'+
'{"id":4,"marca":"GM","modelo":"Tracker"}'+
']';

var http = require('http');
var server = http.createServer(function(request, response){
	response.setHeader('Access-Control-Allow-Origin','*');
	response.writeHeader(200,{"Content-Type":"text/html"});
	response.write(carros);
	response.end();
});
server.listen(3000);

--------------

Outra forma (mais simples???):

-No arquivo index.js:

var nomes = [                                                        //array em JSON
  {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
  {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
  {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
];

var obj = JSON.stringify(nomes);                                     //para transformar JSON em string

var http = require('http');                                          //para importar o modulo http

var server = http.createServer(function(request, response){
  response.setHeader('Access-Control-Allow-Origin','*');             //para todos terem acesso a API
  response.writeHead(200,{"Content-Type":"text/html"});              //para apresentar os dados como texto/html
  response.write(obj);
  response.end();
});

server.listen(3000);                                                 //para escutar na porta 3000

-------

var nomes = [    
  {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
  {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
  {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
];

var obj = JSON.stringify(nomes);

const http = require('http');

const requestListener = function (req, res) {
  res.writeHead(200,{"Content-Type":"text/html"});
  res.end(obj);
}

const server = http.createServer(requestListener);
server.listen(3000);


--------------

Criando API no Node JS com YARN, EXPRESS e NODEMON:
VIDEO: https://www.youtube.com/embed/WejbsEnvvRQ?autoplay=1

-Instale o Node JS
-Abra o terminal do VS Code
-Procure no terminal a pasta onde ficarão os arquivos:
  cd..
  cd backend                    (backend é o nome da pasta)
-Dentro da pasta, digite:  npm init
-Aperte Enter nas próximas partes
-Após terminar, será criado um arquivo chamado package.json na pasta
-Será preciso instalar algumas bibliotecas. É possivel instalar pelo proprio npm, mas é menos confiavel. Então será usado o Yarn para instalar as bibliotecas, pois é mais rápido e confiavel.
-Entre no terminal e digite:  npm install -g yarn
-Será preciso instalar a biblioteca Express. Digite no terminal:  yarn add express
-Crie um arquivo chamado index.js dentro da pasta

-No arquivo index.js:

const express = require('express');
const server = express();

server.get('/', (req, res) => {
	return res.json({mensagem: "A API está funcionando"})
});

server.listen(3000, () => {
	console.log("Servidor está funcionando")      //Opcional
});


-Para iniciar a API, dentro do terminal digite:  node index.js
-Para parar a API (e ver mudanças e alterações) aperte Ctrl + C no terminal

-Para visualizar a API, acesse no navegador a url:  localhost:3000/

---

-Caso queira mudar a url, mude o codigo abaixo:

server.get('/produtos', (req, res) => {
	return res.json({mensagem: "Esta é a página de produtos"})
});

A url seria então:  localhost:3000/produtos

---

-Para adicionar o conteúdo JSON:

var nomes = [    
  {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
  {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
  {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
];

const express = require('express');
const server = express();

server.get('/', (req, res) => {
	return res.json(nomes)
});

server.listen(3000)

---

Os conteudo JSON normalmente fica em uma pasta separada. Por exemplo:

backend
  node_modules
  src
    data
      Nomes.json
  index.js
  package.js
  yarn.lock


-Dentro do arquivo Nomes.json:

var nomes = [    
  {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
  {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
  {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
];

-Dentro do arquivo index.js:

const express = require('express');
const server = express();
const nomes = require('./src/data/filmes.json');

server.get('/nomes', (req, res) => {
	return res.json(nomes)
});

server.listen(3000)

---

Para atualizar as alterações sem precisar parar a API, é preciso instalar a biblioteca nodemon:

-No terminal digite:  yarn global add nodemon
-Ao terminar a instalação, digite:  clear

-Dentro do arquivo package.json, altere o codigo para:

...
"scripts": {
  "start":"nodemon ./index.js",
  "test":"echo \"Error: no test specified\" && exit 1"
},
...

-Após isso, para iniciar a API, digite no terminal:  yarn start
-Com isso, qualquer alteração feita no codigo será atualizado automaticamente na tela.

---

Para consumir os dados da API usando o yarn e o axios:
VIDEO: https://www.youtube.com/embed/k8hz8WIxhAA?autoplay=1

////////////////////////////////////////////////////////////////&&&
CONSUMINDO DADOS DA API COM AXIOS E COMPONENTE DE CLASSE
VIDEO: https://www.youtube.com/embed/GrxM7aHyN84?autoplay=1

-Primeiro é necessário instalar a biblioteca axios no node js:
-No terminal, entre na pasta correta:  cd..    
-Digite no terminal:  npm install axios
-Após a instalação, digite no terminal:  npm install react-axios              (por prevenção, instale essa biblioteca)
(Caso queira instalar o axios no replit, clique em Shell e depois digite no terminal:  npm install axios)
 
-Dentro da pasta componentes, crie um arquivo para receber os dados da API

-Arquivo ListaNomes.js:

import React from 'react'
import axios from 'axios'

export default class ListaNomes extends React.Component{

  state = {
    nomes:[]
  }

  componentDidMount(){
    axios.get('https://3008adde-f980-4aa7-ac95-186b91f8fb9b-00-23bm4y0g030ut.picard.replit.dev/')
      .then(res=>{
        this.setState({nomes:res.data})
      })
  }
  render(){
    return(
      <div>
        {this.state.nomes.map(pessoa => 
          <div key={pessoa.id}>
            <p>{pessoa.nome}</p>
            <p>{pessoa.sexo}</p>
            <p>{pessoa.idade} anos</p>
          </div>
        )}
      </div>
    )
  }
}

OBS: Em axios.get(url) , a url é a que o replit criou para a API com os dados. Caso a API fosse criada pelo Node JS, a url seria outra

-No arquivo App.js:

import React from 'react'
import ListaNomes from './componentes/ListaNomes.js'

export default function App(){
  return(
    <>
      <ListaNomes />
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
CONSUMINDO DADOS DA API COM AXIOS E COMPONENTE FUNCIONAL
VIDEO: https://www.youtube.com/embed/ufb8a6ZztOM?autoplay=1

-Siga as recomendações de instalação de bibliotecas do exemplo acima com componentes de classe

-Arquivo ListaNomes.js:

import React, {useState, useEffect} from 'react'
import axios from 'axios'

export default function ListaNomes() {

  const [nomes, setNomes] = useState([])

  useEffect(() => {
    axios.get('https://3008adde-f980-4aa7-ac95-186b91f8fb9b-00-23bm4y0g030ut.picard.replit.dev/')
      .then(res=>{
        setNomes(res.data)
      })
  })


  return(
    <div>
      {nomes.map(pessoa => 
        <div key={pessoa.id}>
          <p>{pessoa.nome}</p>
          <p>{pessoa.sexo}</p>
          <p>{pessoa.idade} anos</p>
        </div>
      )}
    </div>
  )
}

-No arquivo App.js:

import React from 'react'
import ListaNomes from './componentes/ListaNomes.js'

export default function App(){
  return(
    <>
      <ListaNomes />
    </>
  )
}

////////////////////////////////////////////////////////////////&&&
CONSUMINDO DADOS DA API COM FETCH
VIDEO: https://www.youtube.com/embed/fTqOfPfOFJE?autoplay=1

É possível consumir os dados da API sem precisar de nenhuma biblioteca como o Axios. Para isso, utiliza-se o Fetch.

-Arquivo ListaNomes.js:

import React, {useState, useEffect} from 'react'

export default function ListaNomes() {

  const [nomes, setNomes] = useState([])

  useEffect(() => {
    fetch('https://3008adde-f980-4aa7-ac95-186b91f8fb9b-00-23bm4y0g030ut.picard.replit.dev/')
      .then(res => res.json())
      .then(
        (res) => {
          setNomes(res)
        }
      )
  })

  return(
    <div>
      {nomes.map(pessoa => 
        <div key={pessoa.id}>
          <p>{pessoa.nome}</p>
          <p>{pessoa.sexo}</p>
          <p>{pessoa.idade} anos</p>
        </div>
      )}
    </div>
  )
}

-No arquivo App.js:

import React from 'react'
import ListaNomes from './componentes/ListaNomes.js'

export default function App(){
  return(
    <>
      <ListaNomes />
    </>
  )
}

------

Caso queira usar componente de classe ao invés de componente funcional:

-Arquivo ListaNomes.js:

import React from 'react'

export default class ListaNomes extends React.Component{

  state = {
    nomes:[]
  }

  componentDidMount(){
    fetch('https://3008adde-f980-4aa7-ac95-186b91f8fb9b-00-23bm4y0g030ut.picard.replit.dev/')
      .then(res => res.json())
      .then(
        (res) => {
          const data = res.data || res || [];
          this.setState({nomes:data})
        }
      )
  }

  render(){
    return(
      <div>
        {this.state.nomes.map(pessoa => 
          <div key={pessoa.id}>
            <p>{pessoa.nome}</p>
            <p>{pessoa.sexo}</p>
            <p>{pessoa.idade} anos</p>
          </div>
        )}
      </div>
    )
  }
}

////////////////////////////////////////////////////////////////&&&
BOTÕES / INTERATIVIDADE

-Para mudar de cor sem usar useState:

import React from 'react'

const mudar = () => {
  document.getElementById("txt").style.color = "red";
}

export default function App() {

  return (
    <>  
      <button onClick={mudar}>BOTÃO</button>
      <p id="txt">TEXTO DE EXEMPLO</p>
    </>
  )
}

-Para mudar de cor usando useState, sem toggle e sem importar um arquivo css:

import React, {useState} from 'react'

export default function App() {

  const [cor, setCor] = useState('red');

  const mudar = () => {
    setCor(document.getElementById('txt').style.color = cor);
  }

  return (
    <>  
      <button onClick={mudar}>BOTÃO</button>
      <p id="txt">TEXTO DE EXEMPLO</p>
    </>
  )
}

------

Outra forma:

import React, {useState} from 'react'

export default function App() {

  const [cor, setCor] = useState('blue');

  const mudar = () => {
    if (cor === 'blue') {
      setCor('red');
    } 
  }

  return (
    <>  
      <button onClick={mudar}>BOTÃO</button>
      <p id="txt" style={{color: cor}}>TEXTO DE EXEMPLO</p>
    </>
  )
}

-------------

Para mover um elemento sem usar useState:

import React from 'react';

const mover = () => {
  document.getElementById("caixa").style.left = "150px";
}

export default function App() {
  return (
    <>
      <button onClick={mover}>BOTÃO</button>
      
      <div id="caixa" style={{ backgroundColor: 'green', height: '100px', width: '100px', position: 'absolute', left: '0px' }}></div>
      
    </>
  );
}

-----------

TOGGLE (É melhor usar useState para atualizar o estado e forçar a renderização):

Toogle para mostrar e esconder:

-Arquivo App.css:

.hide {
  display: none;
}

-Arquivo App.jsx:

import React, { useState } from 'react';
import './App.css';

export default function App() {
  
  const [show, setShow] = useState(true);

  return (
    <>
      <button onClick={() => setShow(!show)}>TOGGLE</button>
  
      <div className={show ? "show" : "hide"}>TEXTO</div>
    </>
  )
};

-----------

Toggle para alternar entre classes:

-Arquivo App.css:

.azul {
  color: blue;
}

.vermelho {
  color: red;
}


-Arquivo App.jsx:

import React, { useState } from 'react';
import './App.css';

export default function App() {
  
  const [cor, setCor] = useState(true);

  return (
    <>
      <button onClick={() => setCor(!cor)}>TOGGLE</button>
  
      <div className={cor ? "azul" : "vermelho"}>TEXTO</div>
    </>
  )
};

-----------

Outra forma sem usar classes:

import React, {useState} from 'react'

export default function App() {

  const [cor, setCor] = useState('blue');

  const mudar = () => {
    if (cor === 'blue') {
      setCor('red');
    } else {
      setCor('blue');
    }
  }

  return (
    <>  
      <button onClick={mudar}>BOTÃO</button>
      <p id="txt" style={{color: cor}}>TEXTO DE EXEMPLO</p>
    </>
  )
}

-----------

Toggle para mostrar uma barra lateral na direita:

-Arquivo App.css:

.fundo {
  background-color: yellow;
  width: 100vw;
  height: 100vh;
}

.show {
  width: 40vw;
  height: 100vh;
  background-color: gray;
  right: 0px;
  top: 0px;
  position: absolute;
  transition: all 0.2s;
}

.hide {
  right: -40vw;                                    // OU display: none;
}

-Arquivo App.jsx:

import React, { useState } from 'react';
import './App.css';

export default function App() {
  
  const [show, setShow] = useState(false);

  return (
    <>
      <div className="fundo">
        <button onClick={() => setShow(!show)}>TOGGLE</button>
        <div className={show ? "show" : "hide"}></div>
      </div>
    </>
  )
};

--------------

Toggle com mensagem de pop-up e fundo escurecendo:

-Arquivo App.css:

.fundo {
  background-color: #dbdbdb;
  width: 100vw;
  height: 100vh;
  transition: all 0.2s;
}

.fundoescuro {
  background-color: #8f8f8f;
  width: 100vw;
  height: 100vh;
  transition: all 0.2s;
}

.show {
  width: 60vw;
  height: 50vh;
  background-color: white;
  border-radius: 10px;
  display: flex;
  align-content: center;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: all 0.2s;
}

.hide {
  display: none;
}

-Arquivo App.jsx:

import React, { useState } from 'react';
import './App.css';

export default function App() {

  const [show, setShow] = useState(false);
  const [fundo, setFundo] = useState(true);

  return (
    <>
      <div className={fundo ? "fundo" : "fundoescuro"}>
        <button onClick={() => {setShow(!show), setFundo(!fundo)}}>TOGGLE</button>
        <div className={show ? "show" : "hide"}></div>
      </div>
    </>
  )
};

-----------------------------

HOVER

-Arquivo App.css:

.txt:hover{
  color: red;
  cursor: pointer;
}

-Arquivo App.jsx:

import React from 'react';
import './App.css';

export default function App() {

  return (
    <>
      <p className="txt">TEXTO</p>
    </>
  )
};


////////////////////////////////////////////////////////////////&&&
HOOK: Use Effect FORMA CORRETA
VIDEO: https://www.youtube.com/embed/L-1sP3Ljhsg

O useEffect é usado de 3 formas diferentes:

Forma 1: Executa sempre após uma re-renderização   (Atualiza instantaneamente)
useEffect(() => {})

Forma 2: Executa somente ao montar (mount) (É criado um um componente no DOM)     (Só renderiza 1 vez no início ao montar)
useEffect(() => {}, [])

Forma 3: Executa somente ao montar e se houver uma alteração no valor
useEffect(() => {}, [valor])

Normalmente usado em:
-Event-Listeners
-Manipulação do DOM
-Subscriptions/Inscrições (atualizações em tempo real)
-Pegar (Fetch) dados de uma API
-Limpar quando um componente desmonta (desmount)

OBS: É possível usar mais de 1 useEffect em um componente

------------
Forma 1:

import { useState, useEffect } from "react";

export default function App() {

  const [count, setCount] = useState(0)

  useEffect(() => {
    document.title = `Contagem: ${count}`;
  })

  function addCount() {
    setCount(prev => prev + 1)
  }

  return (
    <div>
      <p>Contagem: {count}</p>
      <button onClick={addCount}>Aumentar</button>
    </div>
  )
}

-Atualizará o título da página instantaneamente.

-------------
Forma 2:

import { useState, useEffect } from "react";

export default function App() {

  const [count, setCount] = useState(0)

  useEffect(() => {
    document.title = `Contagem: ${count}`;
  }, [])

  function addCount() {
    setCount(prev => prev + 1)
  }

  return (
    <div>
      <p>Contagem: {count}</p>
      <button onClick={addCount}>Aumentar</button>
    </div>
  )
}

-O valor do titulo da página não será atualizado toda vez que clica no botão, evitando que o componente seja re-renderizado desnecessariamente. Um bom exemplo seria se o titulo fosse:
document.title = `Título da página`;

Nesse caso acima, o título só precisa ser renderizado 1 vez no início, pois não será alterado no futuro. Então é melhor usar:
useEffect(() => {...}, [])

---------------
Forma 3:

import { useState, useEffect } from "react";

export default function App() {

  const [count, setCount] = useState(0)

  useEffect(() => {
    document.title = `Contagem: ${count}`;
  }, [count])

  function addCount() {
    setCount(prev => prev + 1)
  }

  return (
    <div>
      <p>Contagem: {count}</p>
      <button onClick={addCount}>Aumentar</button>
    </div>
  )
}

-O titulo da página será atualizado instantaneamente toda vez que o valor de count for alterado.

-----------

import { useState, useEffect } from "react";

export default function App() {

  const [count, setCount] = useState(0)
  const [color, setColor] = useState("green")

  useEffect(() => {
    document.title = `Contagem: ${count} - Cor: ${color}`;
  }, [count])

  function addCount() {
    setCount(prev => prev + 1)
  }

  function changeColor() {
    setColor(prev => prev === "green" ? "blue" : "green")
  }

  return (
    <div>
      <p>Contagem: {count}</p>
      <p>Cor: {color}</p>
      <button onClick={addCount}>Aumentar</button>
      <button onClick={changeColor}>Mudar Cor</button>
    </div>
  )
}

-Apenas a variavel count no titulo será alterada no titulo ao clicar nos botões. Para alterar ambos, o codigo ficaria:

  useEffect(() => {
    document.title = `Contagem: ${count} - Cor: ${color}`;
  }, [count, color])

----------------
PARA QUE USAR useEFFECT?

Os códigos acima também funcionariam se removesse o useEffect:

document.title = `Contagem: ${count}`;

ao invés de:

useEffect(() => {
  document.title = `Contagem: ${count} - Cor: ${color}`;
})


Então, para que usar o useEffect? 
Para deixar o código mais limpo e deixar mais claro em que momento ou circunstância a instrução será executada (uma das 3 formas de uso do useEffect)

Outro motivo é para poder usar clean-up codes ao usar Event-Listeners:

  useEffect(() => {
    document.title = `Contagem: ${count}`;
    return() => {
      //some clean-up code
    }
  })

Exemplo alterando o tamanho da janela:

import { useState } from "react";

export default function App() {

  const [width, setWidth] = useState(window.innerWidth)
  const [height, setHeight] = useState(window.innerHeight)

  window.addEventListener("resize", handleResize)
  console.log("EVENT LISTERNER ADICIONADO")

  function handleResize(){
    setWidth(window.innerWidth)
    setHeight(window.innerHeight)
  }

  return (
    <>
      <p>Window width: {width}px</p>
      <p>Window height: {height}px</p>
    </>
  )
}

-Com o código acima, toda vez que a janela fosse redimensionada, o event listener seria ativado, juntamente com a mensagem do console.log
Para resolver isso, é necessário usar um useEffect:

import { useState, useEffect } from "react";

export default function App() {

  const [width, setWidth] = useState(window.innerWidth)
  const [height, setHeight] = useState(window.innerHeight)

  useEffect(() => {
    window.addEventListener("resize", handleResize)
    console.log("EVENT LISTERNER ADICIONADO")
  }, [])

  function handleResize(){
    setWidth(window.innerWidth)
    setHeight(window.innerHeight)
  }

  return (
    <>
      <p>Window width: {width}px</p>
      <p>Window height: {height}px</p>
    </>
  )
}

-Desta forma, o event listener e a mensagem do console.log só serão invocados no início e ao montar o componente.
Então aparecerão 2 mensagens no log do console.
Para resolver isso é necessário adicionar um clean-up code:

  useEffect(() => {
    window.addEventListener("resize", handleResize)
    console.log("EVENT LISTERNER ADICIONADO")

    return () => {
      window.removeEventListener("resize", handleResize)
      console.log("EVENT LISTERNER REMOVIDO")
    }
  }, [])

Então o log ficaria:
>>> EVENT LISTERNER ADICIONADO
>>> EVENT LISTERNER REMOVIDO
>>> EVENT LISTERNER ADICIONADO

A razão para aparecer 2 vezes a mensagem é que o modo Strict está ativado. Caso seja desativado, não aparecerá duplicado.

---------------------- ###
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

import { useState, useEffect } from "react"; 

const App = () => {
  const [resourceType, setResourceType] = useState("posts");

  useEffect(() => {
    fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)
    .then((response) => response.json())
    .then((json) => console.log(json));
  }, [resourceType]);                          //Só executa este bloco de código quando resourceType for alterado

  const changeResourceType = (resourceType) => {
    setResourceType(resourceType);
  }

  return (
    <div>
      <h1>{resourceType}</h1>
      <div style={{ display: "flex", alignItems: "center" }}>
        <button onClick={() => changeResourceType("posts")}>Posts</button>
        <button onClick={() => changeResourceType("comments")}>Comments</button>
        <button onClick={() => changeResourceType("todos")}>Todos</button>
      </div>
    </div>
  )
}

export default App;

OBS: O useEffect é chamado sempre e apenas quando o valor de resourceType é alterado.

UseEffect não pode ser usado de forma assincrona. Exemplo:

  useEffect( async () => {
    fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)
    .then((response) => response.json())
    .then((json) => console.log(json));
  }, [resourceType]);

Então é necessário fazer da seguinte forma para usar async e await:

  useEffect(() => {
    const fetchResourceTypes = async () => {
      const response = await fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)
      const responseJSON = await response.json()
      console.log(responseJSON)
    }
    fetchResourceTypes()
  }, [resourceType]);

--------

import { useState, useEffect } from "react"; 

const App = () => {
  const [resourceType, setResourceType] = useState("posts");
  const [items, setItems] = useState([])

  useEffect(() => {
    const fetchResourceTypes = async () => {
      const response = await fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)
      const responseJSON = await response.json()
      setItems(responseJSON)
    }
    fetchResourceTypes()
  }, [resourceType]);

  const changeResourceType = (resourceType) => {
    setResourceType(resourceType);
  }

  return (
    <div>
      <h1>{resourceType}</h1>
      <div style={{ display: "flex", alignItems: "center" }}>
        <button onClick={() => changeResourceType("posts")}>Posts</button>
      </div>
      {items.map((item) => {
        <p>{item.title}</p>
      })}
    </div>
  )
}

export default App;

////////////////////////////////////////////////////////////////&&&
HOOK: useLayoutEffect
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

Muito parecido com o useEffect, mas:
useEffect = só é executado depois que o DOM tiver sido montado pelo React
useLayoutEffect = é executado antes do DOM ser montado pelo React

import {useLayoutEffect, useState} from 'react';

const App = () => {
  const [count, setCount] = useState(1);

  useLayoutEffect(() => {
    console.log(count);
  }, [count]);

  return (
    <>
      <h1>{count}</h1>
      <button onClick={() => setCount((prev) => prev + 1)}
    </>
  );
};

export default App;

O useLayoutEffect é melhor usado quando se quer fazer uma alteração no DOM baseando-se em algum elemento do DOM

////////////////////////////////////////////////////////////////&&&
HOOK: useRef

O useRef guarda um valor, assim como o useState, mas quando é atualizado, o componente não é renderizado novamente.

useState() = Renderiza novamente o componente quando o state é alterado

useRef() = Não renderiza novamente o componente quando o state é alterado. Usado para quando quisermos que um componente memorize uma informação, mas que queira que cause uma re-renderização.

Mais usado quando:
-Acessar/Interagir com elementos do DOM
-Manuseando Focus, Animations e Transitions
-Gerenciando Timers e Intervals

---------------- ###
VIDEO: https://www.youtube.com/embed/AltU-XcGvuo

Exemplo sem useRef:

import { useState, useEffect } from "react";

export default function App() {

  const [number, setNumber] = useState(0)

  useEffect(() => {
    console.log("Componente renderizado")
  })

  function handleClick(){
    setNumber(prev => prev + 1)
  }


  return (
    <div>
      <p>{number}</p>
      <button onClick={handleClick}>Clique</button>
    </div>
  )
}

-No exemplo acima, toda vez que o botão é clicado, o valor de number é alterado e o componente é renderizado novamente.

Para evitar a re-renderização, pode-se usar o useRef ao invés do useState:

import { useRef, useEffect } from "react";

export default function App() {

  const number = useRef(0)

  useEffect(() => {
    console.log("Componente renderizado")
  })

  function handleClick(){
    number.current = number.current + 1
    console.log(number.current)
  }

  return (
    <div>
      <p>{number.current}</p>
      <button onClick={handleClick}>Clique</button>
    </div>
  )
}

-Com isso, ao clicar no botão e alterar o valor de number, o componente não é renderizado novamente.

OBS: useRef retorna um objeto com a propriedade current.

-----------------------

import { useRef, useEffect } from "react";

export default function App() {

  const inputRef = useRef(null)

  useEffect(() => {                 //opcional
    console.log("Componente renderizado")
  })

  function handleClick(){
    inputRef.current.focus()
    inputRef.current.style.backgroundColor = "yellow"
  }

  return (
    <div>
      <input ref={inputRef} />
      <button onClick={handleClick}>MUDAR</button>
    </div>
  )
}

--------------------------- ###

VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

-Para referenciar algum elemento HTML:

import { useState, useEffect, useRef } from "react";

const App = () => {
  const [name, setName] = usestate("");

  const renders = useRef(0)

  useEffect(() => {
    renders.current = renders.current + 1
  }) 

  return (
    <div>
      <input 
        value={name} 
        onChange={(e) => setName(e.target.value)} 
      />
      <p>Olá, {name}</p>
      <p>{renders.current}</p>
    </div>
  )
}

export default App;

Neste exemplo, o useRef vai guardar a quantidade de vezes que houver alguma alteração no input e o componente precisar ser renderizado

-------------- &&&

-FOCUS usando useRef:

import { useState, useRef } from "react";

const App = () => {
  const [name, setName] = usestate("");

  const inputRef = useRef()

  const focusInput = () => {
    inputRef.current.focus()
  }

  return (
    <div>
      <input 
        ref={inputRef}
        value={name} 
        onChange={(e) => setName(e.target.value)} />
      <button onClick={focusInput}>FOCUS INPUT</button>
    </div>
  )
}

export default App;

Ao clicar no botão, o focus irá para o input

-----------

-Para guardar o valor anterior de um componente usando o useRef:

import { useState, useEffect, useRef } from "react";

const App = () => {
  const [name, setName] = usestate("");

  const nomeAntigo = useRef()

  useEffect(() => {
    nomeAntigo.current = name
  }, [name])

  return (
    <div>
      <input 
        value={name} 
        onChange={(e) => setName(e.target.value)} 
      />
      <p>Nome atual: {name}</p>
      <p>Nome antigo: {nomeAntigo.current}</p>
    </div>
  )
}

export default App;

--------------------------------- ###
VIDEO: https://www.youtube.com/embed/jPo0mIcNZfM?autoplay=1

Criando um cronometro usando useRef:

import React, {useState, useEffect, useRef} from 'react';

export default function App(){

    const [isRunning, setIsRunning] = useState(false);
    const [elapsedTime, setElapsedTime] = useState(0);
    const intervalIdRef = useRef(null);
    const startTimeRef = useRef(0);

    useEffect(() => {

        if(isRunning){
            intervalIdRef.current = setInterval(() => {
                setElapsedTime(Date.now() - startTimeRef.current);
            }, 10);
        }

        return () => {
            clearInterval(intervalIdRef.current);
        }
    }, [isRunning]);

    function start(){
        setIsRunning(true);
        startTimeRef.current = Date.now() - elapsedTime;
    }

    function stop(){
        setIsRunning(false);
    }

    function reset(){
        setElapsedTime(0);
        setIsRunning(false);
    }

    function formatTime(){

        let hours = Math.floor(elapsedTime / (1000 * 60 * 60));
        let minutes = Math.floor(elapsedTime / (1000 * 60) % 60);
        let seconds = Math.floor(elapsedTime / (1000) % 60);
        let milliseconds = Math.floor((elapsedTime % 1000) / 10);

        hours = String(hours).padStart(2, "0");
        minutes = String(minutes).padStart(2, "0");
        seconds = String(seconds).padStart(2, "0");
        milliseconds = String(milliseconds).padStart(2, "0");

        return `${minutes}:${seconds}:${milliseconds}`;
    }

    return(
        <div>
            <div>{formatTime()}</div>
            <div>
                <button onClick={start}>Start</button>
                <button onClick={stop}>Stop</button>
                <button onClick={reset}>Reset</button>
            </div>
        </div>
    );
}


////////////////////////////////////////////////////////////////&&&
HOOK: useReducer
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

O useReducer deve ser usado (ao invés do useState) quando o state for muito complexo/grande 

----------

import {useReducer} from 'react'

const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return {
        counter: state.counter + 1,
      }
    case "decrement":
      return {
        counter: state.counter - 1,
      }
    default:
      return state;
  }
}

const App = () => {
  const [state, dispatch] = useReducer(reducer, {counter: 0})

  return (
    <div>
      <p>{state.counter}</p>
      <button onClick={() => dispatch({type: "increment"})}>Increment</button>
      <button onClick={() => dispatch({type: "decrement"})}>Decrement</button>
    </div>
  )
}

export default App

--------------

import {useReducer} from 'react'

export default function App(){

  const initialState = {count: 0}

  const reducer = (state, action) => {
    switch(action.type) {
      case "Increase": {
        return {count: state.count + 1}
      }
      case "Decrease": {
        return {count: state.count - 1}
      }
      default: {
        return state;
      }
    }
  }

  const [state, dispatch] = useReducer(reducer, initialState)

  const Increase = () => {
    dispatch({type: "Increase"})
  }

  const Decrease = () => {
    dispatch(type: "Decrease")
  }

  return (
    <div>
      <h1>Contagem: {state.count}</h1>
      <button onClick={Increase}>Aumentar</button>
      <button onClick={Decrease}>Diminuir</button>
    </div>
  )
}

-Este código é o equivalente a:

import {useState} from 'react'

export default function App(){

  const [count, setCount] = useState(0)

  const Increase = () => {
    setCount(prev => prev + 1)
  }

  const Decrease = () => {
    setCount(prev => prev - 1)
  }

  return (
    <div>
      <h1>Contagem: {count}</h1>
      <button onClick={Increase}>Aumentar</button>
      <button onClick={Decrease}>Diminuir</button>
    </div>
  )
}


---------------------------------

import {useReducer, useState} from 'react'

const reducer = (state, action) => {
  switch (action.type) {
    case "add-task":
      return {
        tasks: [
          ...state.tasks,
          {name: action.payload, isCompleted: false},
        ],
      };
    default:
      return state;
  }
};

const App = () => {
  const [state, dispatch] = useReducer(reducer, { tasks: [] });

  const [inputValue, setInputValue] = useState("");

  return (
    <div>
      <input 
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <button 
        onClick={() => {
          dispatch({type: "add-task", payload: inputValue});
          setInputvalue("");
        }}
      >
        Adicionar
      </button>

      {state.tasks.map((task) => (
        <p>{task.name}<p>
      ))}
    </div>
  );
};

export default App;

----------

import {useReducer, useState} from 'react'

const reducer = (state, action) => {
  switch (action.type) {
    case "add-task":
      return {
        ...state,
        tasks: [...state.tasks, {name: action.payload, isCompleted: false},
        tasksCount: state.tasksCount + 1,
        ],
      };
    case "toggle-task":
      return {
        ...state,
        tasks: state.tasks.map((item, index) => 
          index === action.payload ? { ...item, isCompleted: !item.isCompleted } : item
        ),
      };
    default:
      return state;
  }
};

const App = () => {
  const [state, dispatch] = useReducer(reducer, { tasks: [], tasksCount: 0 });

  const [inputValue, setInputValue] = useState("");

  return (
    <div>
      <input 
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <button 
        onClick={() => {
          dispatch({type: "add-task", payload: inputValue});
          setInputvalue("");
        }}
      >
        Adicionar
      </button>

      {state.tasks.map((task, index) => (
        <p
          onClick={() => dispatch({ type: "toggle-task", payload: index })}
          style={{ textDecoration: task.isCompleted ? "line-through" : "none"}}
        >
          {task.name}
        <p>
      ))}
    </div>
  );
};

export default App;

------------------------------- ###
VIDEO: https://www.youtube.com/embed/MWSjt4ib9b8?autoplay=1

-Arquivo actions.js:

export const UPDATE_USERNAME_TYPE = 'UPDATE_USERNAME_TYPE'
export const UPDATE_PASSWORD_TYPE = 'UPDATE_PASSWORD_TYPE'
export const UPDATE_EMAIL_TYPE = 'UPDATE_EMAIL_TYPE'

¨¨¨¨
-Arquivo reducers.js:

import {UPDATE_USERNAME_TYPE, UPDATE_PASSWORD_TYPE, UPDATE_EMAIL_TYPE} from './actions'

export const initialUserState = {
  username: '',
  password: '',
  email: '',
}

function userReducer(state, action) {
  console.log(state);
  console.log(action);
  switch (action.type) {
    case UPDATE_USERNAME_TYPE: {
      //console.log("Updating username")
      const newState = { ...state };
      newState.username = action.value;
      return newState;
    }
    case UPDATE_PASSWORD_TYPE: {
      //console.log("Updating password")
      const newState = { ...state };
      newState.password = action.value;
      return newState;
    }
    case UPDATE_EMAIL_TYPE: {
      //console.log("Updating email")
      const newState = { ...state };
      newState.email = action.value;
      return newState;
    }
    default:
      return state;
  }
}

export default userReducer

¨¨¨¨
-Arquivo App.jsx:

import { useReducer } from 'react'
import userReducer from './reducers'

export default function App() {
  const [state, dispatch] = useReducer(userReducer, initialUserState)

  return(
    <>
      <p>Username: {state.username}</p>
      <p>Password: {state.password}</p>
      <p>Email: {state.email}</p>

      <input 
        placeholder="Digite o username"
        onChange={(e) => {
          dispatch({type: UPDATE_USERNAME_TYPE, value: e.target.value})
        }}
      />
      <input 
        placeholder="Digite a password"
        onChange={(e) => {
          dispatch({type: UPDATE_PASSWORD_TYPE, value: e.target.value})
        }}
      />
      <input 
        placeholder="Digite o email"
        onChange={(e) => {
          dispatch({type: UPDATE_EMAIL_TYPE, value: e.target.value})
        }}
      />
    </>
  )
}


////////////////////////////////////////////////////////////////&&&
HOOK: useContext

Usado para passar valores entre diferentes nivés de componentes sem usar props.

Usando 3 componentes para passar o valor do componente pai para o componente neto:
VIDEO: https://www.youtube.com/embed/FpNfvbNYPsg?autoplay=1

----------------- ###
FORMA ERRADA SEM USAR O USECONTEXT

Usando Prop drilling (passando valores até o componente no centro)
<ComponentePai>        //Cria o valor da variavel
  <ComponenteFilho>    //Recebe o valor do componente Pai
    <ComponenteNeto>   //Está no centro/dentro e recebe o valor do componente Filho

¨¨¨¨
-Arquivo ComponenteNeto.jsx:  (é quem usa o valor da variável)

export default function ComponenteNeto(props) {
  return (
    <div>
      <h1>{props.user}</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import ComponenteNeto from './ComponenteNeto'

export default function ComponenteFilho(props) {
  return (
    <div>
      <ComponenteNeto user={props.user} />
    </div>
  )
}

¨¨¨¨
-Arquivo ComponentePai.jsx:   (cria a variavel com o valor)

import {useState} from 'react'
import ComponenteFilho from './ComponenteFilho'

export default function ComponentePai() {

  const [user, setUser] = useState("Jorge")

  return (
    <div>
      <ComponenteFilho user={user}/>
    </div>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponentePai from './components/ComponentePai'

export default function App() {
  return (
    <>
      <ComponentePai />
    </>
  )
}

----------------- ###
FORMA CORRETA USANDO O USECONTEXT

-Arquivo ComponenteNeto.jsx:   (é quem usa o valor do contexto)

import {useContext} from 'react'
import {UserContext} from './ComponentePai'

export default function ComponenteNeto() {

  const user = useContext(UserContext)

  return (
    <div>
      <h1>{user}</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:  (não é mais necessário para passar o valor através de props)

import ComponenteNeto from './ComponenteNeto'

export default function ComponenteFilho() {
  return (
    <div>
      <ComponenteNeto />
    </div>
  )
}

¨¨¨¨
-Arquivo ComponentePai.jsx:  (Cria o contexto e a variavel com o valor)

import {useState, createContext} from 'react'
import ComponenteFilho from './ComponenteFilho'

export const UserContext = createContext()

export default function ComponentePai() {

  const [user, setUser] = useState("Jorge")

  return (
    <div>
      <UserContext.Provider value={user}>               //OU <UserContext.Provider value="Jorge">
        <ComponenteFilho user={user}/>                  //OU <ComponenteNeto /> 
      </UserContext.Provider>
    </div>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponentePai from './components/ComponentePai'

export default function App() {
  return (
    <>
      <ComponentePai />
    </>
  )
}

---------------- ###

-Arquivo ComponentePai.jsx:

import {useState, createContext} from 'react'
import ComponenteFilho from './ComponenteFilho'

export const Contexto = createContext(null)

export default function ComponentePai() {

  const [estado, setEstado] = useState(true)

  return (
    <div>
      <Contexto.Provider value={estado}>
        <ComponenteFilho />
      </Contexto.Provider>
    </div>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import {useContext} from 'react'
import {Contexto} from './ComponentePai'

export default function ComponenteFilho() {
  const estado = useContext(Contexto)
  return (
    <div>
      <h1>{estado ? "ESTADO VERDADEIRO" : "ESTADO FALSO"}</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponentePai from './components/ComponentePai'

export default function App() {
  return (
    <>
      <ComponentePai />
    </>
  )
}

---------------- ###

-Arquivo ComponentePai.jsx:

import {createContext} from 'react'
import ComponenteFilho from './ComponenteFilho'

export const Contexto = createContext(null)

export default function ComponentePai() {

  return (
    <div>
      <Contexto.Provider value={true}>
        <ComponenteFilho />
      </Contexto.Provider>
    </div>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import {useState, useContext} from 'react'
import {Contexto} from './ComponentePai'

export default function ComponenteFilho() {
  const [estado, setEstado] = useState(useContext(Contexto))
  
  return (
    <div>
      <h1>{estado ? "ESTADO VERDADEIRO" : "ESTADO FALSO"}</h1>
      <button onClick={() => setEstado(!estado)}>ALTERAR ESTADO</button>
    </div>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponentePai from './components/ComponentePai'

export default function App() {
  return (
    <>
      <ComponentePai />
    </>
  )
}

--------------- ###
Passando apenas o valor através do contexto:

-Arquivo ComponentePai.jsx:

import { createContext } from 'react';

export const Contexto = createContext("Texto de exemplo");

¨¨¨¨
-Arquivo App.jsx:

import { useContext } from 'react';

import {Contexto} from './components/ComponentePai'

export default function App(){
  const txt = useContext(Contexto);
  return (
    <>
      <h1>{txt}</h1>
    </>
  )
};

------------------ ###
VALOR INICIAL E NOVO

-Arquivo ComponentePai.jsx:

import { createContext } from 'react';

export const Contexto = createContext("Valor inicial");

export default function ComponentePai({children}){
  return (
    <Contexto.Provider value={"Novo valor"}>
      {children}
    </Contexto.Provider>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import { useContext } from 'react';
import {Contexto} from './ComponentePai'

export default function ComponenteFilho(){
  const txt = useContext(Contexto)
  return (
    <h1>{txt}</h1>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponenteFilho from './components/ComponenteFilho'

export default function App(){
  return (
    <>
      <ComponenteFilho />
    </>
  )
};

>>> Valor inicial

--------------

-Arquivo ComponentePai.jsx:

import { createContext } from 'react';

export const Contexto = createContext("Valor inicial");

export default function ComponentePai({children}){
  return (
    <Contexto.Provider value={"Novo valor"}>
      {children}
    </Contexto.Provider>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import { useContext } from 'react';
import {Contexto} from './ComponentePai'

export default function ComponenteFilho(){
  const txt = useContext(Contexto)
  return (
    <h1>{txt}</h1>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponenteFilho from './components/ComponenteFilho'
import ComponentePai from './components/ComponentePai'

export default function App(){
  return (
    <>
      <ComponentePai>
        <ComponenteFilho />
      </ComponentePai>
    </>
  )
};

>>> Novo valor

-------------------

-Arquivo ComponentePai.jsx:

import { createContext, useContext, useState } from 'react';

export const Contexto = createContext("Valor inicial");

export default function ComponentePai({children}){
  const [txt, setTxt] = useState(useContext(Contexto))
  return (
    <>
      <input type="text"onChange={(e) => setTxt(e.target.value)} />
      <Contexto.Provider value={txt}>
        {children}
      </Contexto.Provider>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import { useContext } from 'react';
import {Contexto} from './ComponentePai'

export default function ComponenteFilho(){
  const txt = useContext(Contexto)
  return (
    <h1>{txt}</h1>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponenteFilho from './components/ComponenteFilho'
import ComponentePai from './components/ComponentePai'

export default function App(){
  return (
    <>
      <ComponentePai>
        <ComponenteFilho />
      </ComponentePai>
    </>
  )
};

>>> Iniciará com "Valor Inicial" e será alterado ao digitar algo no input

----------------- ###
CRIANDO UM VALOR GLOBAL COM USECONTEXT
VIDEO: https://www.youtube.com/embed/FzBGqvxdxv0?autoplay=1

-Arquivo ComponenteA.jsx:

import {useContext} from 'react'
import {Contexto} from '../App'

export default function ComponenteA() {
  const txt = useContext(Contexto)
  return (
    <div>
      <h1>{txt}: Conteúdo do Componente A</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo ComponenteB.jsx:

import {useContext} from 'react'
import {Contexto} from '../App'

export default function ComponenteB() {
  const txt = useContext(Contexto)
  return (
    <div>
      <h1>{txt}: Conteúdo do Componente B</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import {createContext} from 'react'
import ComponenteA from './components/ComponenteA'
import ComponenteB from './components/ComponenteB'

export const Contexto = createContext()

export default function App(){
  return (
    <>
      <Contexto.Provider value={"Titulo"}>
        <ComponenteA />
        <ComponenteB />
      </Contexto.Provider>
    </>
  )
}

----------------- ###

-Arquivo App.jsx:

import {createContext} from 'react'
import ComponenteA from './components/ComponenteA'
import ComponenteB from './components/ComponenteB'

export const Contexto = createContext(null)

export default function App(){
  return (
    <>
      <Contexto.Provider value={{titulo: 'Titulo', txt: 'Texto'}}>
        <ComponenteA />
        <ComponenteB />
      </Contexto.Provider>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA:

import {useContext} from 'react'
import {Contexto} from '../App'

export default function ComponenteA() {

  const {titulo, txt} = useContext(Contexto)

  return (
    <div>
      <h1>{titulo}: {txt} A</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo ComponenteB:

import {useContext} from 'react'
import {Contexto} from '../App'

export default function ComponenteB() {

  const {titulo, txt} = useContext(Contexto)

  return (
    <div>
      <h1>{titulo}: {txt} B</h1>
    </div>
  )
}


----------------- ###
Usando apenas dois componentes para simplificar:

-Arquivo ComponentePai.jsx:

import { createContext } from 'react';

export const Contexto = createContext({txt: "Texto de exemplo"});

export const ComponentePai = ({children}) => {
  return (
    <div>
      <Contexto.Provider>
        {children}
      </Contexto.Provider>
    </div>
  );
};

-Arquivo App.jsx:

import { useContext } from 'react';

import {Contexto} from './components/ComponentePai'

export default function App(){
  const {txt} = useContext(Contexto);
  return (
    <>
      <h1>{txt}</h1>
    </>
  )
};

>>> Texto de exemplo

------------------- ###

-Arquivo ComponentePai.jsx:

import { createContext } from 'react';

export const Contexto = createContext();

export default function ComponentePai({children}){
  
  return (
    <div>
      <Contexto.Provider value={"Texto de exemplo"}>
        {children}
      </Contexto.Provider>
    </div>
  )
};

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import {useContext} from 'react'

import {Contexto} from './ComponentePai'

export default function ComponenteFilho() {
  const txt = useContext(Contexto)
  return (
    <div>
      <h1>{txt}</h1>
    </div>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import ComponentePai from './components/ComponentePai'
import ComponenteFilho from './components/ComponenteFilho'

export default function App(){

  return (
    <>
      <ComponentePai>
        <ComponenteFilho />
      </ComponentePai>
    </>
  )
};

------------------ ###

-Arquivo Tema.jsx:

import React, { createContext } from 'react';

export const CorContext = createContext({cor: "red"});

export const Tema = ({children}) => {
  return (
    <div>
      <CorContext.Provider>
        {children}
      </CorContext.Provider>
    </div>
  );
};

¨¨¨¨
-Arquivo App.jsx:

import React, { useContext } from 'react';

import {CorContext} from './components/Tema'

export default function App(){
  const {cor} = useContext(CorContext);
  return (
    <>
      <h1 style={{color: cor}} >Texto na cor vermelha</h1>
    </>
  )
};

-------------------- ###

-Arquivo ComponentePai.jsx:

import { createContext, useState } from 'react';

export const Contexto = createContext({
  cor: "red",
  txt: "Texto",
});

export const ComponentePai = ({children}) => {
  const [cor, setCor] = useState("red");
  const [txt, setTxt] = useState("Texto");
  
  return (
    <Contexto.Provider value={{ cor, txt }}>
      {children}
    </Contexto.Provider>
  );
};

¨¨¨¨
-Arquivo ComponenteFilho.jsx:

import {useContext} from "react";
import {Contexto} from "./ComponentePai";

export const ComponenteFilho = () => {
  const {cor, txt} = useContext(Contexto);

  return (
    <>
      <div style={{color: cor}}>
        <h2>{txt}</h2>
      </div>
    </>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import {ComponentePai} from './components/ComponentePai'
import {ComponenteFilho} from './components/ComponenteFilho'

export default function App(){
  return (
    <>
      <ComponentePai>
        <ComponenteFilho />
      </ComponentePai>
    </>
  )
};

---------------------- ### 
USANDO O REACT-ROUTER PROVIDER COM USECONTEXT

-Arquivo Contato.jsx:

export default function Contato() {                        
  return (
    <div className="contato">  
      <p>Conteúdo da página Contato</p>
    </div>
  )
}

¨¨¨¨
-Arquivo Home.jsx:

export default function Home() {
  
  return (
    <div className="home">  
      <p>Conteúdo da página Home</p>
    </div>
  )
}

¨¨¨¨
-Arquivo Navbar.jsx:

export default function Navbar() {
  return (
    <nav>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/contato">Contato</Link>
        </li>
      </ul>
    </nav>
  )
}


¨¨¨¨
-Arquivo main.jsx:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

import {createBrowserRouter, RouterProvider} from 'react-router-dom'
import Home from './routes/Home.jsx'
import Contato from './routes/Contato.jsx'

const router = createBrowserRouter(
  {
    path: "/",
    element: <App />,
    children: [
      {path: "/", element: <Home />},
      {path: "/contato", element: <Contato />},
    ]
  }
)

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>,
)

¨¨¨¨
-Arquivo App.jsx:

import './App.css'
import {Outlet} from 'react-router-dom'
import Navbar from "./components/Navbar"

export default function App(){
  return(
    <div className="App">
      <Navbar />
      <Outlet />
    </>
  )
}

-------------------------------------
Adicionando o useContext:

-Arquivo ThemeContext.jsx:    (Componente Pai)

import { createContext, useState } from 'react'

export const ThemeContext = createContext()

export const ThemeProvider = ({children}) => {

  const [theme, setTheme] = useState("light") 

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light")                  
  }

  return (
    <ThemeContext.Provider value={{theme, toggleTheme}}>
      {children}
    </ThemeContext.Provider>
  )
}

¨¨¨¨
-Adicionando o contexto criado ao arquivo main.jsx:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

import {createBrowserRouter, RouterProvider} from 'react-router-dom'
import Home from './routes/Home.jsx'
import Contato from './routes/Contato.jsx'
import {ThemeProvider} from './context/ThemeContext.jsx'

const router = createBrowserRouter(
  {
    path: "/",
    element: <App />,
    children: [
      {path: "/", element: <Home />},
      {path: "/contato", element: <Contato />},
    ]
  }
)

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <ThemeProvider>
      <RouterProvider router={router} />
    </ThemeProvider>
  </StrictMode>,
)

¨¨¨¨
Criando um tema escuro no CSS:

-Arquivo App.css:

.dark-theme, .dark-theme a {
  background-color: #333;
  color: #fff;
}


¨¨¨¨
Adicionando o contexto ao App:

-Arquivo App.jsx:

import './App.css'
import {Outlet} from 'react-router-dom'
import Navbar from "./components/Navbar"
import {useContext} from "react"
import {ThemeContext} from "./context/ThemeContext"

export default function App(){
  const {theme} = useContext(ThemeContext)
  return(
    <div className={`App ${theme === "dark" ? "dark-theme" : ""}`}>
      <Navbar />
      <Outlet />
    </>
  )
}

¨¨¨¨
-Adicionando o contexto na página Home e Contato:

-Arquivo Contato.jsx:

import {useContext} from 'react'
import {ThemeContext} from '../context/ThemeContext'

export default function Contato() {             
  const {theme, toggleTheme} = useContext(ThemeContext)

  return (
    <div className="contato">  
      <p>Conteúdo da página Contato. Tema atual: {theme}</p>
      <button onClick={toggleTheme}>Mudar tema<button>
    </div>
  )
}

¨¨¨¨
-Arquivo Home.jsx:

import {useContext} from 'react'
import {ThemeContext} from '../context/ThemeContext'

export default function Home() {
  const {theme, toggleTheme} = useContext(ThemeContext)

  return (
    <div className="home">  
      <p>Conteúdo da página Home. Tema atual: {theme}</p>
      <button onClick={toggleTheme}>Mudar tema<button>
    </div>
  )
}

OBS: Ao atualizar a página, o contexto voltará a ser o inicial. Para evitar que isso aconteça, seria necessário armazenar a mudança no local storage (ou cookies).

--------------------- ###
useContext com Funções vs Classes

VIDEO: https://www.youtube.com/embed/5LrDIWkK_Bc?autoplay=1

-Arquivo App.jsx:

import {useState} from 'react'
import FunctionContext from './FunctionContext'
import ClassContext from './ClassContext'

export const ThemeContext = createContext()

export default function App() {
  const [darkTheme, setDarkTheme] = useState(true)

  function toggleTheme() {
    setDarkTheme(prevTheme => !prevTheme)
  }

  return (
    <>
      <ThemeContext.Provider value={darkTheme}>
        <button onClick={toggleTheme}>Toogle</button>
        <FunctionContext />
        <ClassContext />
      </ThemeContext.Provider>
    </>
  )
}

¨¨¨¨
-Arquivo FunctionContext.jsx:

import {useContext} from 'react'
import {ThemeContext} from './App'

export default function FunctionComponent() {

  const darkTheme = useContext(ThemeContext)

  const themeStyles = {
    backgroundColor: darkTheme ? '#333' : '#CCC',
    color: darkTheme ? '#CCC' : '#333',    
  }

  return (
    <div style={themeStyles}>Function Theme</div>
  )
}


¨¨¨¨
-Arquivo ClassContext.jsx:

import {Component} from 'react'
import {ThemeContext} from './App'

export default class ClassContext extends Component {

  themestyles(dark) {
    return {
      backgroundColor: dark ? '#333' : '#CCC',
      color: dark ? '#CCC' : '#333',
    }
  }

  render() {
    return (
      <ThemeContext>
        {darkTheme => {
          return (
            <div style={this.themeStyles(darkTheme)}>
              Class Theme
            </div>
          )
        }}
      </ThemeContext>
    )
  }
}

------------------------ 
Separando o contexto em um arquivo próprio
(Forma desnecessariamente complicada)

-Arquivo ThemeContext.jsx:

import {createContext, useState} from 'react'

const ThemeContext = createContext()
const ThemeUpdateContext = createContext()

export function useTheme() {
  return useContext(ThemeContext)
}

export function useUpdateTheme() {
  return useContext(ThemeUpdateContext)
}

export function ThemeProvider({children}){
  const [darkTheme, setDarkTheme] = useState(true)

  function toggleTheme() {
    setDarkTheme(prevTheme => !prevTheme)
  }

  return (
    <ThemeContext.Provider value={darkTheme}>
      <ThemeUpdateContext.Provider value={toggleTheme}>
        {children}
      </ThemeUpdateContext>
    </ThemeContext.Provider>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import FunctionContext from './FunctionContext'
import ClassContext from './ClassContext'
import {ThemeProvider} from './ThemeContext'

export default function App() {
  return (
    <ThemeProvider>
      <FunctionContext />
    </ThemeProvider>
  )
}

¨¨¨¨
-Arquivo FunctionContext.jsx:

import {useTheme, useThemeUpdate} from './ThemeContext'

export default function FunctionComponent() {

  const darkTheme = useTheme()
  const toggleTheme = useThemeUpdate()

  const themeStyles = {
    backgroundColor: darkTheme ? '#333' : '#CCC',
    color: darkTheme ? '#CCC' : '#333',    
  }

  return (
    <>
      <button onClick={toggleTheme}>Toogle</button>
      <div style={themeStyles}>Function Theme</div>
    </>
  )
}

-------------------------- 
Forma mais fácil:

-Arquivo ComponentePai.jsx:   (ThemeContext.jsx)

import { createContext, useState } from 'react';

export const Contexto = createContext();

export const ComponentePai = ({children}) => {
  const [theme, setTheme] = useState(true);

  const toggleTheme = () => {
    setTheme(!theme);
  }

  return (
    <Contexto.Provider value={{ theme, toggleTheme }}>
      {children}
    </Contexto.Provider>
  );
};

¨¨¨¨
-Arquivo ComponenteFilho.jsx:      (FunctionContext.jsx)

import {useContext} from "react";
import {Contexto} from "./ComponentePai";

export const ComponenteFilho = () => {
  const {theme, toggleTheme} = useContext(Contexto)

  const themeStyles = {
    backgroundColor: theme ? 'white' : 'black',
    color: theme ? 'black' : 'white',    
  }

  return (
    <>
      <button onClick={toggleTheme}>Toogle</button>
      <div style={themeStyles}>
        <h1>Texto de exemplo</h1>
      </div>
    </>
  )
}

¨¨¨¨

-Arquivo App.jsx:

import {ComponentePai} from './components/ComponentePai'
import {ComponenteFilho} from './components/ComponenteFilho'

export default function App(){
  return (
    <>
      <ComponentePai>
        <ComponenteFilho />
      </ComponentePai>
    </>
  )
};

----------------------- ###
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

-No arquivo theme-context.js:

import {useState, createContext} from 'react'

export const ThemeContext = createContext({
  theme: "light",
  toggleTheme: () => {},
});

const ThemeContextProvider = ({children}) => {
  const [theme, setTheme] = useState("light");

  const toggleTheme = () => {
    if (theme === "light") {
      return setTheme("dark");
    }
    return setTheme("light");
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export default ThemeContextProvider;

-No arquivo Pagina1.js:

import {useContext} from "react";
import {ThemeContext} from "./contexts/theme-context";

const Pagina1 = () => {
  const {theme, toggleTheme} = useContext(ThemeContext);

  return (
    <>
      <div
        style={{
          padding: 20,
          borderRadius: 10,
          backgroundColor: theme === "light" ? "#eee" : "#333",
          color: theme === "dark" ? "#eee" : "#333",
        }}
      >
        <h1>Current theme: {theme}</h1>
        <button onClick{() => toggleTheme()}>Toggle Theme</button>
      </div>
    </>
  )
}

export default Pagina1;


-No arquivo App.js:

import ThemeContextProvider from "./contexts/theme-context";
import Pagina1 from "./Pagina1";

const App = () => {
  return (
    <ThemeContextProvider>
      <Pagina1 />
    </ThemeContextProvider>
  );
};

export default App;


////////////////////////////////////////////////////////////////&&&
HOOK: UseMemo
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

Para otimizar a performance da aplicação, o useMemo pode ser usado para guardar o valor na memória. 
Bem útil para alguma função que esteja dando problema por ser lenta ou estar travando a aplicação e sendo chamada sem haver nenhuma alteração em seu valor.

import {useState, useMemo} from 'react';

const App = () => {
  const [number, setNumber] = useState(1);
  const [text, setText] = useState("");

  const doubleNumber = useMemo(() => {
    return slowFunction(number);
  }, [number]);

  return (
    <>
      <p>{number}</p>
      <input value={text} onChange={(e) => setText(e.target.value)} />
      <button onClick={() => setNumber(2)}>Increment</button>
      <p>text: {text}</p>
    </>
  );
};

const slowFunction = (num) => {
  console.log("Slow function is being called!");
  for (let i = 0; i <= 10000; i++) {}
  return num * 2;
};

export default App;

////////////////////////////////////////////////////////////////&&&
HOOK: useCallback
VIDEO: https://www.youtube.com/embed/MA3Ngo32qiI?autoplay=1

Assim como o useMemo, é usado para otimizar a aplicação. Ele guarda uma função na memoria que somente será recriada caso algum elemento definido seja alterado.
useCallback = guarda a função em si
useMemo = guarda o retorno da função

-No arquivo List.js:

import {useEffect, useState} from "react";

const List = ({getItems}) => {
  const [items, setItems] = useState([]);

  useEffect(() => {
    getItems().then((result) => setItems(result));
  }, [getItems]);

  return (
    <>
      {items && 
        items.map((item) => 
          <p key={item.id}>
            {item?.title || item?.name}
          </p>
        )
      }
    </>
  );
};

export default List;


-No arquivo App.js:

import {useState} from 'react'
import List from "./List";

const App = () => {
  const [text, setText] = useState("");
  const [resourceType, setResourceType] = useState("posts");

  const getItems = useCallback(
    async (number) => {
      console.log("getItems is being called!")
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/${resourceType}`
      );
      const responseJSON = await response.json();

      return responseJSON;
    },
    [resourceType]              //Função só será recriada se houver alteração em resourceType
  );

  return (
    <div>
      <input value={text} onChange={(e) => setText(e.target.value)} />

      <button onClick-{() => setResourceType("posts")}>Posts</button>
      <button onClick-{() => setResourceType("comments")}>Comments</button>
      <button onClick-{() => setResourceType("todos")}>Todos</button>

      <List getItems={getItems} />
    </div>
  );
};



/////////////////////////////////////////////////////////////// &&&
RENDERIZAÇÃO CONDICIONAL NO REACT:
VIDEO: https://www.youtube.com/embed/ERflhpiMc1o

{condição && verdadeiro}

import {useState} from 'react'

export default function Teste(){
  const [user, setUser] = useState('admin')

  return (
    <>
      {user === 'admin' && <p>Usuário é o admin</p>}
    </>
  )
}

---

Outra forma:

  return (
    <>
      <p>{user === 'admin' && "Usuário é o admin"}</p>
    </>
  )


----

Outra forma com null para condição falsa:

import {useState} from 'react'

export default function Teste(){
  const [user, setUser] = useState('admin')

  return (
    <>
      {user === 'admin' && <p>Usuário é o admin</p> : null}
    </>
  )
}

-------

Para mais de 1 tag:

import {useState} from 'react'

export default function Teste(){
  const [user, setUser] = useState('admin')

  return (
    <>
      {user === 'admin' && (
        <h1>Status</h1>
        <p>Usuário é o admin</p>
      )}
    </>
  )
}


---------------------- ###

-Renderização Condicional com operador ternario
{condição ? verdadeiro : falso}

import {useState} from 'react'

export default function Teste(){
  const [user, setUser] = useState('admin')

  return (
    <>
      {user === 'admin' ? <p>Usuário é o admin</p> : <p>Não é o admin</p>}
    </>
  )
}

----

import React, {useState} from 'react'

export default function Teste(){
  const [logado, setLogado] = useState(true)
  return (
    <div>
      {logado ? <p>Usuário está logado</p> : <p>Usuário não está logado</p>}
    </div>
  )
}


Caso tenha mais de 1 tag:

...
      {logado ? (
        <h1>Status:</h1>
        <p>Usuário está logado</p>
      ) : (
        <h1>Status</h1>
        <p>Usuário não está logado</p>
      )}
...

------------

Condicional com botões:

...
const [logado, setLogado] = useState(false)
...
<button type="submit">
  {logado ? 'LOGADO' : 'DESLOGADO'}
</button>
...

-----------

Condicional com cores:

...
const [mensagem, setMensagem] = useState('');
const [resultSubmit, setResultSubmit] = useState('');
...
const onSubmit = async (values) => {
    try {
      const response = await axios.post('http://localhost:3000/cadastro', values);
      setMensagem("Deu certo");
      setResultSubmit('success');
      reset();
    } catch (error) {
      setMensagem('Erro ao cadastrar usuário');
      setResultSubmit('error');
    }
  };
...
{mensagem && (
  <div style={{ color: resultSubmit === 'success' ? 'green' : 'red' }}>
    {mensagem}
  </div>
)}
...

---------------------------------------------- ###
VIDEO: https://www.youtube.com/embed/CgkZ7MvWUAA

-Arquivo Pessoa.jsx:

export default function Pessoa(props) {

	return (
		<>
			{props.casada && <p>{props.nome}</p>}              //OU  {props.casada ? <p>{props.nome}</p> : ""}
		</>
	);
}

¨¨¨¨
-Arquivo App.jsx:

import Pessoa from './components/Pessoa'

export default function App() {

	return (
		<>
			<Pessoa nome="Maria" casada={true} />
		</>
	);
}

------------%%%

-Arquivo Pessoa.jsx:

export default function Pessoa(props) {
  if (props.status) {
    return <p>Bem vindo(a), {props.nome}.</p>
  } else {
    return <p>Por favor, faça o login.</p>
  }
}

OU

export default function Pessoa(props) {
    return (
      props.status ? <p>Bem vindo(a), {props.nome}</p> : <p>Por favor, faça o login</p>
    )
}

OU

export default function Pessoa(props) {
    return (
      <p>{props.status ? `Bem vindo(a), ${props.nome}` : "Por favor, faça o login"}</p>
    )
}

¨¨¨¨
-Arquivo App.jsx:

import Pessoa from './components/Pessoa'

export default function App() {

	return (
		<>
			<Pessoa nome="Maria" status={true} />
		</>
	);
}

------------%%%

-Arquivo Tarefa.jsx:

export default function Tarefa(props) {
  return(
    <>
      {props.status 
      ? 
        <h3 style={{color: "green"}}>{props.nome} já foi realizado</h3>
      :
        <h3 style={{color: "red"}}>{props.nome} não foi realizado</h3>
      }
    </>
  )
}

¨¨¨¨
-Arquivo App.jsx:

import Terefa from './components/Tarefa'

export default function App() {

	return (
		<>
			<Tarefa nome="Estudar React" status={true} />
		</>
	);
}

-------------------- ###
VIDEO: https://www.youtube.com/embed/lanKyPZQG_4?autoplay=1


Exemplo 1:

import React from 'react'

export default function App() {

	const cumprimento = () => {
		const hora = new Date().getHours()
		if(hora >= 0 && hora < 13) {
			return <p>Bom dia</p>
		}
		else if(hora >=13 && hora < 18){
			return <p>Boa tarde</p>
		}
		else{
			return <p>Boa noite</p>
		}
	}

	return (
		<>
			{cumprimento()}
		</>
	);
}

Com isso, dependendo da hora do sistema ele apresentaráum texto diferente.

--------------

Exemplo 2:

import React,{useState} from 'react'

export default function App() {

	const [log , setLog] = useState(false)
	
	const msglogin = () => {
		return 'Usuário Logado'
	}

	const msglogoff = () => {
		return 'Faça o login'
	}

	return (
		<>
			<p>{log ? msglogin() : msglogoff()}</p>

			<button onClick = { () => setLog(!log)}> 
				{ log ? 'Logoff' : 'Login' } 
			</button> 
		</>
	);
}

----------------

Exemplo 3:

import React,{useState} from 'react'

export default function App() {

	const [cor, setCor] = useState(1)
	
	const vermelho = {color: 'red'}
	const verde = {color: 'green'}
	const azul = {color: 'blue'}
	
	const voltaCor = (c) =>{
		if(c == 1) {
			return vermelho
		}
		else if (c == 2){
			return verde
		}
		else{
			return azul
		}
	}
	
	const mudaCor = () => {
		setCor(cor+1)
		if(cor > 2) {
			setCor(1)
		}
	}

	return (
		<>
			<h1 style = {voltaCor(cor)}>TEXTO</h1>
			<button onClick={() => mudaCor()}>Muda Cor</button>
		</>
	);
}

Com isso ao clicar no botão a cordo texto muda.

Caso queira que a cor seja mudada automaticamente com o passar dos segundos:

import React,{useState} from 'react'

export default function App() {

	const [cor, setCor] = useState(1)
	
	const vermelho = {color: 'red'}
	const verde = {color: 'green'}
	const azul = {color: 'blue'}
	
	const voltaCor = (c) =>{
		if(c == 1) {
			return vermelho
		}
		else if (c == 2){
			return verde
		}
		else{
			return azul
		}
	}
	
	const mudaCor = () => {
		setCor(cor+1)
		if(cor > 2) {
			setCor(1)
		}
	}
	
	setInterval(mudaCor, 1000)        /* adicione um setInterval */

	return (
		<>
			<h1 style = {voltaCor(cor)}>TEXTO</h1>
			<button onClick={() => mudaCor()}>Muda Cor</button>
		</>
	);
}

--------------------------------- ###
Condicional com arrays

-Usando operador ternário:

export default function App() {

  const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  return (
    <>
      {pessoas.length > 0                      //Se a lista não estiver vazia
        ? 
        pessoas.map(pessoa => (
          <div key={pessoa.id}>                     
            <p>Nome: {pessoa.nome}</p>
          </div>
        ))
        :
          <p>Nenhuma pessoa encontrada</p>            //Ou null
      }
    </>
  );
}

------- %%%

-Usando short-circuit:

-Arquivo Pessoas.jsx:

export default function Pessoas(props) {

  const ListaPessoas = props.pessoas

  return (
    <>
      {ListaPessoas.map(pessoa => (
        <div key={pessoa.id}>                     
          <p>Nome: {pessoa.nome}</p>
        </div>
      ))}
    </>
  );
}

¨¨¨¨¨
-Arquivo App.jsx:

import Pessoas from './components/Pessoas'

export default function App() {

  const pessoas = [                                    
    {id: 1, nome: "Renato", sexo: "Masculino", idade: "31"},
    {id: 2, nome: "Maria", sexo: "Feminino", idade: "24"},
    {id: 3, nome: "Valter", sexo: "Masculino", idade: "36"}
  ];

  const numeros = []                       //Array vazio

  return (
    <>
      {pessoas.length > 0 && 
        <Pessoas pessoas={pessoas} />
      }
      
      {numeros.length > 0 &&               //Não será mostrado pois o array está vazio
        <p>{numeros}</p>
      }
    </>
  );
}


////////////////////////////////////////////////////////////////&&&
MAP EM LISTAS
VIDEO: https://www.youtube.com/embed/ERflhpiMc1o


import React from 'react';

export default function App() {

  const users = [
    {id: 1, nome: "Ana"},
    {id: 2, nome: "Bia"},
    {id: 3, nome: "Carlos"},
  ] 

  return (
    <>
      <div>
        <ul>
          {users.map((user) => (
            <li key={user.id}>
              {user.nome}
            </li>
          ))}
        </ul>
      </div>
    </>
  );
}

////////////////////////////////////////////////////////////////&&&
CSS NO REACT

MODO CSS INLINE (não recomendado):

-Arquivo estilos.jsx:

export default function Estilos() {

  const inline = {
    color: "red",
    fontSize: "20px",
  }

  return (
    <>
      <p styles={inline}>TEXTO</p>
    </>
  );
}


-Arquivo App.jsx:

import Estilos from './components/estilos'

export default function App() {

  return (
    <>
      <Estilos />
    </>
  );
}

----------

MODO CSS EXTERNO: (pode haver vazamento para elementos filhos)

-Arquivo estilos.css:

.txt {
  color: red;
  font-size: 20px;
}



-Arquivo App.jsx:

import './components/estilos.css'

export default function App() {

  return (
    <>
      <p className="txt">TEXTO</p>
    </>
  );
}

------------

MODO CSS MODULES: (forma mais indicada)

-Arquivo estilos.module.css:

.txt {
  color: red;
  font-size: 20px;
}


-Arquivo App.css:

import styles from './components/estilos.module.css'

export default function App() {

  return (
    <>
      <p className={styles.txt}>TEXTO</p>
    </>
  );
}

/////////////////////////////////////////////////////////////// &&&
CSS COM STYLED COMPONENTS

instalação:
npm install styled-components

importar:
import styled from 'styled-components'

----- ###

Exemplo:

import styled from 'styled-components'

  const Texto = styled.h1`
    color: red;
    font-size: 2rem;
  `;

export default function App() {

  return (
    <div>
      <Texto>TEXTO DE EXEMPLO NA TAG H1</Texto>
    </div>
  )

}

------- ###

Exemplo ao exportar:

-Arquivo Estilo.jsx:

import styled from 'styled-components'

const Texto = styled.h1`               
  color: blue;
  font-size: 2rem;
`;

export default Texto;

-Arquivo App.jsx:

import Texto from './styles/Estilo'

export default function App() {

  return (
    <div>
      <Texto>TEXTO DE EXEMPLO</Texto>
    </div>
  )

}

---- ###

Outra forma:

-Arquivo Estilo.jsx:

import styled from 'styled-components'

export const Texto = styled.h1`               
  color: blue;
  font-size: 2rem;
`;

-Arquivo App.jsx:

import {Texto} from './styles/Estilo'

export default function App() {

  return (
    <div>
      <Texto>TEXTO DE EXEMPLO</Texto>
    </div>
  )

}

----- ###

Para exportar mais de 1 estilo:

-Arquivo Estilo.jsx:

import styled from 'styled-components'

export const Titulo = styled.h1`               
  color: blue;
  font-size: 2rem;
`;

export const Texto = styled.p`               
  color: red;
  font-size: 1rem;
`;

-Arquivo App.jsx:

import {Titulo, Texto} from './styles/Estilo'

export default function App() {

  return (
    <div>
      <Titulo>TEXTO DO TITULO</Titulo> 
      <Texto>TEXTO DE EXEMPLO</Texto>
    </div>
  )

}

----- ###

Para exportar mais de 1 estilo de forma resumida:

-Arquivo Estilo.jsx:

import styled from 'styled-components'

const styles = {
  Titulo: styled.h1`                     //OBS: dois pontos (:) e não igual (=)
    color: red;
    font-size: 2rem;
  `,
  Texto: styled.p`
    color: blue;
    font-size: 1rem;
  `,
}

export default styles;

-Arquivo App.jsx:

import styles from './styles/Estilo'

export default function App() {

  return (
    <div>
      <styles.Titulo>CONTEÚDO DO TITULO</styles.Titulo>
      <styles.Texto>Conteúdo do parágrafo</styles.Texto>
    </div>
  )

}

----------- ###

Para criar um componente que herda o estilo de outro:

import styled from 'styled-components'

const Titulo = styled.h1`               
  color: blue;
  font-size: 2rem;
  font-family: sans-serif;
  font-weight: bold;
`;

const Titulo2 = styled(Titulo)`               
  color: red;
`;

export default function App() {

  return (
    <div>
      <Titulo>TITULO AZUL</Titulo> 
      <Titulo2>TITULO VERMELHO</Titulo2>
    </div>
  )

}

-------- ###

É possível colocar a tag desta forma também:

import styled from 'styled-components'

const Titulo = styled("h1")`               
  color: blue;
  font-size: 2rem;
  font-family: sans-serif;
  font-weight: bold;
`;

export default function App() {

  return (
    <div>
      <Titulo>TITULO AZUL</Titulo> 
    </div>
  )

}

------------------------ ###

CRiando um estilo global:

-Arquivo GlobalStyled.jsx:

import { createGlobalStyle } from 'styled-components';

export const GlobalStyled = createGlobalStyle`

  import url('https://fonts.googleapis.com/url_da_font...');

  * {
    margin: 0;
    padding: 0;
    font-family: Poppins, sans-serif;
  }

  html {
    width: auto;
  }

  body {
    max-width: 100vw;
    height: 100vh;
    background-color: #f5f5f5;
  }

`;

-Arquivo App.jsx:

import {GlobalStyled} from "./GlobalStyled";
import Header from "./components/Header"
import Footer from "./components/Footer"
import Hero from "./sections/Hero"

export default function App() {
  return (
    <>
      <GlobalStyled />
      <Header />
      <Hero />
      <Footer />
    </>
  )
}

OBS: Tudo que estiver abaixo da tag GlobalStyled receberá os estilos dentro do arquivo GlobalStyled.jsx

////////////////////////////////////////////////////////////// &&&
ESTRUTURA DE PASTAS NO REACT
VIDEO: https://www.youtube.com/embed/UUga4-z7b6s?autoplay=1

projeto
  public
    favicon.svg
  src
    assets
      global.css
      icons
      images
      fonts
    components
      sections
        Navbar.jsx / Header.jsx            
        Aside.jsx
        Menu.jsx
        Footer.jsx
      form
        FormInput.js
        FormSelect.js
        RadioButton.js
        Checkbox.js
      ui
        Button.js
        Cart.js
        Modal.js
        Card.js
        Dropdown.js
        TodoForm.js
        TodoItem.js
        TodoList.js
      pages
        Post  
          Body.jsx
          index.jsx
          Tags.jsx
          Title.jsx
        Home
          Hero.jsx
          About.jsx
          index.jsx
          Contact.jsx
          Testimonials.jsx
          Prices.jsx
        404
          404.jsx
        Login
        settings
        Signup
      hooks
        useCart.js
        useFetch.js
        useLocalStorage.js
        useLogin.js
        useSignup.js
        useVerifyPassword.js
      services                       //conexão com APIs
        menuService.js
        analytics.js
      utils                   //funções que não se encaixam em hooks
      data
        usuarios.json
        produtos.json
        arquivos.json
        constants.js
        configValues.json
        defaultTodos.json
      context
        AuthContext.js
      layouts                 //opcional
      lib                     //fetch, axios e outras bibliotecas
    app.css
    app.jsx
    index.jsx
    main.jsx
  index.html
  package.json
  .gitignore


Outra forma: (mais avançado)

src
  ...
  features
    authentication
      components
        __tests__
        LoginForm.js
        SignupForm.js
      hooks
        __tests__
        useLogin.js
        useSignup.js
        useVerifyPassword.js
      services
        __tests__
        getUser.js
        login.js
        signup.js
      index.js
    projects
      components
      services
      index.js
    settings
      components
      context
      hooks
      services
      index.js
    todos
      assets
      components
      context
      services
      index.js
  pages
    Home.jsx
    Login.jsx
    Products.jsx
    Settings.jsx
    Signup.jsx


---------------

Estrutura de uma landing page:

my-landing-page/
├── public/
│   ├── index.html
│   └── ... (other static assets like images)
└── src/
    ├── components/
    │   ├── Header/
    │   │   ├── Header.jsx
    │   │   └── Header.css
    │   ├── Footer/
    │   │   ├── Footer.jsx
    │   │   └── Footer.css
    │   └── Button/
    │       ├── Button.jsx
    │       └── Button.css
    ├── pages/
    │   ├── HomePage/
    │   │   ├── HomePage.jsx
    │   │   └── HomePage.css
    │   └── AboutPage/
    │       ├── AboutPage.jsx
    │       └── AboutPage.css
    ├── services/
    │   └── api.js
    ├── utils/
    │   ├── helpers.js
    │   └── constants.js
    ├── assets/
    │   ├── images/
    │   │   └── logo.png
    │   └── fonts/
    │       └── ...
    ├── App.js
    ├── index.js
    └── index.css

/////////////////////////////////////////////////////////////////// &&&
COMPONENTES REUSÁVEIS / REUTILIZAVEIS

BOTÃO

-Arquivo Botao.jsx:

export default function Botao({ label, onClick, estilo }) {
  return (
    <button className={estilo} onClick={onClick}>
      {label}
    </button>
  );
}

-Arquivo App.jsx:

import Botao from './Botao';

export default function App() {

  const handleClick = () => {
    alert('Botão clicado!');
  };

  return (
    <div>
      <Botao label="Clique Aqui" onClick={handleClick} estilo="botao-primario" />
    </div>
  );
}

////////////////////////////////////////////////////////////////&&&
ARMAZENANDO COOKIES COM JS-COOKIES
VIDEO: 

Cookie da forma tradicional: (Não indicado)

Criar cookie:
document.cookie = "nome_do_cookie = valor_do_cookie; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/";

Deletar cookie:
document.cookie = nome_do_cookie + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';

path=/    Define o caminho para o qual o cookie é válido. Então só aparecerá, por exemplo, na url https://localhost:3000/

Exemplo:

export default function App() {

  const saveCookie = () => {
    document.cookie = "biscoito=chocolate; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/";
  }

  const getCookie = (name) => {
     const cookieString = document.cookie;
     const cookies = cookieString.split(';');
     for (let i = 0; i < cookies.length; i++) {
       const cookie = cookies[i].trim();
       if (cookie.startsWith(name + '=')) {
         alert(cookie.substring(name.length + 1));
       }
     }
     return null;
   }

  const removeCookie = (name) => {
     document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
  }

  return (
    <div>
      <button onClick={saveCookie}>SALVAR COOKIE</button>
      <button onClick={() => getCookie("biscoito")}>LER COOKIE</button>
      <button onClick={() => removeCookie("biscoito")}>DELETAR COOKIE</button>
    </div>
  )

}

--------------- ###

COOKIES COM JS-COOKIE

instalação:
npm install js-cookie

importar:
import Cookies from 'js-cookie';


Criar cookie:   Cookies.set(name, value, options)
Cookies.set('nomeDoCookie', 'valorDoCookie', { expires: 7, path: '/' });      // Expira em 7 dias

Ler cookie:    Cookies.get(name)
const meuCookie = Cookies.get('nomeDoCookie');

Deletar cookie:    Cookies.remove(name, options)
Cookies.remove('nomeDoCookie', { path: '/' });

----- ###

Exemplo:

import Cookies from 'js-cookie';

export default function App() {

  const saveCookie = () => {
    Cookies.set('biscoito', 'chocolate', { expires: 7, path: '/' });
  }

  const getCookie = (name) => {
    const meuCookie = Cookies.get('biscoito');
    alert(meuCookie);
  }

  const removeCookie = (name) => {
     Cookies.remove('biscoito', { path: '/' });
  }

  return (
    <div>
      <button onClick={saveCookie}>SALVAR COOKIE</button>
      <button onClick={() => getCookie("biscoito")}>LER COOKIE</button>
      <button onClick={() => removeCookie("biscoito")}>DELETAR COOKIE</button>
    </div>
  )

}

-------- ###

import Cookies from 'js-cookie';
import {useState} from 'react'

export default function App() {

  const [cookieName, setCookieName] = useState('')
  const [cookieValor, setCookieValor] = useState('')

  const saveCookie = () => {
    Cookies.set(cookieName, cookieValor, { expires: 7, path: '/' });
  }

  const getCookie = () => {
    const meuCookie = Cookies.get(cookieName);
    alert(meuCookie);
  }

  const removeCookie = () => {
     Cookies.remove(cookieName, { path: '/' });
  }

  return (
    <div>
      <input onChange={(e) => setCookieName(e.target.value)}></input>
      <input onChange={(e) => setCookieValor(e.target.value)}></input>
      <button onClick={saveCookie}>SALVAR COOKIE</button>
      <button onClick={getCookie}>LER COOKIE</button>
      <button onClick={removeCookie}>DELETAR COOKIE</button>
    </div>
  )

}

------ ###

import Cookies from 'js-cookie';
import {useState} from 'react'

export default function App() {

  const [user, setUser] = useState('')
  const [password, setPassword] = useState('')

  const saveCookie = () => {
    Cookies.set("Login",`${user}=${password}`, { expires: 7, path: '/' });
  }

  return (
    <div>
      <input onChange={(e) => setUser(e.target.value)} placeholder='Digite o username'></input>
      <input onChange={(e) => setPassword(e.target.value)} placeholder='Digite a senha'></input>
      <button onClick={saveCookie}>SALVAR COOKIE</button>
    </div>
  )

}

--------- ###

import Cookies from 'js-cookie';
import {useState} from 'react'

export default function Testes1() {

  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    const token = password;
    
    Cookies.set('authToken', token, { 
      expires: 7,
      secure: true,                           // apenas HTTPS
      sameSite: 'strict'                      // proteção CSRF
    });
  };

  const handleLogout = () => {
    Cookies.remove('authToken');
  };

  return (
    <div>
      <input onChange={(e) => setPassword(e.target.value)} placeholder='Digite a senha'></input>
      <button onClick={handleLogin}>Login</button>
      <button onClick={handleLogout}>Logout</button>
    </div>
  )

}

------------- ###

import Cookies from 'js-cookie';
import {useState, useEffect} from 'react';

const useAuthToken = () => {
  const [token, setToken] = useState(null);

  useEffect(() => {                                  //Para checar se existe o cookie salvo
    const savedToken = Cookies.get('authToken');
    if (savedToken) {
      setToken(savedToken);
    }
  }, []);

  const saveToken = (newToken) => {
    Cookies.set('authToken', newToken, { 
      expires: 7,                             //OU   maxAge: 7 * 24 * 60 * 60 * 1000
      secure: true,                           // apenas HTTPS
      sameSite: 'strict',                     // proteção CSRF
      httpOnly: true                          // para cookies sensíveis (configurado no backend)
    });
    setToken(newToken);
  };

  const removeToken = () => {
    Cookies.remove('authToken');
    setToken(null);
  };

  return { token, saveToken, removeToken };
};

export default function Testes1() {

  const { token, saveToken, removeToken } = useAuthToken();

  return (
    <div>
      {token ? (
        <button onClick={removeToken}>Logout</button>
      ) : (
        <button onClick={() => saveToken('novo_token')}>Login</button>
      )}
    </div>
  )

}

////////////////////////////////////////////////////////////////&&&
EDITOR CONFIG

Instale a extensão Editor Config for VS Code.

Clique com o botão direito e escolha generate .editorconfig

Dentro do arquivo .editorconfig digite:

root = true

[*]

end_of_line = lf
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

////////////////////////////////////////////////////////////////&&&
PRETTIER

instalação:
npm install prettier --save-dev

Na pasta root, crie o arquivo prettierrc.json

{
  "semi": true,
  "singleQuote": true,
  "jsxSingleQuote": false,
  "trailingComma": "es5",
  "printWidth": 80,
  "tabWidth": 2,
  "endOfLine": "auto"
}

Para que o prettier sobreponha os codigos do eslint, digite no terminal:
npm install --save-dev eslint prettier eslint-config-prettier eslint-pluggin-prettier


////////////////////////////////////////////////////////////////&&&
OAUTH2 - LOGIN COM GOOGLE
VIDEO: https://www.youtube.com/embed/GuHN_ZqHExs?autoplay=1
VIDEO: https://www.youtube.com/embed/9uGfs-IqMR4?autoplay=1

instalação:
npm install @react-oauth/google@latest

Entre no seu google cloud:
console.cloud.google.com

Crie um projeto.
Vá para APIs and Services.
Clique em credentials.
Clique em criar credenciais.
Clique em ID do cliente do OAuth

De um nome pro App
Selecione um email pro suporte de usuario
Publico: EXTERNO
Dados de contato: mesmo email
Concluir

Criar um cliente Oauth
Tipo de aplicativo: aplicativo da web
Origens JavaScript autorizadas => 
   URL1 = http://localhost  
   URL2 = http://localhost:5173         (porta do vite)  

Copie a ID do cliente:

Copie a chave secreta do cliente

Vá em Publico alvo
Adicione um Usuários de teste colocando um email google

//////////////////////////////////////////////////////////////// &&&
DEPLOY
VIDEO: https://www.youtube.com/embed/dCLhUialKPQ?autoplay=1

Na pasta do projeto, digite no terminal:
npm run build

Será gerada a pasta dist

O conteúdo dentro da pasta dist é o que será colocado na pasta public de um site de hospedagem

//////////////////////////////////////////////////////////////// &&&
TESTES COM VITEST e REACT TESTING LIBRARY

Instalação apenas do Vitest:
npm install -D vitest 

Porém, para interagir com o React, é necessário instalar o React Testing Library também:
npm install -D vitest @testing-library/react @testing-library/jest-dom jsdom

Adicione o script do vitest no arquivo package.json:

{
  "scripts": {
    "test": "vitest"
  }
}

Para rodar o teste:
npm run test

------------------------------- ###
Teste de uma função isolada (sem react):

-Arquivo Soma.js:

export function sum(a, b) {
  return a + b
}

¨¨¨¨
-Arquivo Soma.test.js:

import { expect, test } from 'vitest'
import { soma } from './Soma.js'

test('soma 1 com 2 dando o resultado 3', () => {
  expect(soma(1, 2)).toBe(3)
})

------------------------------ ###
VIDEO: https://www.youtube.com/embed/iLZHFDelYpQ?autoplay=1
Testes com componentes no react:

Para usar o vitest com o React, é necessário adicionar o código abaixo no arquivo vite.config.js.

-Arquivo vite.config.js:

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
  }
})

-------- %%%
Criando um teste simples de debug:

-Arquivo ComponenteA.jsx:

export default function ComponenteA(){
  return(
    <>
      <div>TEXTO DE EXEMPLO</div>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA.test.jsx:         //Extensão precisa ser a mesma do arquivo original

import '@testing-library/jest-dom'
import { render } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  test('Should be able to see the initial text on screen', () => {
    const {debug} = render(<ComponenteA />)   
    debug()
  })
})

-Para rodar o teste, no terminal, vá até a pasta onde estão os 2 arquivos e execute:
npm run test


-Com o debug, será mostrado no terminal a árvore do DOM.

----------------- %%%
Criando um teste para saber se o texto aparece na tela: 

-Arquivo ComponenteA.test.jsx:        

import '@testing-library/jest-dom'
import { render } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  test('Should be able to see the initial text on screen', () => {
    const {getByText} = render(<ComponenteA />)   
    expect(getByText("TEXTO DE EXEMPLO")).toBeInTheDocument()
  })
})

---------------- %%%

-Arquivo Button.jsx:

export default function Button({children}){

  return(
    <>
      <button data-testid="btn">
        {children}
      </button>
    </>
  )
}

¨¨¨¨
-Arquivo Button.test.jsx:

import '@testing-library/jest-dom'
import { render } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import Button from './Button'

describe('Button', () => {
  test('Should be able to render the button', () => {
    const {getByTestId} = render(<Button>CLIQUE</Button>)   
    expect(getByTestId("btn")).toBeInTheDocument()
  })
})

------------- %%%

-Arquivo Button.jsx:

export default function Button({children}){

  return(
    <>
      <button data-testid="btn">
        {children}
      </button>
    </>
  )
}

¨¨¨¨
-Arquivo Button.test.jsx:

import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import Button from './Button'

describe('Button', () => {

  beforeEach(() => {
    render(<Button>CLIQUE</Button>)
  })

  test('Should be able to render the button', () => {  
    expect(screen.getByTestId("btn")).toBeInTheDocument()
  })

  test('Should be able to render based on the children prop', () => {  
    expect(screen.getByTestId("btn")).toHaveTextContent("CLIQUE")
  })
})

--------------------- %%%
Teste com estilo/style css:

-Arquivo ComponenteA.jsx:

export default function ComponenteA(){

  return(
    <>
      <h1 style={{color: "#ffffff", backgroundColor: "#000000"}} data-testid="txt">Texto de exemplo</h1>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA.test.jsx:

import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  test('Should be able to have a default style', () => {
    render(<ComponenteA />)

    const texto = screen.getByTestId('txt')       
    expect(texto).toHaveStyle({
      color: "#ffffff",
      backgroundColor: "#000000"
    })
  })
})


------------------------------------- ###
USANDO ID:

-Arquivo ComponenteA.jsx:

export default function ComponenteA(){

  return(
    <>
      <button data-testid="btn">CLIQUE</button>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA.test.jsx:

import '@testing-library/jest-dom'
import { render , screen } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  test('Should be able to render the button', () => {
    render(<ComponenteA />)

    const button = screen.getByTestId('btn', { name: "CLIQUE" })       //OU const button = screen.getByTestId('btn')
    expect(button).toBeInTheDocument()
  })
})

OBS: Com ids não é necessário especificar o name

-----------------
USANDO ROLE:

-Arquivo ComponenteA.jsx:

export default function ComponenteA(){

  return(
    <>
      <button>CLIQUE</button>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA.test.jsx:

import '@testing-library/jest-dom'
import { render , screen } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  test('Should be able to render the button', () => {
    render(<ComponenteA />)

    const button = screen.getByRole('button', { name: "CLIQUE" })
    expect(button).toBeInTheDocument()
  })
})

OBS: Com roles, é necessário especificar o name, pois pode haver outros elementos com o mesmo role, por exemplo, mais de 1 button.

------------------------------- ###
IT x TEST

-Exemplo usando test:

import '@testing-library/jest-dom'
import { render , screen } from '@testing-library/react'
import { describe, expect, test } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  test('Should be able to render the button', () => {
    render(<ComponenteA />)
    const button = screen.getByRole('button', { name: "CLIQUE" })
    expect(button).toBeInTheDocument()
  })
})

¨¨¨¨
Exemplo usando it:

import '@testing-library/jest-dom'
import { render , screen } from '@testing-library/react'
import { describe, expect, it } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  it('Should be able to render the button', () => {
    render(<ComponenteA />)
    const button = screen.getByRole('button', { name: "CLIQUE" })
    expect(button).toBeInTheDocument()
  })
})

----------------------- ###

-Arquivo ComponenteA.jsx:

import {useState} from 'react'

export default function ComponenteA(){

  const [num, setNum] = useState(0)

  function soma(a, b) {
    setNum(a + b)
  }

  return(
    <>
      <h1>{num}</h1>
      <button onClick={() => soma(1,2)}>SOMAR</button>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA.test.js:

import '@testing-library/jest-dom'           
import { render, screen, fireEvent } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {

  it('deve renderizar o componente com valor inicial 0', () => {
    render(<ComponenteA />)
    const heading = screen.getByRole('heading', { level: 1 })
    expect(heading).toHaveTextContent('0')
  })

  it('deve renderizar o botão com o texto "SOMAR"', () => {
    render(<ComponenteA />)
    const button = screen.getByRole('button', { name: /somar/i })
    expect(button).toBeInTheDocument()
  })

  it('deve somar 1 + 2 e exibir o resultado quando o botão for clicado', () => {
    render(<ComponenteA />)   
    const heading = screen.getByRole('heading', { level: 1 })
    const button = screen.getByRole('button', { name: /somar/i })
    expect(heading).toHaveTextContent('0')
    fireEvent.click(button)
    expect(heading).toHaveTextContent('3')
  })

  it('deve manter o último valor após múltiplos cliques', () => {
    render(<ComponenteA />)
    const heading = screen.getByRole('heading', { level: 1 })
    const button = screen.getByRole('button', { name: /somar/i })

    // Primeiro clique
    fireEvent.click(button)
    expect(heading).toHaveTextContent('3')
    
    // Segundo clique (substitui o valor anterior)
    fireEvent.click(button)
    expect(heading).toHaveTextContent('3')
  })

  it('deve verificar se a função soma está funcionando corretamente', () => {
    render(<ComponenteA />)
    
    const heading = screen.getByRole('heading', { level: 1 })
    const button = screen.getByRole('button')
    
    // Estado inicial
    expect(heading.textContent).toBe('0')
    
    // Após clicar, deve mostrar o resultado de 1 + 2
    fireEvent.click(button)
    expect(heading.textContent).toBe('3')
  })
})

OBS: Também era possível colocar o jest-dom em um arquivo separado:

-Arquivo vite.config.js:

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.js'
  }
})


¨¨¨¨
-Crie o arquivo src/test/setup.js:

import '@testing-library/jest-dom'

---------------------------- ###
-Arquivo Counter.jsx:

import {useState} from 'react'

export default function Counter({initialCount}){

  const [count, setCount] = useState(initialCount)

  const increment = () => {
    setCount(prev => prev + 1)
  }

  const decrement = () => {
    setCount(prev => prev - 1)
  }

  const restart = () => {
    setCount(0)
  }

  const switchSigns = () => {
    setCount(prev => prev * -1)
  }

  return(
    <>
      <h3 data-testid='count'>{count}</h3>
      <div>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={restart}>Restart</button>
        <button onClick={switchSigns}>Switch Signs</button>
      </div>
    </>
  )
}

¨¨¨¨
-Arquivo Counter.test.jsx:

import '@testing-library/jest-dom'
import { render, screen, fireEvent } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import Counter from './Counter'

describe('Counter Component', () => {
  it('should render with initial count value', () => {
    render(<Counter initialCount={5} />)
    
    const countElement = screen.getByTestId('count')
    expect(countElement).toHaveTextContent('5')
  })

  it('should render with 0 when no initialCount is provided', () => {
    render(<Counter />)
    
    const countElement = screen.getByTestId('count')
    expect(countElement).toHaveTextContent('0')
  })

  it('should increment count when increment button is clicked', () => {
    render(<Counter initialCount={3} />)
    
    const incrementButton = screen.getByRole('button', { name: 'Increment' })      //OU screen.getByText('Increment')
    const countElement = screen.getByTestId('count')
    
    fireEvent.click(incrementButton)
    
    expect(countElement).toHaveTextContent('4')
  })

  it('should decrement count when decrement button is clicked', () => {
    render(<Counter initialCount={3} />)
    
    const decrementButton = screen.getByRole('button', { name: 'Decrement' })      //OU screen.getByText('Decrement')
    const countElement = screen.getByTestId('count')
    
    fireEvent.click(decrementButton)
    
    expect(countElement).toHaveTextContent('2')
  })

  it('should reset count to 0 when restart button is clicked', () => {
    render(<Counter initialCount={10} />)
    
    const restartButton = screen.getByRole('button', { name: 'Restart' })
    const countElement = screen.getByTestId('count')
    
    fireEvent.click(restartButton)
    
    expect(countElement).toHaveTextContent('0')
  })

  it('should switch signs when switch signs button is clicked', () => {
    render(<Counter initialCount={5} />)
    
    const switchSignsButton = screen.getByRole('button', { name: 'Switch Signs' })
    const countElement = screen.getByTestId('count')
    
    fireEvent.click(switchSignsButton)
    
    expect(countElement).toHaveTextContent('-5')
  })

  it('should switch signs from negative to positive', () => {
    render(<Counter initialCount={-3} />)
    
    const switchSignsButton = screen.getByRole('button', { name: 'Switch Signs' })
    const countElement = screen.getByTestId('count')
    
    fireEvent.click(switchSignsButton)
    
    expect(countElement).toHaveTextContent('3')
  })

  it('should handle multiple operations correctly', () => {
    render(<Counter initialCount={0} />)
    
    const incrementButton = screen.getByRole('button', { name: 'Increment' })
    const decrementButton = screen.getByRole('button', { name: 'Decrement' })
    const switchSignsButton = screen.getByRole('button', { name: 'Switch Signs' })
    const countElement = screen.getByTestId('count')
    
    // Increment twice: 0 -> 1 -> 2
    fireEvent.click(incrementButton)
    fireEvent.click(incrementButton)
    expect(countElement).toHaveTextContent('2')
    
    // Switch signs: 2 -> -2
    fireEvent.click(switchSignsButton)
    expect(countElement).toHaveTextContent('-2')
    
    // Decrement: -2 -> -3
    fireEvent.click(decrementButton)
    expect(countElement).toHaveTextContent('-3')
  })

  it('should restart to 0 regardless of current value', () => {
    render(<Counter initialCount={0} />)
    
    const incrementButton = screen.getByRole('button', { name: 'Increment' })
    const switchSignsButton = screen.getByRole('button', { name: 'Switch Signs' })
    const restartButton = screen.getByRole('button', { name: 'Restart' })
    const countElement = screen.getByTestId('count')
    
    // Change the value
    fireEvent.click(incrementButton) // 0 -> 1
    fireEvent.click(switchSignsButton) // 1 -> -1
    
    // Restart should reset to 0
    fireEvent.click(restartButton)
    expect(countElement).toHaveTextContent('0')
  })

  it('should render all buttons', () => {
    render(<Counter initialCount={0} />)
    
    expect(screen.getByRole('button', { name: 'Increment' })).toBeInTheDocument()
    expect(screen.getByRole('button', { name: 'Decrement' })).toBeInTheDocument()
    expect(screen.getByRole('button', { name: 'Restart' })).toBeInTheDocument()
    expect(screen.getByRole('button', { name: 'Switch Signs' })).toBeInTheDocument()
  })
})

---------------
-Arquivo Counter.jsx:

import {useState} from 'react'

export default function Counter({initialCount, txt}){

  const [count, setCount] = useState(initialCount)

  const increment = () => {
    setCount(prev => prev + 1)
  }

  return(
    <>
      <h2>{txt}</h2>
      <h3 data-testid='count'>{count}</h3>
      <div>
        <button onClick={increment}>Increment</button>
      </div>
    </>
  )
}

¨¨¨¨
-Arquivo Counter.test.jsx:

import '@testing-library/jest-dom'
import { render, screen, fireEvent } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import Counter from './Counter'

describe('Counter Component', () => {

  it('should increment count when increment button is clicked', () => {
    render(<Counter initialCount={3} />)
    
    const incrementButton = screen.getByRole('button', { name: 'Increment' })
    const countElement = screen.getByTestId('count')
    
    fireEvent.click(incrementButton)
    
    expect(countElement).toHaveTextContent('4')
  })

  it('txt should display the text "Contagem"', () => {
    render(<Counter txt={"Contagem"} />)
    
    const txtElement = screen.getByRole('heading', {level: 2})
    
    expect(txtElement).toHaveTextContent('Contagem')
  })
})

------------------------------------------------------ ###
TESTES NO VITEST EM TODOS E CRUDS:

Exemplo 1:

-Arquivo App.jsx:

import {useState} from 'react'

export default function App(){

  const [carros, setCarros] = useState([])
  const [novoCarro, setNovoCarro] = useState({nome: '', ano: '', marca: ''})

  const handleChange = (e) => {
    setNovoCarro(prev => ({...prev, [e.target.name]: e.target.value }));
  }  

  const addCarro = () => {
    if (novoCarro.nome && novoCarro.ano && novoCarro.marca) {
      setCarros(prev => [...prev, { ...novoCarro, id: Date.now() }]);
      setNovoCarro({nome: '', ano: '', marca: ''});
    }
  }

  const removeCarro = (id) => {
    setCarros(prev => prev.filter((carro) => carro.id !== id));
  }

  return(
    <>
      <ul>
        {carros.map((carro) => (
          <li key={carro.id}>
            <p>{carro.nome} - {carro.ano} - {carro.marca}</p>
            <button onClick={() => removeCarro(carro.id)}>Remover</button>
            <hr />
          </li>
        ))}
      </ul>

      <input type="text" name="nome" value={novoCarro.nome} onChange={handleChange} placeholder="Digite o nome" />
      <input type="number" name="ano" value={novoCarro.ano} onChange={handleChange} placeholder="Digite o ano" />
      <input type="text" name="marca" value={novoCarro.marca} onChange={handleChange} placeholder="Digite a marca" />

      <button onClick={addCarro}>Adicionar</button>
    </>
  )
}

¨¨¨¨
-Arquivo App.test.jsx:

import '@testing-library/jest-dom'
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { render, screen, fireEvent, cleanup } from '@testing-library/react'
import App from './App'

// Mock do Date.now para testes consistentes
const mockDateNow = vi.fn()
mockDateNow.mockReturnValue(1234567890)
global.Date.now = mockDateNow

describe('App - Gerenciador de Carros', () => {
  beforeEach(() => {
    cleanup()
    mockDateNow.mockClear()
    mockDateNow.mockReturnValue(1234567890)
  })

  it('deve renderizar o componente corretamente', () => {
    render(<App />)
    
    // Verifica se os campos de input estão presentes
    expect(screen.getByPlaceholderText('Digite o nome')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('Digite o ano')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('Digite a marca')).toBeInTheDocument()
    expect(screen.getByText('Adicionar')).toBeInTheDocument()
  })

  it('deve atualizar os valores dos inputs ao digitar', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')

    // Simula digitação nos campos
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })

    // Verifica se os valores foram atualizados
    expect(inputNome.value).toBe('Civic')
    expect(inputAno.value).toBe('2022')
    expect(inputMarca.value).toBe('Honda')
  })

  it('deve adicionar um carro quando todos os campos estão preenchidos', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Preenche os campos
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })

    // Clica no botão adicionar
    fireEvent.click(botaoAdicionar)

    // Verifica se o carro foi adicionado à lista
    expect(screen.getByText('Civic - 2022 - Honda')).toBeInTheDocument()
    expect(screen.getByText('Remover')).toBeInTheDocument()
  })

  it('deve limpar os campos após adicionar um carro', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Preenche e adiciona um carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })
    fireEvent.click(botaoAdicionar)

    // Verifica se os campos foram limpos
    expect(inputNome.value).toBe('')
    expect(inputAno.value).toBe('')
    expect(inputMarca.value).toBe('')
  })

  it('não deve adicionar carro se algum campo estiver vazio', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Preenche apenas nome e ano (deixa marca vazia)
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.click(botaoAdicionar)

    // Verifica que nenhum carro foi adicionado
    expect(screen.queryByText('Civic - 2022 -')).not.toBeInTheDocument()
  })

  it('deve adicionar múltiplos carros', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Adiciona primeiro carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })
    fireEvent.click(botaoAdicionar)

    // Mock para simular um ID diferente para o segundo carro
    mockDateNow.mockReturnValue(1234567891)

    // Adiciona segundo carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Corolla' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2023' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Toyota' } })
    fireEvent.click(botaoAdicionar)

    // Verifica se ambos os carros estão na lista
    expect(screen.getByText('Civic - 2022 - Honda')).toBeInTheDocument()
    expect(screen.getByText('Corolla - 2023 - Toyota')).toBeInTheDocument()
    expect(screen.getAllByText('Remover')).toHaveLength(2)
  })

  it('deve remover um carro específico da lista', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Adiciona primeiro carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })
    fireEvent.click(botaoAdicionar)

    // Mock para simular um ID diferente
    mockDateNow.mockReturnValue(1234567891)

    // Adiciona segundo carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Corolla' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2023' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Toyota' } })
    fireEvent.click(botaoAdicionar)

    // Verifica que ambos estão na tela
    expect(screen.getByText('Civic - 2022 - Honda')).toBeInTheDocument()
    expect(screen.getByText('Corolla - 2023 - Toyota')).toBeInTheDocument()

    // Remove o primeiro carro
    const botoesRemover = screen.getAllByText('Remover')
    fireEvent.click(botoesRemover[0])

    // Verifica que apenas o segundo carro permanece
    expect(screen.queryByText('Civic - 2022 - Honda')).not.toBeInTheDocument()
    expect(screen.getByText('Corolla - 2023 - Toyota')).toBeInTheDocument()
    expect(screen.getAllByText('Remover')).toHaveLength(1)
  })

  it('deve renderizar lista vazia inicialmente', () => {
    render(<App />)
    
    // Verifica que não há carros na lista inicialmente
    expect(screen.queryByText('Remover')).not.toBeInTheDocument()
  })

  it('deve renderizar elementos hr para separação visual', () => {
    const { container } = render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Adiciona um carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })
    fireEvent.click(botaoAdicionar)

    // Verifica se o elemento hr está presente
    const hrElements = container.querySelectorAll('hr')
    expect(hrElements).toHaveLength(1)
  })

  it('deve usar Date.now() para gerar IDs únicos', () => {
    render(<App />)
    
    const inputNome = screen.getByPlaceholderText('Digite o nome')
    const inputAno = screen.getByPlaceholderText('Digite o ano')
    const inputMarca = screen.getByPlaceholderText('Digite a marca')
    const botaoAdicionar = screen.getByText('Adicionar')

    // Adiciona um carro
    fireEvent.change(inputNome, { target: { name: 'nome', value: 'Civic' } })
    fireEvent.change(inputAno, { target: { name: 'ano', value: '2022' } })
    fireEvent.change(inputMarca, { target: { name: 'marca', value: 'Honda' } })
    fireEvent.click(botaoAdicionar)

    // Verifica se Date.now foi chamado
    expect(mockDateNow).toHaveBeenCalled()
  })
})

------------------------------------- %%%
Exemplo 2: *** TODO LIST COM BOTÃO ÚNICO DE REMOVER TAREFAS SELECIONADAS

-Arquivo App.jsx:

import {useState, useEffect} from 'react'

export default function App(){

  const [tasks, setTasks] = useState(() => localStorage.getItem('tasks') ? JSON.parse(localStorage.getItem('tasks')) : []);
  //OU const [tasks, setTasks] = useState( JSON.parse(localStorage.getItem("tasks")) ?? []);

  const [newTask, setNewTask] = useState("")

  useEffect(() => {
    const temp = JSON.stringify(tasks)
    localStorage.setItem("tasks", temp)
  }, [tasks])

  function addTask(e){                             
    e.preventDefault()                                     

    if(newTask.trim() !== ""){ 
      setTasks(prev => [...prev, { id: Date.now(), txt: newTask.trim(), completed: false }])            
      setNewTask("")
    }
  }

  function deleteTask() {
    setTasks(tasks.filter((task) => !task.completed))
  } 

  function toggleComplete(id) {
    setTasks(prev => prev.map(task =>
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  }

  return(
    <div>
      <form onSubmit={addTask}>
        <input type="text" value={newTask} onChange={(e) => setNewTask(e.target.value)} placeholder="Digite a tarefa" />
        <button type="submit">Adicionar</button>
      </form>

      {tasks.some(task => task.completed) ? <button onClick={deleteTask}>Remover selecionados</button> : ''}

      {tasks.map((task) => 
        <div key={task.id}>

          <h2 
            style={{ 
              textDecoration: task.completed ? "line-through" : "", 
              color: task.completed ? "#00ff15ff" : "#ff0000ff", 
            }}>
              {task.txt}
          </h2>

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />

        </div>)
      }
    </div>
  )
}

¨¨¨¨
-App.test.jsx:

import '@testing-library/jest-dom'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { describe, it, expect, beforeEach, vi } from 'vitest'
import App from './App'

// Mock do localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
}

// Substitui o localStorage global pelo mock
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
})

describe('App - Lista de Tarefas', () => {
  
  beforeEach(() => {
    // Limpa todos os mocks antes de cada teste
    vi.clearAllMocks()
    // Define o comportamento padrão do localStorage.getItem
    localStorageMock.getItem.mockReturnValue(null)
  })
///////
  describe('Renderização inicial', () => {
  
    it('deve renderizar o formulário de adicionar tarefa', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      const button = screen.getByRole('button', { name: /adicionar/i })
      
      expect(input).toBeInTheDocument()
      expect(button).toBeInTheDocument()
    })
////
    it('deve renderizar sem tarefas quando localStorage está vazio', () => {
      render(<App />);
      
      const tasks = screen.queryAllByTestId('task-item');
      expect(tasks).toHaveLength(0);
    });

    // OUTRA FORMA:
    //  it('deve inicializar com array vazio quando localStorage estiver vazio', () => {
    //    localStorageMock.getItem.mockReturnValue(null)
    //
    //    render(<App />)
    //
    //    // Verifica se não há tarefas renderizadas
    //    expect(screen.queryByRole('heading')).not.toBeInTheDocument()
    //  })
////
    it('deve carregar tarefas do localStorage na inicialização', () => {
      const tasksMock = [
        { id: 1, txt: 'Tarefa 1', completed: false },
        { id: 2, txt: 'Tarefa 2', completed: true }
      ]
      localStorageMock.getItem.mockReturnValue(JSON.stringify(tasksMock))

      render(<App />)

      expect(screen.getByText('Tarefa 1')).toBeInTheDocument()
      expect(screen.getByText('Tarefa 2')).toBeInTheDocument()
    })
  });
/////////
  describe('Adição de tarefas', () => {

    it('deve adicionar uma nova tarefa quando o formulário for enviado', async () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      const button = screen.getByRole('button', { name: /adicionar/i })
      
      // Adiciona texto no input
      fireEvent.change(input, { target: { value: 'Nova tarefa' } })
      fireEvent.click(button)
      
      // Verifica se a tarefa foi adicionada
      await waitFor(() => {
        expect(screen.getByText('Nova tarefa')).toBeInTheDocument()
      })
      
      // Verifica se o input foi limpo
      expect(input.value).toBe('')

      // Verifica se localStorage.setItem foi chamado
      expect(localStorageMock.setItem).toHaveBeenCalled()
    })
////
    it('não deve adicionar tarefa vazia ou apenas com espaços', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      const button = screen.getByRole('button', { name: /adicionar/i })
      
      // Tenta adicionar tarefa vazia
      fireEvent.change(input, { target: { value: '' } })
      fireEvent.click(button)
      
      expect(screen.queryByRole('heading')).not.toBeInTheDocument()
      
      // Tenta adicionar tarefa apenas com espaços
      fireEvent.change(input, { target: { value: '   ' } })
      fireEvent.click(button)
      
      expect(screen.queryByRole('heading')).not.toBeInTheDocument()
    })
////
    it('deve remover espaços em branco das extremidades da tarefa', async () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      const button = screen.getByRole('button', { name: /adicionar/i })
      
      fireEvent.change(input, { target: { value: '  Tarefa com espaços  ' } })
      fireEvent.click(button)
      
      await waitFor(() => {
        expect(screen.getByText('Tarefa com espaços')).toBeInTheDocument()
      })
    })
  })
//////////////////////
  describe('Marcar tarefas como completas', () => {

    it('deve marcar/desmarcar tarefa como completa ao clicar no checkbox', async () => {
      render(<App />)
      
      // Adiciona uma tarefa primeiro
      const input = screen.getByPlaceholderText("Digite a tarefa")
      fireEvent.change(input, { target: { value: 'Tarefa para completar' } })
      fireEvent.submit(input.closest('form'))
      
      await waitFor(() => {
        expect(screen.getByText('Tarefa para completar')).toBeInTheDocument()
      })
      
      const checkbox = screen.getByRole('checkbox')
      const taskText = screen.getByText('Tarefa para completar')
      
      // Verifica estado inicial (não completada)
      expect(checkbox.checked).toBe(false)                         //OU expect(checkbox).not.toBeChecked()
      expect(taskText).toHaveStyle('color: #ff0000ff')
      expect(taskText).toHaveStyle('text-decoration: ')
      
      // Marca como completa
      fireEvent.click(checkbox)
      
      await waitFor(() => {
        expect(checkbox.checked).toBe(true)                         //OU expect(checkbox).toBeChecked()
        expect(taskText).toHaveStyle('color: #00ff15ff')
        expect(taskText).toHaveStyle('text-decoration: line-through')
      })
      
      // Desmarca como completa
      fireEvent.click(checkbox)
      
      await waitFor(() => {
        expect(checkbox.checked).toBe(false)                       //OU expect(checkbox).not.toBeChecked()
        expect(taskText).toHaveStyle('color: #ff0000ff')
        expect(taskText).toHaveStyle('text-decoration: ')
      })
    })
  })
/////////////////////
  describe('Remover tarefas marcadas com checked', () => {
    it('deve mostrar botão de remover apenas quando há tarefas completas', async () => {
      render(<App />)
      
      // Adiciona uma tarefa
      const input = screen.getByPlaceholderText("Digite a tarefa")
      fireEvent.change(input, { target: { value: 'Tarefa teste' } })
      fireEvent.submit(input.closest('form'))
      
      await waitFor(() => {
        expect(screen.getByText('Tarefa teste')).toBeInTheDocument()
      })
      
      // Verifica que não há botão de remover inicialmente
      expect(screen.queryByText(/remover selecionados/i)).not.toBeInTheDocument()
      
      // Marca a tarefa como completa
      const checkbox = screen.getByRole('checkbox')
      fireEvent.click(checkbox)
      
      // Verifica que o botão de remover aparece
      await waitFor(() => {
        expect(screen.getByText(/remover selecionados/i)).toBeInTheDocument()
      })
    })
////
    it('deve remover todas as tarefas marcadas com checked ao clicar em remover', async () => {
      const tasksMock = [
        { id: 1, txt: 'Tarefa 1', completed: false },
        { id: 2, txt: 'Tarefa 2', completed: true },
        { id: 3, txt: 'Tarefa 3', completed: true }
      ]
      localStorageMock.getItem.mockReturnValue(JSON.stringify(tasksMock))

      render(<App />)
      
      // Verifica se todas as tarefas estão presentes
      expect(screen.getByText('Tarefa 1')).toBeInTheDocument()
      expect(screen.getByText('Tarefa 2')).toBeInTheDocument()
      expect(screen.getByText('Tarefa 3')).toBeInTheDocument()
      
      // Clica no botão remover
      const removeButton = screen.getByText(/remover selecionados/i)
      fireEvent.click(removeButton)
      
      // Verifica que apenas a tarefa não completa permanece
      await waitFor(() => {
        expect(screen.getByText('Tarefa 1')).toBeInTheDocument()
        expect(screen.queryByText('Tarefa 2')).not.toBeInTheDocument()
        expect(screen.queryByText('Tarefa 3')).not.toBeInTheDocument()
      })
      
      // Verifica que o botão de remover desaparece
      expect(screen.queryByText(/remover selecionados/i)).not.toBeInTheDocument()
    })
  })
////////////////////////
  describe('LocalStorage', () => {

    it('deve carregar tarefas do localStorage', () => {
      // Mock do localStorage com tarefas existentes
      const existingTasks = [
        { id: 1, txt: 'Tarefa do localStorage', completed: false }
      ]
      localStorageMock.getItem.mockReturnValue(JSON.stringify(existingTasks))
      
      render(<App />)
      
      // Verifica se a tarefa do localStorage foi carregada
      expect(screen.getByText('Tarefa do localStorage')).toBeInTheDocument()
    })
////
    it('deve salvar tarefas no localStorage quando uma tarefa for adicionada', async () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      const form = input.closest('form')

      // Adiciona uma tarefa
      fireEvent.change(input, { target: { value: 'Nova tarefa' } })
      fireEvent.submit(form)
      
      // Verifica se setItem foi chamado com a tarefa correta
      await waitFor(() => {
        expect(localStorageMock.setItem).toHaveBeenCalledWith(
          'tasks', 
          expect.stringContaining('Nova tarefa')
        )
      })
    })
////
    it('deve atualizar localStorage quando uma tarefa for marcada como completa', async () => {
      const tasksMock = [{ id: 1, txt: 'Tarefa teste', completed: false }]
      localStorageMock.getItem.mockReturnValue(JSON.stringify(tasksMock))

      render(<App />)
      
      const checkbox = screen.getByRole('checkbox')
      fireEvent.click(checkbox)
      
      await waitFor(() => {
        expect(localStorageMock.setItem).toHaveBeenCalledWith(
          'tasks',
          expect.stringContaining('"completed":true')
        )
      })
    })
////
    it('deve atualizar localStorage quando tarefas forem removidas', async () => {
      const tasksMock = [
        { id: 1, txt: 'Tarefa 1', completed: false },
        { id: 2, txt: 'Tarefa 2', completed: true }
      ]
      localStorageMock.getItem.mockReturnValue(JSON.stringify(tasksMock))

      render(<App />)
      
      const removeButton = screen.getByText(/remover selecionados/i)
      fireEvent.click(removeButton)
      
      await waitFor(() => {
        expect(localStorageMock.setItem).toHaveBeenCalledWith(
          'tasks',
          JSON.stringify([{ id: 1, txt: 'Tarefa 1', completed: false }])
        )
      })
    })
  })
//////////////////////////
  describe('Acessibilidade e UX', () => {

    it('deve ter IDs únicos para cada tarefa (Checar a quantidade de checkbox)', async () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      
      // Adiciona múltiplas tarefas
      fireEvent.change(input, { target: { value: 'Tarefa 1' } })
      fireEvent.submit(input.closest('form'))
      
      await waitFor(() => {
        expect(screen.getByText('Tarefa 1')).toBeInTheDocument()
      })
      
      fireEvent.change(input, { target: { value: 'Tarefa 2' } })
      fireEvent.submit(input.closest('form'))
      
      await waitFor(() => {
        expect(screen.getByText('Tarefa 2')).toBeInTheDocument()
      })
      
      // Verifica se há dois checkboxes (um para cada tarefa)
      const checkboxes = screen.getAllByRole('checkbox')
      expect(checkboxes).toHaveLength(2)
    })
////
    it('deve manter o foco no input após adicionar tarefa (Limpar o input após adicionar)', async () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText("Digite a tarefa")
      
      fireEvent.change(input, { target: { value: 'Teste foco' } })
      fireEvent.submit(input.closest('form'))
      
      await waitFor(() => {
        expect(screen.getByText('Teste foco')).toBeInTheDocument()
      })
      
      // O input deve estar limpo e pronto para nova entrada
      expect(input.value).toBe('')
    })
  })
})



TESTES COM A TECLA ENTER
////
  describe('Adição de tarefas com a tecla Enter', () => {
    it('deve adicionar tarefa ao pressionar Enter', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const form = input.closest('form')
      
      // Digita o texto da tarefa
      fireEvent.change(input, { target: { value: 'Nova tarefa de teste' } })
      
      // Simula pressionar Enter (que dispara o onSubmit do form)
      fireEvent.submit(form)             
      
      // Verifica se a tarefa foi adicionada na tela
      expect(screen.getByText('Nova tarefa de teste')).toBeInTheDocument()
      
      // Verifica se o input foi limpo
      expect(input.value).toBe('')
      
      // Verifica se localStorage.setItem foi chamado
      expect(localStorageMock.setItem).toHaveBeenCalled()
    })
////
    it('não deve adicionar tarefa vazia ao pressionar Enter', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const form = input.closest('form')
      
      // Deixa o input vazio
      fireEvent.change(input, { target: { value: '' } })
      
      // Pressiona Enter
      fireEvent.submit(form)
      
      // Verifica que nenhuma tarefa foi adicionada
      const tasks = screen.queryAllByRole('heading')
      expect(tasks).toHaveLength(0)
    })
////
    it('não deve adicionar tarefa com apenas espaços ao pressionar Enter', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const form = input.closest('form')
      
      // Digita apenas espaços
      fireEvent.change(input, { target: { value: '   ' } })
      
      // Pressiona Enter
      fireEvent.submit(form)
      
      // Verifica que nenhuma tarefa foi adicionada
      const tasks = screen.queryAllByRole('heading')
      expect(tasks).toHaveLength(0)
    })
////
    it('deve remover espaços extras da tarefa ao adicionar via Enter', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const form = input.closest('form')
      
      // Digita tarefa com espaços extras
      fireEvent.change(input, { target: { value: '  Tarefa com espaços  ' } })
      
      // Pressiona Enter
      fireEvent.submit(form)
      
      // Verifica se a tarefa foi adicionada sem os espaços extras
      expect(screen.getByText('Tarefa com espaços')).toBeInTheDocument()
    })
////
    it('deve adicionar múltiplas tarefas ao pressionar Enter repetidas vezes', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const form = input.closest('form')
      
      // Adiciona primeira tarefa
      fireEvent.change(input, { target: { value: 'Primeira tarefa' } })
      fireEvent.submit(form)
      
      // Adiciona segunda tarefa
      fireEvent.change(input, { target: { value: 'Segunda tarefa' } })
      fireEvent.submit(form)
      
      // Adiciona terceira tarefa
      fireEvent.change(input, { target: { value: 'Terceira tarefa' } })
      fireEvent.submit(form)
      
      // Verifica se todas as tarefas estão presentes
      expect(screen.getByText('Primeira tarefa')).toBeInTheDocument()
      expect(screen.getByText('Segunda tarefa')).toBeInTheDocument()
      expect(screen.getByText('Terceira tarefa')).toBeInTheDocument()
    })
  })
////
  
//// ESTÁ DANDO ERRO
  it('deve adicionar tarefa ao pressionar tecla Enter diretamente no input', () => {
    render(<App />)
    
    const input = screen.getByPlaceholderText('Digite a tarefa')
    
    // Digita o texto da tarefa
    fireEvent.change(input, { target: { value: 'Tarefa via Enter' } })
    
    // Simula pressionar Enter diretamente no input
    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter' })
    
    // Verifica se a tarefa foi adicionada
    expect(screen.getByText('Tarefa via Enter')).toBeInTheDocument()
    
    // Verifica se o input foi limpo
    expect(input.value).toBe('')
  })
////

----------------------------------------- ###
TODO COM BOTÃO REMOVER EM CADA TAREFA

-Arquivo App.jsx:

import {useState, useEffect} from 'react'

export default function App(){

  const [tasks, setTasks] = useState( JSON.parse(localStorage.getItem("tasks")) ?? []);
  const [newTask, setNewTask] = useState("")

  useEffect(() => {
    const temp = JSON.stringify(tasks)
    localStorage.setItem("tasks", temp)
  }, [tasks])

  function addTask(e){                             
    e.preventDefault()                                     

    if(newTask.trim() !== ""){ 
      setTasks(prev => [...prev, { id: Date.now(), txt: newTask.trim(), completed: false }])            
      setNewTask("")
    }
  }

  function deleteTask(id) {
    setTasks(prev => prev.filter((task) => task.id !== id)) 
  } 

  function toggleComplete(id) {
    setTasks(prev => prev.map(task =>
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  }

  return(
    <div>
      <form onSubmit={addTask}>
        <input type="text" value={newTask} onChange={(e) => setNewTask(e.target.value)} placeholder="Digite a tarefa" />
        <button type="submit">Adicionar</button>
      </form>

      {tasks.map((task) => 
        <div key={task.id}>

          <h2 
            style={{ 
              textDecoration: task.completed ? "line-through" : "", 
              color: task.completed ? "#01c511ff" : "#ff0000ff", 
            }}>
              {task.txt}
              <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />
              <button onClick={() => deleteTask(task.id)}>Remover</button>
          </h2>
        </div>
      )}
      
    </div>
  )
}

¨¨¨¨
-Arquivo App.test.jsx:

import '@testing-library/jest-dom'
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import App from './App'

// Mock localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
})

describe('App - Lista de Tarefas', () => {

  beforeEach(() => {
    // Limpa todos os mocks antes de cada teste
    vi.clearAllMocks()
    localStorageMock.getItem.mockReturnValue(null)
  })
  
/////////////////////
  describe('Renderização inicial', () => {
    it('deve renderizar o formulário de adicionar tarefa', () => {
      render(<App />)
      
      expect(screen.getByPlaceholderText('Digite a tarefa')).toBeInTheDocument()
      expect(screen.getByRole('button', { name: 'Adicionar' })).toBeInTheDocument()
    })
////
    it('deve carregar tarefas do localStorage na inicialização', () => {
      const tasksMock = [
        { id: 1, txt: 'Tarefa do localStorage', completed: false }
      ]
      localStorageMock.getItem.mockReturnValue(JSON.stringify(tasksMock))

      render(<App />)
      
      expect(screen.getByText('Tarefa do localStorage')).toBeInTheDocument()
      expect(localStorageMock.getItem).toHaveBeenCalledWith('tasks')
    })
////
    it('deve inicializar com array vazio quando localStorage está vazio', () => {
      localStorageMock.getItem.mockReturnValue(null)
      
      render(<App />)
      
      expect(screen.queryByRole('checkbox')).not.toBeInTheDocument()
    })
  })
////////////////////
  describe('Adicionar tarefas', () => {
    it('deve adicionar uma nova tarefa quando o formulário é submetido', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const button = screen.getByRole('button', { name: 'Adicionar' })
      
      fireEvent.change(input, { target: { value: 'Nova tarefa' } })
      fireEvent.click(button)
      
      expect(screen.getByText('Nova tarefa')).toBeInTheDocument()
      expect(input.value).toBe('')
    })
////
    it('deve adicionar tarefa pressionando Enter', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const form = input.closest('form')
      
      fireEvent.change(input, { target: { value: 'Tarefa com Enter' } })
      fireEvent.submit(form)
      
      expect(screen.getByText('Tarefa com Enter')).toBeInTheDocument()
    })
////
    it('não deve adicionar tarefa vazia', () => {
      render(<App />)
      
      const button = screen.getByRole('button', { name: 'Adicionar' })
      
      fireEvent.click(button)
      
      expect(screen.queryByRole('checkbox')).not.toBeInTheDocument()
    })
////
    it('não deve adicionar tarefa contendo apenas espaços', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const button = screen.getByRole('button', { name: 'Adicionar' })
      
      fireEvent.change(input, { target: { value: '   ' } })
      fireEvent.click(button)
      
      expect(screen.queryByRole('checkbox')).not.toBeInTheDocument()
    })
////
    it('deve remover espaços em branco das extremidades ao adicionar tarefa', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const button = screen.getByRole('button', { name: 'Adicionar' })
      
      fireEvent.change(input, { target: { value: '  Tarefa com espaços  ' } })
      fireEvent.click(button)
      
      expect(screen.getByText('Tarefa com espaços')).toBeInTheDocument()
    })
  })
////////////////
  describe('Remover tarefas', () => {
    it('deve remover uma tarefa quando o botão remover é clicado', () => {
      render(<App />)
      
      // Adiciona uma tarefa primeiro
      const input = screen.getByPlaceholderText('Digite a tarefa')
      fireEvent.change(input, { target: { value: 'Tarefa para remover' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      // Remove a tarefa
      const removeButton = screen.getByRole('button', { name: 'Remover' })
      fireEvent.click(removeButton)
      
      expect(screen.queryByText('Tarefa para remover')).not.toBeInTheDocument()
    })
////
    it('deve remover apenas a tarefa específica quando há múltiplas tarefas', () => {
      render(<App />)
      
      // Adiciona duas tarefas
      const input = screen.getByPlaceholderText('Digite a tarefa')
      
      fireEvent.change(input, { target: { value: 'Primeira tarefa' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      fireEvent.change(input, { target: { value: 'Segunda tarefa' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      // Remove apenas a primeira tarefa
      const removeButtons = screen.getAllByRole('button', { name: 'Remover' })
      fireEvent.click(removeButtons[0])
      
      expect(screen.queryByText('Primeira tarefa')).not.toBeInTheDocument()
      expect(screen.getByText('Segunda tarefa')).toBeInTheDocument()
    })
  })
/////////////////
  describe('Marcar/desmarcar tarefas como completas', () => {
    beforeEach(() => {
      render(<App />)
      
      // Adiciona uma tarefa para os testes
      const input = screen.getByPlaceholderText('Digite a tarefa')
      fireEvent.change(input, { target: { value: 'Tarefa de teste' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
    })
////
    it('deve marcar tarefa como completa quando checkbox é clicado', () => {
      const checkbox = screen.getByRole('checkbox')
      
      fireEvent.click(checkbox)
      
      expect(checkbox).toBeChecked()
      
      // Verifica se o estilo foi aplicado (texto riscado e cor verde)
      const taskText = screen.getByText('Tarefa de teste').closest('h2')
      expect(taskText).toHaveStyle({
        textDecoration: 'line-through',
        color: '#01c511ff'
      })
    })
////
    it('deve desmarcar tarefa completa quando checkbox é clicado novamente', () => {
      const checkbox = screen.getByRole('checkbox')
      
      // Marca como completa primeiro
      fireEvent.click(checkbox)
      expect(checkbox).toBeChecked()
      
      // Desmarca
      fireEvent.click(checkbox)
      expect(checkbox).not.toBeChecked()
      
      // Verifica se o estilo foi removido
      const taskText = screen.getByText('Tarefa de teste').closest('h2')
      expect(taskText).toHaveStyle({
        textDecoration: '',
        color: '#ff0000ff'
      })
    })
  })
/////////////////
  describe('Estilos visuais', () => {
    it('deve aplicar estilo de tarefa não completa por padrão', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      fireEvent.change(input, { target: { value: 'Tarefa não completa' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      const taskText = screen.getByText('Tarefa não completa').closest('h2')
      expect(taskText).toHaveStyle({
        textDecoration: '',
        color: '#ff0000ff'
      })
    })
  })
/////////////////
  describe('localStorage', () => {
    it('deve salvar tarefas no localStorage quando uma nova tarefa é adicionada', async () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      fireEvent.change(input, { target: { value: 'Tarefa para salvar' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      await waitFor(() => {
        expect(localStorageMock.setItem).toHaveBeenCalledWith(
          'tasks',
          expect.stringContaining('Tarefa para salvar')
        )
      })
    })
////
    it('deve atualizar localStorage quando tarefa é removida', async () => {
      render(<App />)
      
      // Adiciona uma tarefa
      const input = screen.getByPlaceholderText('Digite a tarefa')
      fireEvent.change(input, { target: { value: 'Tarefa para remover' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      // Remove a tarefa
      const removeButton = screen.getByRole('button', { name: 'Remover' })
      fireEvent.click(removeButton)
      
      await waitFor(() => {
        expect(localStorageMock.setItem).toHaveBeenLastCalledWith('tasks', '[]')
      })
    })
////
    it('deve atualizar localStorage quando tarefa é marcada como completa', async () => {
      render(<App />)
      
      // Adiciona uma tarefa
      const input = screen.getByPlaceholderText('Digite a tarefa')
      fireEvent.change(input, { target: { value: 'Tarefa para completar' } })
      fireEvent.click(screen.getByRole('button', { name: 'Adicionar' }))
      
      // Marca como completa
      const checkbox = screen.getByRole('checkbox')
      fireEvent.click(checkbox)
      
      await waitFor(() => {
        const lastCall = localStorageMock.setItem.mock.calls[localStorageMock.setItem.mock.calls.length - 1]
        const savedTasks = JSON.parse(lastCall[1])
        expect(savedTasks[0].completed).toBe(true)
      })
    })
  })
////////////////
  describe('Múltiplas tarefas', () => {
    it('deve gerenciar corretamente múltiplas tarefas', () => {
      render(<App />)
      
      const input = screen.getByPlaceholderText('Digite a tarefa')
      const addButton = screen.getByRole('button', { name: 'Adicionar' })
      
      // Adiciona três tarefas
      fireEvent.change(input, { target: { value: 'Primeira tarefa' } })
      fireEvent.click(addButton)
      
      fireEvent.change(input, { target: { value: 'Segunda tarefa' } })
      fireEvent.click(addButton)
      
      fireEvent.change(input, { target: { value: 'Terceira tarefa' } })
      fireEvent.click(addButton)
      
      // Verifica se todas as tarefas estão presentes
      expect(screen.getByText('Primeira tarefa')).toBeInTheDocument()
      expect(screen.getByText('Segunda tarefa')).toBeInTheDocument()
      expect(screen.getByText('Terceira tarefa')).toBeInTheDocument()
      
      // Verifica se há 3 checkboxes
      expect(screen.getAllByRole('checkbox')).toHaveLength(3)
      
      // Verifica se há 3 botões de remover
      expect(screen.getAllByRole('button', { name: 'Remover' })).toHaveLength(3)
    })
  })
})


------------------------------------------ ###
userEvent:  (Necessário instalar @testing-library/user-event)

import userEvent from '@testing-library/user-event';     

describe('Adição de tarefas', () => {
    it('deve adicionar uma nova tarefa quando o formulário é enviado', async () => {
      const user = userEvent.setup();
      render(<App />);

      const input = screen.getByRole('textbox');
      const button = screen.getByRole('button', { name: /adicionar/i });

      await user.type(input, 'Nova tarefa');
      await user.click(button);

      expect(screen.getByText('Nova tarefa')).toBeInTheDocument();
      expect(input.value).toBe('');
    });
});
  

/////////////////////////////////////////////////////////////////////// &&&
TESTE COM JEST E REACT TEST LIBRARY 

Instalação do Jest e React Test Library:
npm install -D jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom

¨¨¨¨
-Arquivo jest.config.js:

module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],
  moduleNameMapping: {
    '\\.(css|less|scss)$': 'identity-obj-proxy'
  },
  transform: {
    '^.+\\.(js|jsx)$': 'babel-jest'
  }
}

¨¨¨¨
-Arquivo src/setupTests.js:

import '@testing-library/jest-dom'

¨¨¨¨
-Arquivo package.json scripts:

{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}

----------------------- ###

-Arquivo ComponenteA.jsx:

import {useState} from 'react'

export default function ComponenteA(){

  const [num, setNum] = useState(0)

  function soma(a, b) {
    setNum(a + b)
  }

  return(
    <>
      <h1>{num}</h1>
      <button onClick={() => soma(1,2)}>SOMAR</button>
    </>
  )
}

¨¨¨¨
-Arquivo ComponenteA.test.js:

import { render, screen, fireEvent } from '@testing-library/react'
import ComponenteA from './ComponenteA'

describe('ComponenteA', () => {
  it('deve renderizar o componente com valor inicial 0', () => {
    render(<ComponenteA />)
    
    const heading = screen.getByRole('heading', { level: 1 })
    expect(heading).toHaveTextContent('0')
  })

  it('deve renderizar o botão com o texto "SOMAR"', () => {
    render(<ComponenteA />)
    
    const button = screen.getByRole('button', { name: /somar/i })
    expect(button).toBeInTheDocument()
  })

  it('deve somar 1 + 2 e exibir o resultado quando o botão for clicado', () => {
    render(<ComponenteA />)
    
    const heading = screen.getByRole('heading', { level: 1 })
    const button = screen.getByRole('button', { name: /somar/i })
    
    // Verifica o valor inicial
    expect(heading).toHaveTextContent('0')
    
    // Clica no botão
    fireEvent.click(button)
    
    // Verifica se o valor foi atualizado para 3 (1 + 2)
    expect(heading).toHaveTextContent('3')
  })

  it('deve manter o último valor após múltiplos cliques', () => {
    render(<ComponenteA />)
    
    const heading = screen.getByRole('heading', { level: 1 })
    const button = screen.getByRole('button', { name: /somar/i })
    
    // Primeiro clique
    fireEvent.click(button)
    expect(heading).toHaveTextContent('3')
    
    // Segundo clique (substitui o valor anterior)
    fireEvent.click(button)
    expect(heading).toHaveTextContent('3')
  })

  it('deve verificar se a função soma está funcionando corretamente', () => {
    render(<ComponenteA />)
    
    const heading = screen.getByRole('heading', { level: 1 })
    const button = screen.getByRole('button')
    
    // Estado inicial
    expect(heading.textContent).toBe('0')
    
    // Após clicar, deve mostrar o resultado de 1 + 2
    fireEvent.click(button)
    expect(heading.textContent).toBe('3')
  })
})


---------------------- ###
VIDEO: https://www.youtube.com/embed/JBSUgDxICg8

Crie um arquivo de testes para o componente que quiser testar com o seguinte nome: (Ex: ComponenteA)
ComponenteA.test.js

Dentro do arquivo, irá descrever o que o componente faz com o seguinte código:

import ComponenteA from './ComponenteA'
import {render} from "@testing-library/react"

describe(ComponenteA, () => {
  it("Descrição do que o componente faz", () => {
    const {getByTestId} = render(<ComponenteA variavel={valor} />)
    ...
    expect(variavelValue).toEqual(valor)
  })
})

E no arquivo ComponenteA:

...
  <h3 data-testId="variavel">{variavel}</h3>
...

Para realizar o teste, digite o script de testes do jest gravado no package.json:
npm test
ou 
yarn test

------------------ ###

Exemplo de teste com um componente com botões para alterar o valor de uma variavel chamada count.
O componente possui:
-Um botão para aumentar o valor de count em 1
-Um botão para dimunuir o valor de count em 1
-Um botão para resetar o valor de count
-Um botão para reverter o sinal de count

-Arquivo Counter.jsx:

import {useState} from 'react'

export default function Counter({initialCount}){

  const [count, setCount] = useState(initialCount)

  const increment = () => {
    setCount(prev => prev + 1)
  }

  const decrement = () => {
    setCount(prev => prev - 1)
  }

  const restart = () => {
    setCount(0)
  }

  const switchSigns = () => {
    setCount(prev => prev * -1)
  }

  return(
    <>
      <h3 data-testid='count'>{count}</h3>
      <div>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={restart}>Restart</button>
        <button onClick={switchSigns}>Switch Signs</button>
      </div>
    </>
  )
}

¨¨¨¨
-Arquivo Counter.test.jsx:

import '@testing-library/jest-dom'
import { render, fireEvent } from '@testing-library/react'
//import { describe, it, expect } from 'vitest'                        (Não é preciso ao usar o Jest)
import Counter from "./Counter";

describe(Counter, () => {
  it("counter displays correct initial count", () => {
    const { getByTestId } = render(<Counter initialCount={0} />);
    const countValue = Number(getByTestId("count").textContent);
    expect(countValue).toEqual(0);
  });

  it("count should increment by 1 if the increment button is clicked", () => {
    const { getByTestId, getByRole } = render(<Counter initialCount={0} />);
    const incrementBttn = getByRole("button", { name: "Increment" });
    const countValue1 = Number(getByTestId("count").textContent);                 //**Forma 1 usando uma variavel
    expect(countValue1).toEqual(0);
    fireEvent.click(incrementBttn);
    const countValue2 = Number(getByTestId("count"). textContent);
    expect(countValue2).toEqual(1);
  });

  it("count should decrement by 1 if the decrement button is clicked", () => {
    const { getByTestId, getByRole } = render(<Counter initialCount={0} />);
    const decrementBttn = getByRole("button", { name: "Decrement" });
    expect(Number(getByTestId("count").textContent)).toEqual(0);                  //**Forma 2 sem usar uma variavel
    fireEvent.click(decrementBttn);
    expect(Number(getByTestId("count").textContent)).toEqual(-1);
  });

  it("count should be 0 if the restart button is clicked", () => {
    const { getByTestId, getByRole } = render(<Counter initialCount={50} />);
    const restartBttn = getByRole("button", { name: "Restart" });
    expect(Number(getByTestId("count").textContent)).toEqual(50);
    fireEvent.click(restartBttn);
    expect(Number(getByTestId("count").textContent)).toEqual(0);
  });  

  it("count should invert signs if the switch signs button is clicked", () => {
    const { getByTestId, getByRole } = render(<Counter initialCount={50} />);
    const switchBttn = getByRole("button", { name: "Switch Signs" });
    expect(Number(getByTestId("count").textContent)).toEqual(50);
    fireEvent.click(switchBttn);
    expect(Number(getByTestId("count").textContent)).toEqual(-50);
  });    
})


----------------------------------- ###


//////////////////////////////////////////////////////////////// &&&
TODO LIST / TO-DO LIST

Adicionando um botão de adicionar:

import { useState } from 'react'

export default function App(){

  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  function handleChange(event){
    setNewTask(event.target.value)
  }

  function addTask(){
    if(newTask.trim() !== ""){                           //Para evitar que algo seja adicionado se o input estiver vazio
      setTasks(prev => [...prev, newTask])
      setNewTask("")
    }
  }

  return (
    <>
      <div>
        <input type="text" value={newTask} onChange={handleChange}/>
        <button onClick={addTask}>ADICIONAR</button>
      </div>
      {tasks.map((task, index) => (
        <div key={index}>
          <p>{task}</p>
        </div>
      ))}
    </>
  )
}

--------------

Adicionando um botão de remover:

import { useState } from 'react'

export default function App(){

  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  function handleChange(event){
    setNewTask(event.target.value)
  }

  function addTask(){
    if(newTask.trim() !== ""){                           
      setTasks(prev => [...prev, newTask])
      setNewTask("")
    }
  }

  function removeTask(index){
    setTasks(prev => prev.filter((_, i) => i !== index))
    setNewTask("")
  }

  return (
    <>
      <div>
        <input type="text" value={newTask} onChange={handleChange}/>
        <button onClick={addTask}>ADICIONAR</button>
      </div>
      {tasks.map((task, index) => (
        <div key={index}>
          <p>{task}</p>
          <button onClick={() => removeTask(index)}>Remover</button>
        </div>
      ))}
    </>
  )
}

-------------------- ###
Todo List com botões para mover as tarefas para cima ou para baixo:
VIDEO: https://www.youtube.com/embed/9wiWzu_tRB0?autoplay=1

import { useState } from 'react'

export default function App(){

  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  function handleInputChange(event){
      setNewTask(event.target.value);
  }

  function addTask(){
      if(newTask.trim() !== ""){
          setTasks(prev => [...prev, newTask]);
          setNewTask("");
      }
  }

  function deleteTask(index){
      const updatedTasks = tasks.filter((_, i) => i !== index);
      setTasks(updatedTasks);
  }

  function moveTaskUp(index){

      if(index > 0){
          const updatedTasks = [...tasks];
          [updatedTasks[index], updatedTasks[index - 1]] = 
          [updatedTasks[index - 1], updatedTasks[index]];
          setTasks(updatedTasks);
      }
  }

  function moveTaskDown(index){

      if(index < tasks.length - 1){
          const updatedTasks = [...tasks];
          [updatedTasks[index], updatedTasks[index + 1]] = 
          [updatedTasks[index + 1], updatedTasks[index]];
          setTasks(updatedTasks);
      }
  }

  return (

    <div className="to-do-list">

      <h1>To-Do-List</h1>

      <div>
        <input
          type="text"
          placeholder="Enter a task..."
          value={newTask}
          onChange={handleInputChange}/>
        <button
          className="add-button"
          onClick={addTask}>
          Add
        </button>
      </div>
      <ol>
        {tasks.map((task, index) => 
          <li key={index}>
            <span className="text">{task}</span>
            <button
              className="delete-button"
              onClick={() => deleteTask(index)}>
              Delete
            </button>
            <button
              className="move-button"
              onClick={() => moveTaskUp(index)}>
              ☝
            </button>
            <button
              className="move-button"
              onClick={() => moveTaskDown(index)}>
              👇
            </button>
          </li>
        )}
      </ol>
    </div>
  );
}

---------------------------- ###
Salvando as tarefas no local storage: 

import { useState, useEffect } from 'react'

export default function App(){

  const [tasks, setTasks] = useState(() => {
    const storedTasks = localStorage.getItem('tasks');
    return storedTasks ? JSON.parse(storedTasks) : [];
  });
  const [newTask, setNewTask] = useState("");

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  function handleChange(event){
    setNewTask(event.target.value)
  }

  function addTask(){
    if(newTask.trim() !== ""){                           
      setTasks(prev => [...prev, newTask])
      setNewTask("")
    }
  }

  function removeTask(index){
    setTasks(prev => prev.filter((_, i) => i !== index))
    setNewTask("")
  }

  return (
    <>
      <div>
        <input type="text" value={newTask} onChange={handleChange}/>
        <button onClick={addTask}>ADICIONAR</button>
      </div>
      {tasks.map((task, index) => (
        <div key={index}>
          <p>{task}</p>
          <button onClick={() => removeTask(index)}>Remover</button>
        </div>
      ))}
    </>
  )
}

---------------------------------------------------------------------------- ###
TODO LIST COM MAIS DE 1 CAMPO:

import { useState } from 'react'

export default function App(){

  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  function handleChange(event){
    setNewTask(event.target.value)
  }

  function addTask(){
    if(newTask.trim() !== ""){                           
      setTasks(prev => [...prev, { id: Date.now(), txt: newTask.trim() }])   
      //OU  setTasks([...tasks, { id: Date.now(), txt: newTask.trim() }])
      setNewTask("")
    }
  }

  function removeTask(id){
    setTasks(prev => prev.filter((task) => task.id !== id))      
    //OU  setTasks(tasks.filter((task) => task.id !== id))
  }

  return (
    <>
      <div>
        <input type="text" value={newTask} onChange={handleChange}/>
        <button onClick={addTask}>ADICIONAR</button>
      </div>
      {tasks.map((task) => (
        <div key={task.id}>
          <p>{task.txt}</p>
          <button onClick={() => removeTask(task.id)}>Remover</button>
        </div>
      ))}
    </>
  )
}

--------------

import { useState } from 'react'

export default function App(){

  const [tarefas, setTarefas] = useState([]);
  const [novaTarefa, setNovaTarefa] = useState("");

  function handleChange(event){
    setNovaTarefa(event.target.value)
  }

  function addTarefa(){
    if(novaTarefa.trim() !== ""){                           
      setTarefas(prev => [...prev, { id: Date.now(), txt: novaTarefa.trim(), completa: false }])   
      setNovaTarefa("")
    }
  }

  function removeTarefa(id){
    setTarefas(prev => prev.filter((tarefa) => tarefa.id !== id))      
  }

  function completaTarefa(id) {
    setTarefas(
      tarefas.map((tarefa) =>
        tarefa.id === id ? { ...tarefa, completa: !tarefa.completa } : tarefa
      )
    );
  };

  return (
    <>
      <div>
        <input type="text" value={novaTarefa} onChange={handleChange}/>
        <button onClick={addTarefa}>ADICIONAR</button>
      </div>
      {tarefas.map((tarefa) => (
        <div key={tarefa.id}>
          <p style={{color: tarefa.completa ? "green" : "red" }}>{tarefa.txt}</p>
          <button onClick={() => removeTarefa(tarefa.id)}>Remover</button>
          <button onClick={() => completaTarefa(tarefa.id)}>{!tarefa.completa ? "Completa" : "Falta fazer"}</button>
        </div>
      ))}
    </>
  )
}


------------------------------ ###

import { useState } from 'react';

export default function App() {

  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');

  const handleInputChange = (event) => {
    setNewTodo(event.target.value);
  };

  const handleFormSubmit = (event) => {
    event.preventDefault();                               //necessário somente se estiver em um form submit
    if (newTodo.trim() !== '') {
      setTodos([...todos, { id: Date.now(), text: newTodo.trim(), completed: false }]);
      setNewTodo('');
    }
  };

  const handleTodoComplete = (id) => {
    setTodos(
      todos.map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  const handleTodoDelete = (id) => {
    setTodos(todos.filter((todo) => todo.id !== id));
  };

  return (
    <div className="App">
      <h1>Todo List</h1>
      <form onSubmit={handleFormSubmit}>
        <input
          type="text"
          value={newTodo}
          onChange={handleInputChange}
          placeholder="Add new todo"
        />
        <button type="submit">Add</button>
      </form>
      <ul>
        {todos.map((todo) => (
          <li key={todo.id}>
            <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>
              {todo.text}
            </span>
            <button onClick={() => handleTodoComplete(todo.id)}>
              {todo.completed ? 'Undo' : 'Complete'}
            </button>
            <button onClick={() => handleTodoDelete(todo.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

------------------------------------------------ ###
TODO LIST COM CHECKBOX

import { useState } from 'react'

export default function App(){
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  const tasksChecked = tasks.filter(task => task.checked).length;

  function handleChange(event){
    setNewTask(event.target.value)
  }

  function addTask(){
    if(newTask.trim() !== ""){                           
      setTasks(prev => [...prev, { id: Date.now(), txt: newTask.trim(), checked: false }])   
      setNewTask("")
    }
  }

  function toggleTask(id) {
    setTasks(prev => prev.map(task =>
      task.id === id ? { ...task, checked: !task.checked } : task
    ));
  }

  function removeCheckedTasks() {
    setTasks(prev => prev.filter(task => !task.checked));
  }

  return (
    <>
      <div>
        <input type="text" value={newTask} onChange={handleChange}/>
        <button onClick={addTask}>ADICIONAR</button>
      </div>

      {tasks.map((task) => (
        <div key={task.id}>
          <input
            type="checkbox"
            checked={task.checked}
            onChange={() => toggleTask(task.id)}
          />
          {task.txt}
        </div>
      ))}

      <div>
        <button onClick={removeCheckedTasks} disabled={tasksChecked === 0}>
          {tasksChecked !== 0 ? "Remover selecionados" : "Nada selecionado"}
        </button>  
      </div>      

    </>
  )
}

----------------------------- ###
TODO LIST COM CHECKBOX, EDIÇÃO, LOCALSTORAGE
VIDEO: https://www.youtube.com/embed/EbnmosN64JQ?autoplay=1

Inserindo adicionar e remover:

import {useState} from 'react'

export default function App(){

  const [todos, setTodos] = useState([])
  const [todo, setTodo] = useState("")

  function addTodo(e){                             
    e.preventDefault()                                     //Caso não use Formik ou react-hook-form

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          //OU id: Date.now()
        txt: todo,
        completed: false,
      }
      
      setTodos(prev => [...prev].concat(newTodo))        
      //OU setTodos([...todos].concat(newTodo)) 
      //OU setTodos(prev => [...prev, newTodo]) 
      //OU setTodos(prev => [...prev, { id: new Date().getTime(), txt: todo, completed: false }])

      setTodo("")
    }
  }

  function deleteTodo(id) {
    const updatedTodos = (prev) => [...prev].filter((task) => task.id !== id)
    //OU const updatedTodos = [...todos].filter((task) => task.id !== id)
    //OU setTodos(todos.filter((task) => task.id !== id))
      
    setTodos(updatedTodos)
  } 

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.map((task) => 
        <div key={task.id}>
          <h2>{task.txt}</h2>

          <button onClick={() => deleteTodo(task.id)}>Remover</button>

        </div>)
      }
    </div>
  )
} 

--------- %%%
Adicionando checkbox:

import {useState} from 'react'

export default function App(){

  const [todos, setTodos] = useState([])
  const [todo, setTodo] = useState("")

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }
      
      setTodos(prev => [...prev].concat(newTodo))              

      setTodo("")
    }
  }

  function deleteTodo(id) {
    const updatedTodos = (prev) => [...prev].filter((task) => task.id !== id)
      
    setTodos(updatedTodos)
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.map((task) => 
        <div key={task.id}>

          <h2 
            style={{ 
              textDecoration: task.completed ? "line-through" : "", 
              color: task.completed ? "green" : "red", 
            }}>
              {task.txt}
          </h2>
          
          <button onClick={() => deleteTodo(task.id)}>Remover</button>

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />
        
        </div>)
      }
    </div>
  )
} 

---------------- %%%
Adicionando botão para remover tarefas selecionadas:

import {useState} from 'react'

export default function App(){

  const [todos, setTodos] = useState([])
  const [todo, setTodo] = useState("")

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }

      setTodos(prev => [...prev].concat(newTodo))              

      setTodo("")
    }
  }

  function deleteTodo() {
    const updatedTodos = todos.filter((task) => !task.completed)
    setTodos(updatedTodos)
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.some(task => task.completed) ? <button onClick={deleteTodo}>Remover selecionados</button> : ''}
      //OU {todos.some(task => task.completed) && <button onClick={deleteTodo}>Remover selecionados</button>}

      {todos.map((task) => 
        <div key={task.id}>

          <h2 
            style={{ 
              textDecoration: task.completed ? "line-through" : "", 
              color: task.completed ? "green" : "red", 
            }}>
              {task.txt}
          </h2>

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />

        </div>)
      }
    </div>
  )
}

--------------------- %%%
Adicionando uma forma de editar as tarefas: (FORMA 1 - AI)

import {useState} from 'react'

export default function App(){

  const [todos, setTodos] = useState([])
  const [todo, setTodo] = useState("")
  const [editingId, setEditingId] = useState(null);
  const [editText, setEditText] = useState("");

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }

      setTodos(prev => [...prev].concat(newTodo))              

      setTodo("")
    }
  }

  function deleteTodo() {
    const updatedTodos = todos.filter((task) => !task.completed)
    setTodos(updatedTodos)
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  function editTodo(id, txt) {
    setEditingId(id);
    setEditText(txt);
  }

  function updateTodo(id) {
    const updatedTodos = [...todos].map((task) => {
      if (task.id === id) {
        task.txt = editText;
      }
      return task;
    });
    setTodos(updatedTodos);
    setEditingId(null);
    setEditText("");
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.some(task => task.completed) && <button onClick={deleteTodo}>Remover selecionados</button>}

      {todos.map((task) => 
        <div key={task.id}>
          {editingId === task.id 
          ? 
          (
            <div>
              <input
                type="text"
                value={editText}
                onChange={(e) => setEditText(e.target.value)}
              />
              <button onClick={() => updateTodo(task.id)}>Salvar</button>
            </div>
          ) 
          : 
          (
            <div>
              <h2 
                style={{ 
                  textDecoration: task.completed ? "line-through" : "", 
                  color: task.completed ? "green" : "red", 
                }}>
                  {task.txt}
              </h2>
              <button onClick={() => editTodo(task.id, task.txt)}>Editar</button>
            </div>
          )}

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />

        </div>)
      }
    </div>
  )
}

--------------------- %%%
Adicionando uma forma de editar as tarefas: (FORMA 2 - VIDEO)

import {useState} from 'react'

export default function App(){

  const [todos, setTodos] = useState([])
  const [todo, setTodo] = useState("")
  const [editingTodo, setEditingTodo] = useState(null)
  const [editText, setEditText] = useState("")

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }
      
      setTodos(prev => [...prev].concat(newTodo))              

      setTodo("")
    }
  }

  function deleteTodo(id) {
    const updatedTodos = (prev) => [...prev].filter((task) => task.id !== id)
      
    setTodos(updatedTodos)
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  function editTodo(id){
    const updatedTodos = [...todos].map((task) => {
      if (task.id === id) {
        task.txt = editText
      }
      return task
    })
    
    setTodos(updatedTodos)
    setEditingTodo(null)
    setEditText("")
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.map((task) => 
        <div key={task.id}>

          {editingTodo === task.id 
          ? 
            (<input type="text" onChange={(e) => setEditText(e.target.value)} value={editText} />)
          :
            (<h2>{task.txt}</h2>)
          }
          
          <button onClick={() => deleteTodo(task.id)}>Remover</button>

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />
          
          {editingTodo === task.id 
          ?
            (<button onClick={() => editTodo(task.id)}>Enviar mudanças</button>)
          :
            (<button onClick={() => setEditingTodo(task.id)}>Editar</button>)
          }

        </div>)
      }
    </div>
  )
} 

----
Versão enxuta:

import {useState} from 'react'

export default function App(){

  const [todos, setTodos] = useState([])
  const [todo, setTodo] = useState("")
  const [editingTodo, setEditingTodo] = useState(null)
  const [editText, setEditText] = useState("")

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }

      setTodos(prev => [...prev, newTodo])             //OU setTodos([...todos, newTodo])           

      setTodo("")
    }
  }

  function deleteTodo(id) {
    setTodos(todos.filter((task) => task.id !== id))
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  function editTodo(id){
    const updatedTodos = [...todos].map((task) => {
      if (task.id === id) {
        task.txt = editText
      }
      return task
    })

    setTodos(updatedTodos)
    setEditingTodo(null)
    setEditText("")
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.map((task) => 
        <div key={task.id}>

          {editingTodo === task.id 
          ? 
            (<input type="text" onChange={(e) => setEditText(e.target.value)} value={editText} />)
          :
            (<h2>{task.txt}</h2>)
          }

          <button onClick={() => deleteTodo(task.id)}>Remover</button>

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />

          {editingTodo === task.id 
          ?
            (<button onClick={() => editTodo(task.id)}>Enviar mudanças</button>)
          :
            (<button onClick={() => setEditingTodo(task.id)}>Editar</button>)
          }

        </div>)
      }
    </div>
  )
}

--------------------- %%%
Salvando os todos no local storage usando useEffect: (Exemplo do Video)

import {useState, useEffect} from 'react'

export default function App(){

  const [todos, setTodos] = useState( JSON.parse(localStorage.getItem("todos")) ?? []);
  const [todo, setTodo] = useState("")
  const [editingTodo, setEditingTodo] = useState(null)
  const [editText, setEditText] = useState("")

  useEffect(() => {
    const temp = JSON.stringify(todos)
    localStorage.setItem("todos", temp)
  }, [todos])

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }

      setTodos(prev => [...prev, newTodo])             //OU setTodos([...todos, newTodo])           

      setTodo("")
    }
  }

  function deleteTodo(id) {
    setTodos(todos.filter((task) => task.id !== id))
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  function editTodo(id){
    const updatedTodos = [...todos].map((task) => {
      if (task.id === id) {
        task.txt = editText
      }
      return task
    })

    setTodos(updatedTodos)
    setEditingTodo(null)
    setEditText("")
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.map((task) => 
        <div key={task.id}>

          {editingTodo === task.id 
          ? 
            (<input type="text" onChange={(e) => setEditText(e.target.value)} value={editText} />)
          :
            (<h2>{task.txt}</h2>)
          }

          <button onClick={() => deleteTodo(task.id)}>Remover</button>

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />

          {editingTodo === task.id 
          ?
            (<button onClick={() => editTodo(task.id)}>Enviar mudanças</button>)
          :
            (<button onClick={() => setEditingTodo(task.id)}>Editar</button>)
          }

        </div>)
      }
    </div>
  )
}

--------------- %%%
Salvando no local Storage (exemplo da AI)

import {useState, useEffect} from 'react'

export default function App(){

  const [todos, setTodos] = useState(() => {
    const storedTasks = localStorage.getItem('todos');
    return storedTasks ? JSON.parse(storedTasks) : [];
  })
  //const [todos, setTodos] = useState( JSON.parse(localStorage.getItem("todos")) ?? []);
  //const [todos, setTodos] = useState(() => localStorage.getItem('todos') ? JSON.parse(localStorage.getItem('todos')) : []);
  const [todo, setTodo] = useState("")
  const [editingId, setEditingId] = useState(null);
  const [editText, setEditText] = useState("");

  useEffect(() => {
    const temp = JSON.stringify(todos)
    localStorage.setItem("todos", temp)
  }, [todos])

  function addTodo(e){                             
    e.preventDefault()                                     

    if(todo.trim() !== ""){ 
      const newTodo = {
        id: new Date().getTime(),                          
        txt: todo,
        completed: false,
      }

      setTodos(prev => [...prev].concat(newTodo))              

      setTodo("")
    }
  }

  function deleteTodo() {
    const updatedTodos = todos.filter((task) => !task.completed)
    setTodos(updatedTodos)
  } 

  function toggleComplete(id){
    const updatedTodos = [...todos].map((task) => {       
      if (task.id === id) {
        task.completed = !task.completed
      }
      return task
    })

    setTodos(updatedTodos)
  }

  function editTodo(id, txt) {
    setEditingId(id);
    setEditText(txt);
  }

  function updateTodo(id) {
    const updatedTodos = [...todos].map((task) => {
      if (task.id === id) {
        task.txt = editText;
      }
      return task;
    });
    setTodos(updatedTodos);
    setEditingId(null);
    setEditText("");
  }

  return(
    <div>
      <form onSubmit={addTodo}>
        <input type="text" value={todo} onChange={(e) => setTodo(e.target.value)} />
        <button type="submit">Adicionar</button>
      </form>

      {todos.some(task => task.completed) && <button onClick={deleteTodo}>Remover selecionados</button>}

      {todos.map((task) => 
        <div key={task.id}>
          {editingId === task.id ? (
            <div>
              <input
                type="text"
                value={editText}
                onChange={(e) => setEditText(e.target.value)}
              />
              <button onClick={() => updateTodo(task.id)}>Salvar</button>
            </div>
          ) : (
            <div>
              <h2 
                style={{ 
                  textDecoration: task.completed ? "line-through" : "", 
                  color: task.completed ? "green" : "red", 
                }}>
                  {task.txt}
              </h2>
              <button onClick={() => editTodo(task.id, task.txt)}>Editar</button>
            </div>
          )}

          <input type="checkbox" onChange={() => toggleComplete(task.id)} checked={task.completed} />

        </div>)
      }
    </div>
  )
}

-------------------------------------- ###
TODO LIST COM BARRA DE PESQUISA, FILTRO, CATEGORIAS E ORDEM 
VIDEO: https://www.youtube.com/embed/YVEVrigByKY

Recebendo os dados das tarefas salvas:

import { useState } from 'react'

export default function App(){

  const [todos, setTodos] = useState([
    {
      id: 1,
      text: "Tarefa 1",
      category: "Trabalho",
      isCompleted: false,
    },
    {
      id: 2,
      text: "Tarefa 2",
      category: "Pessoal",
      isCompleted: false,
    },
    {
      id: 3,
      text: "Tarefa 3",
      category: "Estudos",
      isCompleted: false,
    },
  ])

  return(
    <>
      <div>
        {todos.map((todo) => (
            
          <div>
            <h2>{todo.text}</h2>
            <p>{todo.category}</p>
          </div>

          <div>
            <button>Completar</button>
            <button>Remover</button>
          </div>
            
          <hr />

        ))}
      </div>
    </>
  )
}

-------------- %%%
Separando o todo em um componente separado

-Arquivo Todo.jsx dentro da pasta components:

export default function Todo({todo}){

  return(
    <div>
      <div>
        <h2>{todo.text}</h2>
        <p>{todo.category}</p>
      </div>

      <div>
        <button>Completar</button>
        <button>Remover</button>
      </div>
        
      <hr />
    </div>
  )
}

-----
-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'

export default function App(){

  const [todos, setTodos] = useState([
    {
      id: 1,
      text: "Tarefa 1",
      category: "Trabalho",
      isCompleted: false,
    },
    {
      id: 2,
      text: "Tarefa 2",
      category: "Pessoal",
      isCompleted: false,
    },
    {
      id: 3,
      text: "Tarefa 3",
      category: "Estudos",
      isCompleted: false,
    },
  ])

  return(
    <>
      <div>
        {todos.map((todo) => (           
          <Todo todo={todo} />
        ))}
      </div>
    </>
  )
}

--------------- %%%
Criando um componente para adicionar tarefas:

-Arquivo TodoForm.jsx dentro da pasta components:

import { useState } from 'react'

export default function TodoForm({addTodo}){

  const [value, setValue] = useState("")
  const [category, setCategory] = useState("")

  function handleSubmit(e) {
    e.preventDefault();
    if(!value || !category) return;
    addTodo(value, category);
    setValue("");
    setCategory("");
  }

  return(
    <div>
      <form onSubmit={handleSubmit}>

        <input 
          type="text" 
          placeholder="Digite a nova tarefa"
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />

        <select 
          value={category}
          onChange={(e) => setCategory(e.target.value)}
        >
          <option value="">Selecione a categoria:</option>
          <option value="Categoria1">CATEGORIA 1</option>
          <option value="Categoria2">CATEGORIA 2</option>
          <option value="Categoria3">CATEGORIA 3</option>
        </select>

        <button type="submit">Criar tarefa</button>
      </form>
    </div>
  )
}

--------
-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'
import TodoForm from './components/TodoForm'

export default function App(){

  const [todos, setTodos] = useState([])

  function addTodo(text, category) {
    const newTodos = [...todos, {
      id: Math.floor(Math.random() * 1000),
      text, 
      category, 
      isCompleted: false,
    }]

    setTodos(newTodos)
  }

  return(
    <>
      <TodoForm addTodo={addTodo} />

      <div>
        {todos.map((todo) => (    
          <Todo key={todo.id} todo={todo} />
        ))}
      </div>
    </>
  )
}

----------------- %%%
Adicionando um botão de remover tarefas:

-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'
import TodoForm from './components/TodoForm'

export default function App(){

  const [todos, setTodos] = useState([])

  function addTodo(text, category) {
    const newTodos = [...todos, {
      id: Math.floor(Math.random() * 1000),
      text, 
      category, 
      isCompleted: false,
    }]

    setTodos(newTodos)
  }

  function removeTodo(id) {
    const filterTodos = [...todos].filter(todo => todo.id !== id ? todo : null)

    setTodos(filterTodos)
  }

  return(
    <>
      <TodoForm addTodo={addTodo} />

      <div>
        {todos.map((todo) => (    
          <Todo key={todo.id} todo={todo} removeTodo={removeTodo} />
        ))}
      </div>
    </>
  )
}

----------
--Arquivo Todo.jsx dentro da pasta components:

export default function Todo({todo, removeTodo}){

  return(
    <div>
      <div>
        <h2>{todo.text}</h2>
        <p>{todo.category}</p>
      </div>

      <div>
        <button>Completar</button>
        <button onClick={() => removeTodo(todo.id)}>Remover</button>
      </div>
        
      <hr />
    </div>
  )
}

---------------- %%%
Adicionando botão para completar tarefa: (sem checkbox)

-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'
import TodoForm from './components/TodoForm'

export default function App(){

  const [todos, setTodos] = useState([])

  function addTodo(text, category) {
    const newTodos = [...todos, {
      id: Math.floor(Math.random() * 1000),
      text, 
      category, 
      isCompleted: false,
    }]

    setTodos(newTodos)
  }

  function removeTodo(id) {
    const filterTodos = [...todos].filter(todo => todo.id !== id ? todo : null)

    setTodos(filterTodos)
  }

  function completeTodo(id) {
    const completedTodos = [...todos].map((todo) => 
      todo.id === id ? {...todo, isCompleted: !todo.isCompleted} : todo
    )
    setTodos(completedTodos)
  }

  return(
    <>
      <TodoForm addTodo={addTodo} />

      <div>
        {todos.map((todo) => (    
          <Todo key={todo.id} todo={todo} removeTodo={removeTodo} completeTodo={completeTodo} />
        ))}
      </div>
    </>
  )
}

----------
--Arquivo Todo.jsx dentro da pasta components:

export default function Todo({todo, removeTodo, completeTodo}){

  return(
    <div>
      <div 
        style={{ 
          color: todo.isCompleted ? "green" : "red", 
          textDecoration: todo.isCompleted ? "line-through" : ""
      }}>
        <h2>{todo.text}</h2>
        <p>{todo.category}</p>
      </div>
      
      <div>
        <button onClick={() => completeTodo(todo.id)}>{todo.isCompleted ? "NÃO REALIZADA" : "COMPLETAR" }</button>
        <button onClick={() => removeTodo(todo.id)}>Remove</button>
      </div>

      <hr />
    </div>
  )
}

--------------------------- %%%
Adicionando uma barra de busca:

-Arquivo Search.jsx dentro da pasta components:

export default function Search({search, setSearch}){

  return(
    <div>
      <input
        type="text"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        placeholder="Digite o que você busca..."
      />

      <hr />
    </div>
  )
}

------------
-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'
import TodoForm from './components/TodoForm'
import Search from './components/Search'

export default function App(){

  const [todos, setTodos] = useState([])
  const [search, setSearch] = useState("")

  function addTodo(text, category) {
    const newTodos = [...todos, {
      id: Math.floor(Math.random() * 1000),
      text, 
      category, 
      isCompleted: false,
    }]

    setTodos(newTodos)
  }

  function removeTodo(id) {
    const filterTodos = [...todos].filter(todo => todo.id !== id ? todo : null)

    setTodos(filterTodos)
  }

  function completeTodo(id) {
    const completedTodos = [...todos].map((todo) => 
      todo.id === id ? {...todo, isCompleted: !todo.isCompleted} : todo
    )
    setTodos(completedTodos)
  }

  return(
    <>
      <Search search={search} setSearch={setSearch} />

      <TodoForm addTodo={addTodo} />

      <div>
        {todos
          .filter((todo) => todo.text.toLowerCase().includes(search.toLowerCase()))
          .map((todo) => (    
            <Todo key={todo.id} todo={todo} removeTodo={removeTodo} completeTodo={completeTodo} />
        ))}
      </div>
    </>
  )
}

------------------------ %%%
Adicionando filtro de ordenação:

-Arquivo Filter.jsx dentro da pasta components:

export default function Filter({filter, setFilter, setSort}){

  return(
    <div>
      <h3>Filtrar:</h3>

      <div>
        <p>Status:</p>
        <select value={filter} onChange={(e) => setFilter(e.target.value)}>
          <option value="All">Todas</option>
          <option value="Completed">Completas</option>
          <option value="Incomplete">Incompletas</option>
        </select>
      </div>

      <hr />

      <div>
        <p>Ordem alfabética:</p>
        <button onClick={() => setSort("Asc")}>Asc</button>
        <button onClick={() => setSort("Desc")}>Desc</button>
      </div>

      <hr />
    </div>
  )
}

-------------
-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'
import TodoForm from './components/TodoForm'
import Search from './components/Search'
import Filter from './components/Filter'

export default function App(){

  const [todos, setTodos] = useState([])
  const [search, setSearch] = useState("")
  const [filter, setFilter] = useState("All")
  const [sort, setSort] = useState("Asc")


  function addTodo(text, category) {
    const newTodos = [...todos, {
      id: Math.floor(Math.random() * 1000),
      text, 
      category, 
      isCompleted: false,
    }]

    setTodos(newTodos)
  }

  function removeTodo(id) {
    const filterTodos = [...todos].filter(todo => todo.id !== id ? todo : null)

    setTodos(filterTodos)
  }

  function completeTodo(id) {
    const completedTodos = [...todos].map((todo) => 
      todo.id === id ? {...todo, isCompleted: !todo.isCompleted} : todo
    )
    setTodos(completedTodos)
  }

  return(
    <>
      <Search search={search} setSearch={setSearch} />

      <Filter filter={filter} setFilter={setFilter} setSort={setSort} />

      <TodoForm addTodo={addTodo} />

      <div>
        {todos
          .filter((todo) => filter === "All" ? true : filter === "Completed" ? todo.isCompleted : !todo.isCompleted)
          .filter((todo) => todo.text.toLowerCase().includes(search.toLowerCase()))
          .sort((a, b) => sort === "Asc" ? a.text.localeCompare(b.text) : b.text.localeCompare(a.text))
          .map((todo) => (    
            <Todo key={todo.id} todo={todo} removeTodo={removeTodo} completeTodo={completeTodo} />
        ))}
      </div>
    </>
  )
}

----------------------
Os outros arquivos permanecem os mesmos:

-Arquivo Todo.jsx:

export default function Todo({todo, removeTodo, completeTodo}){

  return(
    <div>
      <div 
        style={{ 
          color: todo.isCompleted ? "green" : "red", 
          textDecoration: todo.isCompleted ? "line-through" : ""
      }}>
        <h2>{todo.text}</h2>
        <p>{todo.category}</p>
      </div>
      
      <div>
        <button onClick={() => completeTodo(todo.id)}>{todo.isCompleted ? "NÃO REALIZADA" : "COMPLETAR" }</button>
        <button onClick={() => removeTodo(todo.id)}>Remove</button>
      </div>

      <hr />
    </div>
  )
}

OUTRA FORMA COM CHECKBOX:

export default function Todo({todo, removeTodo, completeTodo}){

  return(
    <div>
      <div 
        style={{ 
          color: todo.isCompleted ? "green" : "red", 
          textDecoration: todo.isCompleted ? "line-through" : ""
      }}>
        <h2>{todo.text}</h2>
        <p>{todo.category}</p>
      </div>
      
      <div>
        <input type="checkbox" onChange={() => completeTodo(todo.id)} checked={todo.isCompleted} />    
        {todo.isCompleted && <button onClick={() => removeTodo(todo.id)}>Remove</button>}   
      </div>

      <hr />
    </div>
  )
}

-----
-Arquivo TodoForm.jsx:

import { useState } from 'react'

export default function TodoForm({addTodo}){

  const [value, setValue] = useState("")
  const [category, setCategory] = useState("")

  function handleSubmit(e) {
    e.preventDefault();
    if(!value || !category) return;
    addTodo(value, category);
    setValue("");
    setCategory("");
  }

  return(
    <div>
      <form onSubmit={handleSubmit}>

        <input 
          type="text" 
          placeholder="Digite a nova tarefa"
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />

        <select 
          value={category}
          onChange={(e) => setCategory(e.target.value)}
        >
          <option value="">Selecione a categoria:</option>
          <option value="Categoria1">CATEGORIA 1</option>
          <option value="Categoria2">CATEGORIA 2</option>
          <option value="Categoria3">CATEGORIA 3</option>
        </select>

        <button type="submit">Criar tarefa</button>

        <hr />
      </form>
    </div>
  )
}

-----
-Arquivo Search.jsx:

export default function Search({search, setSearch}){

  return(
    <div>
      <input
        type="text"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        placeholder="Digite o que você busca..."
      />

      <hr />
    </div>
  )
}

---------------- ###
Forma alternativa com botão único para remover tarefas selecionadas:

-Arquivo Todo.jsx:

export default function Todo({todo, completeTodo}){

  return(
    <div>
      <div 
        style={{ 
          color: todo.isCompleted ? "green" : "red", 
          textDecoration: todo.isCompleted ? "line-through" : ""
      }}>
        <h2>{todo.text}</h2>
        <p>{todo.category}</p>
      </div>
      
      <div>
        <input type="checkbox" onChange={() => completeTodo(todo.id)} checked={todo.isCompleted} />
      </div>

      <hr />
    </div>
  )
}

--------
-Arquivo TodoForm.jsx:

import { useState } from 'react'

export default function TodoForm({addTodo, removeTodo, todos}){

  const [value, setValue] = useState("")
  const [category, setCategory] = useState("")

  function handleSubmit(e) {
    e.preventDefault();
    if(!value || !category) return;
    addTodo(value, category);
    setValue("");
    setCategory("");
  }

  return(
    <div>
      <form onSubmit={handleSubmit}>

        <input 
          type="text" 
          placeholder="Digite a nova tarefa"
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />

        <select 
          value={category}
          onChange={(e) => setCategory(e.target.value)}
        >
          <option value="">Selecione a categoria:</option>
          <option value="Categoria1">CATEGORIA 1</option>
          <option value="Categoria2">CATEGORIA 2</option>
          <option value="Categoria3">CATEGORIA 3</option>
        </select>

        <button type="submit">Criar tarefa</button>

        {todos.some(todo => todo.isCompleted) && <button onClick={removeTodo}>Remover tarefas selecionadas</button>}

        <hr />
      </form>
    </div>
  )
}

----------
-Arquivo App.jsx:

import { useState } from 'react'
import Todo from './components/Todo'
import TodoForm from './components/TodoForm'
import Search from './components/Search'
import Filter from './components/Filter'

export default function App(){

  const [todos, setTodos] = useState([])
  const [search, setSearch] = useState("")
  const [filter, setFilter] = useState("All")
  const [sort, setSort] = useState("Asc")


  function addTodo(text, category) {
    const newTodos = [...todos, {
      id: Math.floor(Math.random() * 1000),
      text, 
      category, 
      isCompleted: false,
    }]

    setTodos(newTodos)
  }

  function removeTodo() {
    const updatedTodos = [...todos].filter((todo) => !todo.isCompleted)
    setTodos(updatedTodos)
  }

  function completeTodo(id) {
    const completedTodos = [...todos].map((todo) => 
      todo.id === id ? {...todo, isCompleted: !todo.isCompleted} : todo
    )
    setTodos(completedTodos)
  }

  return(
    <>
      <Search search={search} setSearch={setSearch} />

      <Filter filter={filter} setFilter={setFilter} setSort={setSort} />

      <TodoForm addTodo={addTodo} removeTodo={removeTodo} todos={todos} />

      <div>
        {todos
          .filter((todo) => filter === "All" ? true : filter === "Completed" ? todo.isCompleted : !todo.isCompleted)
          .filter((todo) => todo.text.toLowerCase().includes(search.toLowerCase()))
          .sort((a, b) => sort === "Asc" ? a.text.localeCompare(b.text) : b.text.localeCompare(a.text))
          .map((todo) => (    
            <Todo key={todo.id} todo={todo} removeTodo={removeTodo} completeTodo={completeTodo} />
        ))}
      </div>
    </>
  )
}


----------------------------------------------- ###
TODO LIST PERMITINDO TECLADO E MOUSE
VIDEO: https://www.youtube.com/embed/tbot1XH2k5c?autoplay=1

import { useState } from 'react'

export default function App(){

  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  function handleChange(event){
    setNewTask(event.target.value)
  }

  function handleKeyDown(event) {
    const isEnter = event.keyCode === 13;
    const newText = newTask.trim();
    const isTextPresent = newText.length > 0;
    if (isEnter && isTextPresent) {
      addTask(newTask)
    }
  }

  function addTask(){
    if(newTask.trim() !== ""){                           
      setTasks(prev => [...prev, newTask])
      setNewTask("")
    }
  }

  function removeTask(index){
    setTasks(prev => prev.filter((_, i) => i !== index))
    setNewTask("")
  }

  return (
    <>
      <div>
        <input 
          type="text" 
          placeholder="Digite a nova tarefa"
          value={newTask} 
          onChange={handleChange}
          onKeyDown={handleKeyDown}               
        />
        <button onClick={addTask} aria-pressed="true">ADICIONAR</button>
      </div>
      {tasks.map((task, index) => (
        <ul key={index}>
          <li style={{listStyle: 'none'}}>{task}</li>
          <button onClick={() => removeTask(index)}>Remover</button>
        </ul>
      ))}
    </>
  )
}

OBS: É mais recomendado armazenar os keycodes em um arquivo separado.

-Arquivo keycodes.js dentro da pasta helpers:

export const enterCode = 13;

E então importaria essa variavel no arquivo principal:

...
  function handleKeyDown(event) {
    if (event.keyCode === enterCode) {
      console.log("handleKeyDown", event)
    }
  }
...

////////////////////////////////////////////////////////////////&&&
REMOVENDO RELATIVE PATHS NO REACT

É possível utilizar absolute paths ao invés de relative paths.

-------------
Modo create-react-app (sem vite)

No arquivo jsconfig.json (ou tsconfig.json no typescript) adicione o bloco de código:
    {
      "compilerOptions": {
        "baseUrl": "src",
        "paths": {
          "@components/*" : ["components/*"],
          "@routes/*" : ["routes/*"],
          "@contexts/*" : ["contexts/*"],
          "@services/*" : ["services/*"],
        }
      },
      "include": ["src"]
    }

Desta forma, toda vez que for importar algum componente, não é necessário começar com ./ ou ../
Por exemplo:

import ComponenteA from '@components/ComponenteA'

---------------
Modo create react-vite:
LINK: https://dev.to/mizanrifat/streamlining-absolute-imports-in-react-with-typescript-and-vite-2bpp

Adicione o codigo abaixo no arquivo vite.config.js:

 import path from 'path';

 export default {
   // ...other config options
   resolve: {
     alias: {
       '@assets': path.resolve(__dirname, 'src/assets'),
       '@components': path.resolve(__dirname, 'src/components'),
       '@services': path.resolve(__dirname, 'src/services'),
       '@routes': path.resolve(__dirname, 'src/routes'),
       // ...other aliases
     },
   },
 };

Para importar o componente:

import ComponenteA from '@components/ComponenteA'

------

No typescript teria que adicionar o codigo abaixo:

No arquivo tsconfig.json:

 {
   "compilerOptions": {
     "baseUrl": ".",
     "paths": {
       "@/assets": ["./src/assets/*"],
       "@/components": ["./src/components/*"],
       // ...other paths
     }
   }
 }

OBS: Não consegui fazer funcionar no typescript!!!

/////////////////////////////////////////////////////////////// &&&
REDUX 

Serve para criar e gerenciar states. (Ex: criar global states para ser usado em vários componentes)

Instalação:
npm install @reduxjs/toolkit react-redux

----

Crie um arquivo chamado store.js dentro da pasta src. 
Dentro deste arquivo, serão colocadas os states.

-Arquivo store.js:

import {configureStore} from "@reduxjs/toolkit"
import nome_do_reducer1 from './nomedoSlice1'
import nome_do_reducer2 from './nomedoSlice2'

const store = configureStore({ 
  reducer: {
    nome_do_state1 : nome_do_reducer1,
    nome_do_state2 : nome_do_reducer2
  } 
})

---- 

É necessário importar o Provider do Redux no arquivo main.jsx: (ou index.jsx)

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

import {Provider} from 'react-redux'
import {store} from './store.js'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>
)

-------------------------- ###
Básico:

-Arquivo testeSlice.js:


import {createSlice} from "@reduxjs/toolkit"

const initialState = {                                    //O nome InitialState é obrigatório
  pessoas: [
    {id: 1, name: "Ana"},
    {id: 2, name: "Carlos"},
  ],
}

const testeSlice = createSlice({                          //createSlice({name, initialState, reducers})
  name: "nome_do_slice",
  initialState,
  reducers: {
    funcao1: (state, action) => {
      console.log("State: " + state.pessoas[0].id)
      console.log("Action: " + action.payload)            //action.payload recebe o valor enviado pelo dispatch em handleClick
    },
    funcao2: (state, action) => {
      alert("Clicou função 2")
    },
  },
})

export const {funcao1, funcao2} = testeSlice.actions
export default testeSlice.reducer

¨¨¨¨
-Arquivo store.js:

import {configureStore} from "@reduxjs/toolkit"
import testeReducer from "./components/testeSlice"

export const store = configureStore({ 
  reducer: {
    teste: testeReducer,
  }, 
})

¨¨¨¨
-Arquivo App.jsx:

import {funcao1} from './components/testeSlice'
import {useSelector, useDispatch} from 'react-redux'

export default function App() {

  const tudo = useSelector((state) => state.teste.pessoas)

  const dispatch = useDispatch() 

  const handleClick = (parametro) => {
    dispatch(funcao1(parametro))
  }

  const handleClick2 = () => {
    dispatch(funcao2())
  }
  
  return (
    <>
      <p>{tudo[0].name}</p>

      <button onClick={() => handleClick(tudo[0].name)}>Clique</button>

      <button onClick={handleClick2}>Clique</button>
    </>
  )
}

------------- ###
-Arquivo testeSlice.js:

import {createSlice} from "@reduxjs/toolkit"

const initialState = {
  pessoas: [],
}

const testeSlice = createSlice({
  name: "nome_deste_state",
  initialState,
  reducers: {
    funcaoAdd: (state, action) => {
      const newPessoa = { id: Date.now(), name: action.payload };
      state.pessoas.push(newPessoa);
    },
    funcaoRemove: (state, action) => {
      state.pessoas = state.pessoas.filter((pessoa) => pessoa.id !== action.payload)
    },
  },
})

export const {funcaoAdd, funcaoRemove} = testeSlice.actions
export default testeSlice.reducer

¨¨¨¨
-Arquivo store.js:

import {configureStore} from "@reduxjs/toolkit"
import pessoaReducer from "./components/testeSlice"

export const store = configureStore({ 
  reducer: {
    teste: pessoaReducer,
  }, 
})

¨¨¨¨
-Arquivo App.jsx:

import {funcaoAdd, funcaoRemove} from './components/testeSlice'
import {useSelector, useDispatch} from 'react-redux'
import {useState} from 'react'

export default function App() {

  const [novaPessoa, setNovaPessoa] = useState("")
  
  const todos = useSelector((state) => state.teste.pessoas)

  const dispatch = useDispatch() 

  const handleAdd = () => {
    if(novaPessoa) {
      dispatch(funcaoAdd(novaPessoa))
      setNovaPessoa("")
    }
  }

  const handleRemove = (id) => {
    dispatch(funcaoRemove(id))
  }
  
  return (
    <>
        <div>
          <input 
            type="text" 
            placeholder="Digite o nome" 
            value={novaPessoa}
            onChange={(e) => setNovaPessoa(e.target.value)}
          /> 
          <button onClick={() => handleAdd()}>Adicionar</button>
        </div>
      
      {todos.map((pessoa) => (
        <div key={pessoa.id}>          
          <h3>{pessoa.name}</h3>
          <button onClick={() => handleRemove(pessoa.id)}>Remover</button>
          <hr />
        </div>
      ))}
    </>
  )
}

--------------------------- ###
VIDEO: https://www.youtube.com/embed/YPVUPpKADb8?autoplay=1

Redux possui:

//Store:
{
  count: {value : 0}
  isLoggedIn: {value: false}
}

state.count.value
state.isLoggedIn.value

//Actions:
const increment = {type: "INCREMENT", payload: 10}

//Reducers:
ACTION -> REDUCER -> CHANGE STATE

----------
-Arquivo cartCountSlice.js:

import {createSlice} from "@reduxjs/toolkit"

const initialState = {
  value: 0,
}

const cartCountSlice = createSlice({
  name: "cartCount",
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    incrementByAmount: (state, action) => {
      if (action.payload){                          //para evitar que algo seja enviado se o input estiver vazio
        state.value += action.payload
      } 
    }
  },
})

export const {increment, decrement, incrementByAmount} = cartCountSlice.actions
export default cartCountSlice.reducer

--------

Arquivo main.jsx: (ou index.jsx)

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

import {configureStore} from "@reduxjs/toolkit"
import {Provider} from 'react-redux'
import cartCountReducer from './cartCountSlice'

const store = configureStore({ 
  reducer: {
    cartCount : cartCountReducer
  } 
})

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>
)

OBS: Neste exemplo, o store não foi criado em um arquivo separado, sendo inserido diretamente no main/index

-------
-Arquivo Pagina1.jsx:

import {useSelector} from 'react-redux'

export function Pagina1() {

  const cartCount = useSelector(state => state.cartCount.value)

  return(
    <div>
      <h2>Contagem de itens: {cartCount}</h2>
    </div>
  )
}


-------
-Arquivo Pagina2.jsx:

import {useState} from 'react'
import {useDispatch} from 'react-redux'
import {increment, decrement, incrementByAmount} from './components/cartCountSlice'
import {useSelector} from 'react-redux'      //**Opcional para pegar e usar o valor do state neste componente

export function Pagina2() {

  const [incrementAmount, setIncrementAmount] = useState(0)

  const cartCount = useSelector(state => state.cartCount.value)      //**Opcional 

  const dispatch = useDispatch()

  return (
    <div>
      <button onClick={() => dispatch(increment())}>Aumentar</button>

      <button onClick={() => dispatch(decrement())}>Diminuir</button>

      <input onChange={(e) => setIncrementAmount(parseInt(e.target.value))} />

      <button onClick={() => dispatch(incrementByAmount(incrementAmount))}>Add X items</button>

      <h3>Número de itens: {cartCount}</h3>           //**Opcional 
    </div>
  )
}

--------
-Arquivo App.jsx:

import {Pagina1} from './components/Pagina1'
import {Pagina2} from './components/Pagina2'

export default function App(){
  return(
    <>
      <Pagina1 />
      <Pagina2 />
    </>
  )
}

-------------###
CRUD (Add e Remove) COM REDUX TOOLKIT
VIDEO: https://www.youtube.com/embed/QgK_-G-hWeA?autoplay=1

-Arquivo movieSlice.js dentro da pasta src:

import {createSlice} from "@reduxjs/toolkit"

const initialState = {
  filmes: [
    {id: 1, name: "Interstellar"},
    {id: 2, name: "Harry Potter"},
  ],
}

const movieSlice = createSlice({
  name: "movies",
  initialState,
  reducers: {
    addMovie: (state, action) => {
      const newMovie = { id: Date.now(), name: action.payload };
      state.filmes.push(newMovie);
    },
    removeMovie: (state, action) => {
      state.filmes = state.filmes.filter((movie) => movie.id !== action.payload)
    },
  },
})

export const {addMovie, removeMovie} = movieSlice.actions
export default movieSlice.reducer

¨¨¨¨
Forma alternativa de criar id (criará o id com o número seguinte ao último id criado):
...
  reducers: {
    addMovie: (state, action) => {
      const newId = state.filmes.length ? state.filmes[state.filmes.length - 1].id + 1 : 1;
      const newMovie = { id: newId, name: action.payload };
      state.filmes.push(newMovie);
    },
  ...
  }
...

--------------
-Arquivo store.js dentro da pasta src:

import {configureStore} from "@reduxjs/toolkit"
import movieReducer from "./movieSlice"

export const store = configureStore({ 
  reducer: {
    movies: movieReducer,
  }, 
})

--------------
-Arquivo MovieList.jsx dentro da pasta components:

import {useSelector, useDispatch} from 'react-redux'
import {removeMovie} from '../movieSlice'

export const MovieList = () => {

  const AllMovies = useSelector((state) => state.movies.filmes)

  const dispatch = useDispatch() 

  const handleRemoveMovie = (id) => {
    dispatch(removeMovie(id))
  }

  return (
    <div>
      <h2>Lista de filmes</h2>

      {AllMovies.map((movie) => (
        <div key={movie.id}>
          <h3>{movie.name}</h3>
          <button onClick={() => handleRemoveMovie(movie.id)}>Remover</button>
          <hr />
        </div>
      ))}

    </div>
  )
}

-------------
-Arquivo MovieInput.jsx dentro da pasta components:

import {useState} from 'react'
import {addMovie} from '../movieSlice'
import {useDispatch} from 'react-redux'

export const MovieInput = () => {

  const [newMovie, setNewMovie] = useState("")

  const dispatch = useDispatch()

  const handleAddMovie = () => {
    if(newMovie) {
      dispatch(addMovie(newMovie))
      setNewMovie("")
    }
  }

  return (
    <>
      <input value={newMovie} onChange={(e) => setNewMovie(e.target.value)}/>
      <button onClick={handleAddMovie}>Adicionar filme</button>
    </>
  )
}

--------------
-Arquivo App.jsx:

import {MovieList} from './components/MovieList'
import {MovieInput} from './components/MovieInput'

export default function App() {
  return (
    <>
      <MovieInput />
      <MovieList />
    </>
  )
}

----------------------------- ###



////////////////////////////////////////////////////////////////&&&






















BASE
////////////////////////////////////////////////////////////////&&&

VIDEO: 

import React from 'react';

export default function App() {

  return (
    <>
    </>
  );
}



























////////////////////////////////////////////////////////////////&&&

VIDEO: 



import React from 'react';

export default function App() {

  return (
    <>
    </>
  );
}




































------------------------------------------------------&&&
ALURA:
CRIANDO O SITE COM OS COMPONENTES CRIADOS NO REACT:

Crie a pasta do componente dentro da pasta src:

src
  header
    header.css
    header.js
  assets
    icons
      logo.svg


-Dentro do arquivo header.js:
OBS: troque as classes por className

import React from 'react'
import './header.css'
import Logotipo from '../assets/icons/logo.svg'           *crie uma variavel para receber o caminho do arquivo

export default function Header() {
  return(

    <section className="header-content">
      <div className="center">
        <div className="logo">
          <a href="#">
            <img src={Logotipo} />             *troque o caminho do src pela variavel criada e remova as aspas
          </a>
        </div>
        <div className="menu">
          <a href="#">HOME</a>
          <a href="#">LOJA</a>
          <a href="#">CONTATO</a>
        </div>
      </div>
    </section>

  )
}

-Dentro do arquivo App.js:

import React from 'react'
import './App.css'
import Header from './header/header.js'         

export default function App() {
  return(
    <>
      <Header/>
    </>
  )
}


OBS: A cor de fundo do site seria alterado no arquivo App.css:

body {
  background-color: red;
}





