
////////////////////////////////////////////////////////// &&& ###
VIDEO: https://www.youtube.com/embed/192HgwRgOYE

Instalação no windows:
git-scm.com

Standalone Installer
Git for Windows/x64 Setup.

Em "choosing the default editor used by Git", escolha o VSCode (ou bloco de notas) ao invés do Vim

Para saber se o git foi realmente instalado e saber a versão instalada, digite no prompt de comando do windows (cmd):
git --version

Outra forma é abrir o git bash e digitar o mesmo codigo acima.

----------------------------- ###

Criando um repositório git:

-Crie uma pasta do projeto.
-No terminal do windows, vá até o diretório da pasta: cd C:\Diretorio\...\Nomedapasta
-Digite no terminal: git init
Será criada a pasta .git (que fica oculta do sistema)

Abra a pasta do projeto no VSCode e adicione o arquivo teste.html.

Entre o arquivo e o repositório .git está uma área chamada stage
arquivo => stage => .git
Para adicionar o arquivo no stage é usado o git add
Para mover o arquivo do stage para o .git é usado o git commit

Então é necessário mover o arquivo primeiro para o stage e depois para o .git

O comando git status mostra quantos commits da pasta do projeto tem dentro do git. 
Além disso, ele mostra a quantidade de arquivos que estão dentro da pasta do projeto, mas ainda não estão no .git

OBS: 
Para visualizar todos os arquivos em um diretorio, digite: dir
Para limpar (clear) o terminal de coisas antigas, digite: cls


------------------------------ ###
STAGE

Adicionando arquivos no stage:

Para adicionar o arquivo criado teste.html no stage digite no terminal:
git add teste.html

Caso tenha mais de 1 arquivo para adicionar, pode-se usar o comando: git add .
Com isso, todos os arquivos que ainda não foram adicionados serão então 

outra forma:
git add -A            (para adcionar no stage apenas os que não forma adicionados)

Para remover um arquivo do stage:
git reset teste.html

Para restaurar:
git restore teste.html

Para descobrir as diferenças entre a versão do arquivo staged e a atual:
git diff --staged

Voltando atrás após fazer um stage:
git reset --hard HEAD

------------------------------ ###

Criando um usuario e email:

Antes do mover o arquivo para o .git, é necessário criar um usuário para que cada versão alterada do código possua uma identificação

Para criar um usuario, digite no terminal:
git config --global user.name Ricardo
(o git só armazenará o primeiro nome)

Então a melhor forma de se fazer é colocar entre aspas:
git config --global user.name "Ricardo Lacorte"

Para criar um email:
git config --global user.email "nomedoemail@gmail.com"

Para ver as configurações e todos os usuarios e senhas cadastradas:
git config --list
ou
git config --global --list               (aparece apenas o username e email)

Para alterar o nome do usuario ou email é só digitar novamente:
git config --global user.name "Thiago Campos"

------------------------------- ###
COMMIT

Adicionando arquivos do stage para o .git:

Para mover o arquivo criado teste.html do stage para o .git, digite no terminal:
git commit -m "Descrição da alteração no arquivo"

Por exemplo:
git commit -m "Alterando a imagem do logo no site"

Atenção!!!
Caso faça alterações no arquivo teste.html, é preciso sempre primeiro enviar para o stage e depois para o .git:
1o = git add teste.html        (ou git add .)
2o = git commit -m "Alterando o título no site"

Se quiser alterar a mensagem do ultimo commit enviado:
git commit --amend -m "Mudando o titulo no site"

----------------------------------- ###

Para saber as versões de arquivos armazenadas no .git:
git log

Aparecerá o autor e o email, além da data de cada versão e a mensagem

A versão mais atual estará com a identificação (HEAD -> master)

Caso dê um problema ao mostrar o log, aperte a tecla q para sair

Para fazer um log reduzido:
git shortlog
Será mostrado somente os autores e seus respectivos commits

Para mostrar o shortlog apenas os autores e o numero de commits:
git shortlog -sn

Para resumir as infos do log em 1 linha:
git log --oneline

Para resumir as infos do log em 5 linhas:
git log --oneline -5

Para filtrar por autor:
git log --author="Ricardo Lacorte"

Para filtrar por data:
git log --before="YYYY-MM-DD"

Para filtrar por pasta:
git log -- Nomedapasta/

Log mostrando os checkouts, clones, commits:
git reflog

Extensão no VSCode para visualizar melhor os logs:
Git Graph

---------------------------------- ###

Para voltar para uma versão anterior gravada:

Copie os 6 primeiros caracteres da versão que quer retornar e digite no terminal:
git checkout 6CARACTERES


Por exemplo, digamos que queira voltar para a versão 1-1:

commit e2dba2f35477dcd5df36ee1461eaf22e3ad6ae84 (HEAD -> master)
Author: Ricardo <ricklac87@gmail.com>
Date:   Wed Jul 16 11:37:05 2025 -0300

    teste git v1-2

commit 211c0ce8876d224a3b82e170a891ac6310740f18
Author: Ricardo <ricklac87@gmail.com>
Date:   Wed Jul 16 11:29:23 2025 -0300

    teste git v1-1

No terminal será digitado:
git checkout 211c0c

--------

Outra forma:
git revert codigodocommit

por exemplo:
git revert 211c0ce8876d224a3b82e170a891ac6310740f18

------

Atenção!!!
Só volte em versões anteriores se já tiver feito commit nas alterações (adicione ao stage e depois mande pro .git)

Para retornar de volta para a versão mais recente:
git checkout master
(ou caso dê erro: git checkout main)  

OBS: Muito em breve a versão atual chamada de master passará a se chamar main. Então será preciso usar git checkout main

-----------

Desfazendo o ultimo commit que foi realizado:
git reset --hard HEAD~1

Consertando um commit na hora:
git commit --amend

--------------------------------- ###
CRIANDO BRANCHES (ramificações)

Digite no terminal:
git branch nome-do-branch

Ex: git branch pagina-de-contatos

OBS: NÃO UTILIZE ESPAÇOS E NEM CARACTERES ESPECIAIS. Apenas - no lugar de espaços

Para ir para o branch criado ou mudar de branch, digite:
git checkout nome-do-branch

Isso serviria para sair do master/main (ou outro branch) e ir para o branch escolhido

Para criar um branch novo e automaticamente ir para ele:
git checkout -b nome-do-branch

Não esqueça de fazer commits de alterações pendentes antes de mudar de branch

O novo padrão é que a linha principal que era chamada de master passará a ser chamada de main.
Então caso não haja um main, pode ser criado um branch principal chamado main digitando:
git branch main

Com isso, será criado o branch main, que é o novo padrão a ser utilizado no lugar de master. 
Caso exista um master e ele seja o branch principal, não há necessidade de mudar para main, a não ser que o chefe do projeto queira.
Em algumas empresas o nome do branch principal pode variar para release, deploy, etc...

ATENÇÃO!!!
Só é recomendado criar o branch main ao iniciar um repositório do zero. Normalmente quem faz isso é o dono/chefe do projeto.

Para excluir uma branch:
git branch -D nomedobranch

Para renomear o branch em que está:
git branch -m nomenovo

Para desfazer uma alteração e voltar para o ultimo ponto de um branch (voltando os dados a como estavam antes):
git checkout -- teste.html

----------------------------- ###

MERGE (FUSÃO/FUNDIR) PARA A BRANCH PRINCIPAL

No terminal, vá para a branch principal:
git checkout master
(ou git checkout main)

Para fundir o(s) arquivo(s) que você estava trabalhando com a branch principal, digite:
git merge nome-da-branch

Por exemplo, digamos que esteja trabalhando no arquivo contatos.html que esteja na branch pagina-de-contatos. Então primeiramente vá para a branch principal (git checkout main) e depois faça o merge (git merge pagina-de-contatos).

Antes de realizar o merge, é bom atualizar os arquivos puxando os dados armazenados no github usando o pull:
git pull origin main

---------------------------------- ###

GITHUB

Criar um novo repositório
(https://github.com/ricklac87/cursos-web.git)


-Para adicionar os arquivos no github:
git remote add origin https://github.com/ricklac87/cursos-web.git
git branch -M main     
git push -u origin main


Para remover arquivos do github:
git remote remove origin

Para ver detalhes do repositorio no github (como url, branch):
git remote show origin

Para trocar a url vinculada do github:
git remote set-url origin https://url...

-------------------------- ###

PEGANDO A VERSÃO MAIS RECENTE DOS ARQUIVOS NO GITHUB:

No terminal:
git pull main
ou
git pull origin main

É recomendado fazer o pull antes de fazer o push


---------------------------- ###

RESUMO

Iniciando um projeto. Dentro da pasta do projeto, para criar uma pasta .git:
git init

Para clonar uma pasta do github:
git clone https://url 
ou caso não tenha sido criada a pasta do projeto ainda:
git clone https://url nomedapasta

Primeiro, vá para o ultimo commit mais atualizado baixando os arquivos mais recentes no github:
cd nome-do-projeto
git pull main

Ao começar a criar algo novo, primeiro crie um branch e depois mude para ele:
git branch ramo1
git checkout ramo1                       (ou git checkout -b ramo1)

Dentro deste branch criado, toda vez que um arquivo for alterado ou for criado um novo arquivo, deve fazer:
git add .
git commit -m "nome do commit"                (ou git commit -a -m "nome do commit" )

Antes de fazer o push, atualize os seus arquivos pegando os dados mais atuais do github:
git pull origin main

Após isso, deve-se fazer o push para jogar o branch para o github:
git push origin ramo1

E depois para mandar para o branch principal:
git checkout main
git merge ramo1
git push origin main

------------------------------------ ###

PULL REQUEST:
Serve para que só seja possível fazer o merge caso alguém revise as alterações. Essa é a norma nas empresas.

Primeiro o dono do repositorio no github vai em settings. 
Depois em branches. 
Depois clique no botão Add brench protection rule. 
Selecione Require a pull request before merging e Require approvals.
Em branch name pattern coloque um * . Isso significa que será aplicada essa proteção a todos os branches do projeto.
Clique em Apply para finalizar.


------------------------------------- ###

Criar um Fork:

Serve para criar uma copia de um repositorio só para você.

No github, vá até o repositorio de alguem que você gostaria de copiar para você e clique em fork


------------------------------------ ###

Para clonar um repositorio:

Copie a url de um repositorio no github

Digite no terminal:
git clone https://url.git

------------------------------------ ###

git ignore

Para que o git ignore certas pastas ou arquivos e não envie para o github

Crie o arquivo .gitignore

Dentro do arquivo .gitignore escreva a pasta ou arquivo que quiser que o git ignore:
node_module
.env
anotações minhas.txt

Para ignorar todos os arquivos que tenham uma extensao especifica:
*.txt        (todos os arquivos .txt serão ignorados)

----------------------------------- ###

Outras coisas:
git sub modules  = para ter um repositorio git dentro de outro

////////////////////////////////////////////////////////// &&&
VIDEO: https://www.youtube.com/embed/ts-H3W1uLMM

Para pegar as diferenças entre uma versao do arquivo que foi pro stage e outra mais atual com mudanças:
git diff teste.html

------------------- ###

Para salvar dados ja digitados se quiser mudar de branch:
git stash

Para aplicar os dados salvos no stash em um branch:
git stash apply
ou 
git stash pop

apply = atualiza e ainda mantem os dados no stash
pop = atualiza e esvazia o stash

------------------ ###

MERGE x REBASE

O merge cria um novo commit, diferentemente do rebase
O rebase muda a base para a última versão mais atualizada

Para usar o rebase:
git checkout nova_feature
git rebase main

Com isso, a branch nova_feature será atualizada com a ultima commit da main

É possível escolher a quantidade de commits que quer atualizar a branch:
git rebase -i HEAD~3
(Com isso, será atualizada com apenas os 3 ultimos commits)

-------------------- ###

Criando tags:
Usada para marcar versões de lançamento (v1.0, v1.3, v2.0, etc...)

Existem tags leves e anotadas

Tags leves = é um ponteiro para um commit especifico e não tem informações detalhadas, como autor, mensagens ou data
Tags anotadas = são mais detalhadas, contendo metadados como autor, data e mensagem. É recomendado para lançamentos

Para criar uma tag leve, digite:
git tag v2025

Para criar uma tag anotada, digite:
git tag -s v2025 -m "Tag criada versão 2025"

Para remover uma tag:
git tag -d v2025

Para mostrar informações de uma tag:
git show v2025

Para enviar uma tag pro github:
git push origin v2025

Para remover uma tag do github:
git push origin --delete v2025

--------------------- ###

teste2












