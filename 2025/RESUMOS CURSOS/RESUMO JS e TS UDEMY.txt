





////////////////////////////////////////////////////// &&& ###
SEÇÃO 9

Instalando o npm:
npm init
ou 
npm init -y

Será gerado o arquivo package.json

----------- ###
BABEL

Instalando o babel:
npm install --save-dev @babel/cli @babel/preset-env @babel/core

Babel serve para traduzir codigos não suportados por certos navegadores para javascript antigo

Exemplo: 
Crie um arquivo em javascript e digite alguns codigos (Ex: main.js)
Digite no terminal:  npx babel main.js -o bundle.js --presets=@babel/env
Será criado um arquivo bundle.js com o codigo traduzido para javascript antigo para funcionar em navegadores mais antigos

------------ ###
WEBPACK

Instalando o babel e o WEBPACK
npm install --save-dev @babel/cli @babel/preset-env @babel/core babel-loader webpack webpack-cli regenerator-runtime core-js

O --save-dev é opcional para instalar os modulos em devDependencies ao invés de dependencies

Crie um arquivo chamado webpack.config.js na raiz. Dentro do arquivo, digite:

const path = require('path');

module.exports = {
	mode: 'development',
	entry: './src/index.js',
	output: {
		path: path.resolve(__dirname, 'public', 'assets', 'js'),
		filename: 'bundle.js'
	},
	module: {
		rules: [{
			exclude: /node_modules/,
			test: /\.js$/,
			use: {
				loader: 'babel-loader',
				options: {
					presets: ['@babel/env']
				}
			}
		}]
	},
	devtool: 'source-map'
};


-No arquivo package.json, adicione o script:
...
	"scripts": {
		"gera": "webpack -w"
	}
...


No terminal, digite:
npm run gera

Com isso, serão gerados os arquivos bundle.js e bundle.js.map e o webpack começará a observar o arquivo bundle.js

Estrutura das pastas e arquivos:
public
	assets
		js
			bundle.js
			bundle.js.map
	index.html
src
	index.js
.gitignore
package-lock.json
package.json
webpack.config.js


-Dentro da pasta index.html dentro de public:

...
<body>
	<script src="./assets/js/bundle.js"></script>
</body>
</html>

Com isso, ao colocar codigos no arquivo index.js dentro de src, ele será traduzido pelo babel para javascript antigo

------------------------------------------ ###

IMPORTANDO E EXPORTANDO MODULOS

-Arquivo modulo1.js:

const nome = "Luiz"
const sobrenome = "Carlos"

const soma = (x, y) => {
  return x + y
} 

export {nome, sobrenome, soma}

-Arquivo index.js:

import {nome, sobrenome, soma} from "./modulo1"

console.log(nome)
console.log(sobrenome)
console.log(soma(5,5))

--------

Importando um modulo com outro nome:

import {nome as nome2} from "./modulo1"

console.log(nome2)

--------

Exportando ao criar um modulo:

export const nome = "Carlos"

---------

Importando todos os modulos ao mesmo tempo:

import * as Modulos from "./modulo1"

console.log(Modulos.nome)
console.log(Modulos.sobrenome)
console.log(Modulos.soma)

----------

Exportando modulo como default:
(Só pode 1 por arquivo!!!)

-No arquivo modulo1.js:

const nome = "Carlos"

export default nome

-No arquivo index.js:

import nome from './modulo1.js'

console.log(nome)

OBS: Ao exportar um modulo como default, não é necessario colocar entre {} ao importar

-Se for mais de um modulo para exportar:

export {nome as default, sobrenome, soma}

E no arquivo que importará os módulos:

import nome, {sobrenome, soma} from './modulo1'

---------------------- ### &&&

Criando um gerador de senhas:

-Arquivo geradores.js:

const rand = (min, max) => Math.floor(Math.random() * (max - min) + min);
const geraMaiuscula = () => String.fromCharCode(rand(65, 91));
const geraMinuscula = () => String.fromCharCode(rand(97, 123));
const geraNumero = () => String.fromCharCode(rand(48, 58));
const simbolos = ',.;~^[]{}!@#$%*()_+=-';
const geraSimbolo = () => simbolos[rand(0, simbolos.length)];

export default function geraSenha(qtd, maiusculas, minusculas, numeros, simbolos) {
  const senhaArray = [];
  qtd = Number(qtd);

  for(let i = 0; i < qtd; i++) {
    maiusculas && senhaArray.push(geraMaiuscula());
    minusculas && senhaArray.push(geraMinuscula());
    numeros && senhaArray.push(geraNumero());
    simbolos && senhaArray.push(geraSimbolo());
  }

  return senhaArray.join('').slice(0, qtd);
}

-Arquivo formGeraSenha.js:

import geraSenha from './geradores';

const senhaGerada = document.querySelector('.senha-gerada');
const qtdCaracteres = document.querySelector('.qtd-caracteres');
const chkMaiusculas = document.querySelector('.chk-maiusculas');
const chkMinusculas = document.querySelector('.chk-minusculas');
const chkNumeros = document.querySelector('.chk-numeros');
const chkSimbolos = document.querySelector('.chk-simbolos');
const gerarSenha = document.querySelector('.gerar-senha');

export default () => {
  gerarSenha.addEventListener('click', () => {
    senhaGerada.innerHTML = gera();
  });
};

function gera() {
  const senha = geraSenha(
    qtdCaracteres.value,
    chkMaiusculas.checked,
    chkMinusculas.checked,
    chkNumeros.checked,
    chkSimbolos.checked
  );

  return senha || 'Nada selecionado.';
}

/////////////////////////////////////////////////////////// &&& ###

SEÇÃO 10 - Javascript - Node, Npm, Express, MongoDB (NodeJS)

Exportar modulos no Node:

const nome = "Luiz"

module.exports.nome = nome

Se der um console.log(module.exports), aparecerá os modulos exportados como objetos.

-----

Outra forma:

const nome = "Luiz"

exports.nome = nome

console.log(exports)

-----

Usando o this:

const nome = "Luiz"

this.nome = nome

console.log(exports)

------------------------ ###

Importando o modulo:

-Arquivo mod1.js:

const nome = "Luiz"

exports.nome = nome

console.log(exports)

-Arquivo index.js:

const modulo1 = require('./mod1') 

console.log(modulo1)                    //OU console.log(modulo1.nome)

---------

Importando um módulo específico:

const modulo1 = require('./mod1').nome

---------

Outra forma de importar:

const {nome} = require('./mod1')

console.log(nome)

-------------------------

Importando e exportando classes:

-Arquivo mod1.js:

class Pessoa {
	constructor(nome){
		this.nome = nome;
	}
}

exports.Pessoa = Pessoa;

-Arquivo index.js:

const {Pessoa} = require('./mod1')

const p1 = new Pessoa("Luiz")
console.log(p1)

----------------

Exportando mais de 1 modulo:

const nome = "Luiz"
const sobrenome = "Carlos"
const idade = 33

module.exports = {
	nome, sobrenome, idade
}

OBS: não funciona com somente exports!!!

----------------

Importando um modulo instalado pelo npm:

const axios = require('axios')

axios('https://...')
	.then(response => console.log(response.data))
	.catch(e => console.log(e))

---------------------- ### 

__dirname = nome da pasta atual
__filename = nome do arquivo atual

console.log(__dirname)     //retornará o nome da pasta atual. Ex: C:\WEB\NODEJS
console.log(__filename)     //retornará o nome do arquivo atual. Ex: C:\\WEB\NODEJS\teste2.js

----------------------- ###

Modulo path é um modulo que já vem no Node

const path = require('path')

console.log(path.resolve(__dirname))                 //retornará o nome da pasta atual. Ex: C:\WEB\NODEJS
console.log(path.resolve(__dirname, '..'))                   //Dois pontos volta 1 pasta. Ex: C:\WEB\
console.log(path.resolve(__dirname, 'curso', 'aula1'))       //Colocará em outras pastas. Ex: C:\WEB\NODEJS\curso\aula1

----------------------- ###

NPM comandos:

npm init = gera o arquivo package.json

npm install OU npm i = instala os módulo descritos dentro do arquivo package.json

npm install axios = instala um modulo/dependencies (neste exemplo instala o axios)

npm install axios --save-dev  = move o axios de dependencies para um devDependencies (usada apenas para desenvolvimento)

npm install axios --save-prod  = move de volta para dependencies

npm install express@2.1.0  = instala exatamente a versão 2.1.0 do express

OBS: versão 2.1.0 significa: 
2 (major) . 1 (minor) . 0 (patch)
patch = para correções
minor = para recursos novos
major = pode quebrar a compatibilidade se atualizar para a versão mais atualizada

"dependencies": {
	"express": "^2.1.0"   //O ^ significa que pode atualizar o patch e o minor, mas não o major
}
Se não quiser o ^ pode usar:  npm install express@2.1.0 -E

"dependencies": {
	"express": "~2.1.0"   //O ~ significa que pode atualizar o patch, mas não o major e minor
}

npm install express@4.x   = instala a versão mais atualizada da versão 4

npm update = atualiza as dependencies instaladas

npm outdated = lista as dependencies desatualizadas

npm uninstall express   = desinstala o express

npm ls   = lista todas as dependencies instaladas
npm ls --depth=0    = lista apenas as dependencies que você instalou


node arquivo.js = executa no terminal o arquivo

node --version   = para saber a versão do node
npm --version   = para saber a versão do npm

npm start = roda o app.js
npm run script = roda algum script criado no package.json (Ex: npm run dev)